{"codeList":["client.create_collection(​\n    collection_name=\"my_collection\",​\n    schema=schema,​\n    consistency_level=\"Bounded\",​ # Defaults to Bounded if not specified​\n)​\n\n","CreateCollectionReq createCollectionReq = CreateCollectionReq.builder()​\n        .collectionName(\"my_collection\")​\n        .collectionSchema(schema)​\n        .consistencyLevel(ConsistencyLevel.BOUNDED)​\n        .build();​\nclient.createCollection(createCollectionReq);​\n\n","export schema='{​\n        \"autoId\": true,​\n        \"enabledDynamicField\": false,​\n        \"fields\": [​\n            {​\n                \"fieldName\": \"my_id\",​\n                \"dataType\": \"Int64\",​\n                \"isPrimary\": true​\n            },​\n            {​\n                \"fieldName\": \"my_vector\",​\n                \"dataType\": \"FloatVector\",​\n                \"elementTypeParams\": {​\n                    \"dim\": \"5\"​\n                }​\n            },​\n            {​\n                \"fieldName\": \"my_varchar\",​\n                \"dataType\": \"VarChar\",​\n                \"isClusteringKey\": true,​\n                \"elementTypeParams\": {​\n                    \"max_length\": 512​\n                }​\n            }​\n        ]​\n    }'​\n​\nexport params='{​\n    \"consistencyLevel\": \"Bounded\"​\n}'​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"my_collection\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"params\\\": $params​\n}\"​\n\n","res = client.search(​\n    collection_name=\"my_collection\",​\n    data=[query_vector],​\n    limit=3,​\n    search_params={\"metric_type\": \"IP\"}，​\n    # highlight-start​\n    consistency_level=\"Bounded\",​\n    # highlight-next-line​\n)​\n\n","SearchReq searchReq = SearchReq.builder()​\n        .collectionName(\"my_collection\")​\n        .data(Collections.singletonList(queryVector))​\n        .topK(3)​\n        .searchParams(params)​\n        .consistencyLevel(ConsistencyLevel.BOUNDED)​\n        .build();​\n​\nSearchResp searchResp = client.search(searchReq);​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"data\": [​\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]​\n    ],​\n    \"limit\": 3,​\n    \"consistencyLevel\": \"Bounded\"​\n}'​\n\n","res = client.query(​\n    collection_name=\"my_collection\",​\n    filter=\"color like \\\"red%\\\"\",​\n    output_fields=[\"vector\", \"color\"],​\n    limit=3，​\n    # highlight-start​\n    consistency_level=\"Eventually\",​\n    # highlight-next-line​\n)​\n\n","QueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"color like \\\"red%\\\"\")​\n        .outputFields(Arrays.asList(\"vector\", \"color\"))​\n        .limit(3)​\n        .consistencyLevel(ConsistencyLevel.EVENTUALLY)​\n        .build();​\n        ​\n QueryResp getResp = client.query(queryReq);​\n\n"],"headingContent":"Consistency Level​","anchorList":[{"label":"Consistency Level​","href":"Consistency-Level​","type":1,"isActive":false},{"label":"Overview​","href":"Overview​","type":2,"isActive":false},{"label":"Set Consistency Level​","href":"Set-Consistency-Level​","type":2,"isActive":false}]}