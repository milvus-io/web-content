{"codeList":["from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\ndata=[\n    {\n        \"id\": 0, \n        \"vector\": [-0.619954382375778, 0.4479436794798608, -0.17493894838751745, -0.4248030059917294, -0.8648452746018911],\n        \"title\": \"Artificial Intelligence in Real Life\", \n        \"issue\": \"vol.12\"\n    }, {\n        \"id\": 1, \n        \"vector\": [0.4762662251462588, -0.6942502138717026, -0.4490002642657902, -0.628696575798281, 0.9660395877041965], \n        \"title\": \"Hollow Man\", \n        \"issue\": \"vol.19\"\n    }, {\n        \"id\": 2, \n        \"vector\": [-0.8864122635045097, 0.9260170474445351, 0.801326976181461, 0.6383943392381306, 0.7563037341572827], \n        \"title\": \"Treasure Hunt in Missouri\", \n        \"issue\": \"vol.12\"\n    }\n]\n\nres = client.upsert(\n    collection_name='my_collection',\n    data=data\n)\n\nprint(res)\n\n# Output\n# {'upsert_count': 3}\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.UpsertReq;\nimport io.milvus.v2.service.vector.response.UpsertResp;\n\nimport java.util.*;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n\nGson gson = new Gson();\nList<JsonObject> data = Arrays.asList(\n        gson.fromJson(\"{\\\"id\\\": 0, \\\"vector\\\": [-0.619954382375778, 0.4479436794798608, -0.17493894838751745, -0.4248030059917294, -0.8648452746018911], \\\"title\\\": \\\"Artificial Intelligence in Real Life\\\", \\\"issue\\\": \\\"\\vol.12\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 1, \\\"vector\\\": [0.4762662251462588, -0.6942502138717026, -0.4490002642657902, -0.628696575798281, 0.9660395877041965], \\\"title\\\": \\\"Hollow Man\\\", \\\"issue\\\": \\\"vol.19\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 2, \\\"vector\\\": [-0.8864122635045097, 0.9260170474445351, 0.801326976181461, 0.6383943392381306, 0.7563037341572827], \\\"title\\\": \\\"Treasure Hunt in Missouri\\\", \\\"issue\\\": \\\"vol.12\\\"}\", JsonObject.class),\n);\n\nUpsertReq upsertReq = UpsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(data)\n        .build();\n\nUpsertResp upsertResp = client.upsert(upsertReq);\nSystem.out.println(upsertResp);\n\n// Output:\n//\n// UpsertResp(upsertCnt=3)\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\ndata = [\n    {id: 0, vector: [-0.619954382375778, 0.4479436794798608, -0.17493894838751745, -0.4248030059917294, -0.8648452746018911], title: \"Artificial Intelligence in Real Life\", issue: \"vol.12\"},\n    {id: 1, vector: [0.4762662251462588, -0.6942502138717026, -0.4490002642657902, -0.628696575798281, 0.9660395877041965], title: \"Hollow Man\", issue: \"vol.19\"},\n    {id: 2, vector: [-0.8864122635045097, 0.9260170474445351, 0.801326976181461, 0.6383943392381306, 0.7563037341572827], title: \"Treasure Hunt in Missouri\", issue: \"vol.12\"},\n]\n\nres = await client.upsert({\n    collection_name: \"my_collection\",\n    data: data,\n})\n\nconsole.log(res.upsert_cnt)\n\n// Output\n// \n// 3\n// \n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\ntitleColumn := column.NewColumnString(\"title\", []string{\n    \"Artificial Intelligence in Real Life\", \"Hollow Man\", \"Treasure Hunt in Missouri\", \n})\n\nissueColumn := column.NewColumnString(\"issue\", []string{\n    \"vol.12\", \"vol.19\", \"vol.12\"\n})\n\n_, err = client.Upsert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"id\", []int64{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}).\n    WithFloatVectorColumn(\"vector\", 5, [][]float32{\n        {0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592},\n        {0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104},\n        {0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592},\n    }).\n    WithColumns(titleColumn, issueColumn),\n)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/upsert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"id\": 0, \"vector\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], \"title\": \"Artificial Intelligence in Real Life\", \"issue\": \"vol.12\"},\n        {\"id\": 1, \"vector\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104], \"title\": \"Hollow Man\", \"issue\": \"vol.19\"},\n        {\"id\": 2, \"vector\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592], \"title\": \"Treasure Hunt in Missouri\", \"issue\": \"vol.12\"},\n],\n    \"collectionName\": \"my_collection\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {\n#         \"upsertCount\": 3,\n#         \"upsertIds\": [\n#             0,\n#             1,\n#             2,\n#         ]\n#     }\n# }\n","data=[\n    {\n        \"id\": 10, \n        \"vector\": [0.06998888224297328, 0.8582816610326578, -0.9657938677934292, 0.6527905683627726, -0.8668460657158576], \n        \"title\": \"Layour Design Reference\", \n        \"issue\": \"vol.34\"\n    },\n    {\n        \"id\": 11, \n        \"vector\": [0.6060703043917468, -0.3765080534566074, -0.7710758854987239, 0.36993888322346136, 0.5507513364206531], \n        \"title\": \"Doraemon and His Friends\", \n        \"issue\": \"vol.2\"\n    },\n    {\n        \"id\": 12, \n        \"vector\": [-0.9041813104515337, -0.9610546012461163, 0.20033003106083358, 0.11842506351635174, 0.8327356724591011], \n        \"title\": \"Pikkachu and Pokemon\", \n        \"issue\": \"vol.12\"\n    },\n]\n\nres = client.upsert(\n    collection_name=\"my_collection\",\n    data=data,\n    partition_name=\"partitionA\"\n)\n\nprint(res)\n\n# Output\n# {'upsert_count': 3}\n","import io.milvus.v2.service.vector.request.UpsertReq;\nimport io.milvus.v2.service.vector.response.UpsertResp;\n\nGson gson = new Gson();\nList<JsonObject> data = Arrays.asList(\n        gson.fromJson(\"{\\\"id\\\": 10, \\\"vector\\\": [0.06998888224297328, 0.8582816610326578, -0.9657938677934292, 0.6527905683627726, -0.8668460657158576], \\\"title\\\": \\\"Layour Design Reference\\\", \\\"issue\\\": \\\"vol.34\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 11, \\\"vector\\\": [0.6060703043917468, -0.3765080534566074, -0.7710758854987239, 0.36993888322346136, 0.5507513364206531], \\\"title\\\": \\\"Doraemon and His Friends\\\", \\\"issue\\\": \\\"vol.2\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 12, \\\"vector\\\": [-0.9041813104515337, -0.9610546012461163, 0.20033003106083358, 0.11842506351635174, 0.8327356724591011], \\\"title\\\": \\\"Pikkachu and Pokemon\\\", \\\"issue\\\": \\\"vol.12\\\"}\", JsonObject.class),\n);\n\nUpsertReq upsertReq = UpsertReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionName(\"partitionA\")\n        .data(data)\n        .build();\n\nUpsertResp upsertResp = client.upsert(upsertReq);\nSystem.out.println(upsertResp);\n\n// Output:\n//\n// UpsertResp(upsertCnt=3)\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\n// 6. Upsert data in partitions\ndata = [\n    {id: 10, vector: [0.06998888224297328, 0.8582816610326578, -0.9657938677934292, 0.6527905683627726, -0.8668460657158576], title: \"Layour Design Reference\", issue: \"vol.34\"},\n    {id: 11, vector: [0.6060703043917468, -0.3765080534566074, -0.7710758854987239, 0.36993888322346136, 0.5507513364206531], title: \"Doraemon and His Friends\", issue: \"vol.2\"},\n    {id: 12, vector: [-0.9041813104515337, -0.9610546012461163, 0.20033003106083358, 0.11842506351635174, 0.8327356724591011], title: \"Pikkachu and Pokemon\", issue: \"vol.12\"},\n]\n\nres = await client.upsert({\n    collection_name: \"my_collection\",\n    data: data,\n    partition_name: \"partitionA\"\n})\n\nconsole.log(res.upsert_cnt)\n\n// Output\n// \n// 3\n// \n","titleColumn = column.NewColumnString(\"title\", []string{\n    \"Layour Design Reference\", \"Doraemon and His Friends\", \"Pikkachu and Pokemon\", \n})\nissueColumn = column.NewColumnString(\"issue\", []string{\n    \"vol.34\", \"vol.2\", \"vol.12\", \n})\n\n_, err = client.Upsert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithPartition(\"partitionA\").\n    WithInt64Column(\"id\", []int64{10, 11, 12, 13, 14, 15, 16, 17, 18, 19}).\n    WithFloatVectorColumn(\"vector\", 5, [][]float32{\n        {0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592},\n        {0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104},\n        {0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592},\n    }).\n    WithColumns(titleColumn, issueColumn),\n)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/upsert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"id\": 10, \"vector\": [0.06998888224297328, 0.8582816610326578, -0.9657938677934292, 0.6527905683627726, -0.8668460657158576], \"title\": \"Layour Design Reference\", \"issue\": \"vol.34\"},\n        {\"id\": 11, \"vector\": [0.6060703043917468, -0.3765080534566074, -0.7710758854987239, 0.36993888322346136, 0.5507513364206531], \"title\": \"Doraemon and His Friends\", \"issue\": \"vol.2\"},\n        {\"id\": 12, \"vector\": [-0.9041813104515337, -0.9610546012461163, 0.20033003106083358, 0.11842506351635174, 0.8327356724591011], \"title\": \"Pikkachu and Pokemon\", \"issue\": \"vol.12\"},\n    ],\n    \"collectionName\": \"my_collection\",\n    \"partitionName\": \"partitionA\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {\n#         \"upsertCount\": 3,\n#         \"upsertIds\": [\n#             10,\n#             11,\n#             12,\n#         ]\n#     }\n# }\n","data=[\n    {\n        \"id\": 3,\n        \"issue\": \"vol.14\"\n    },\n    {\n        \"id\": 12, \n        \"issue\": \"vol.7\"\n    }\n]\n\nres = client.upsert(\n    collection_name=\"my_collection\",\n    data=data,\n    partial_update=True\n)\n\nprint(res)\n\n# Output\n# {'upsert_count': 2}\n","JsonObject row1 = new JsonObject();\nrow1.addProperty(\"id\", 3);\nrow1.addProperty(\"issue\", \"vol.14\");\n\nJsonObject row2 = new JsonObject();\nrow2.addProperty(\"id\", 12);\nrow2.addProperty(\"issue\", \"vol.7\");\n\nUpsertReq upsertReq = UpsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(Arrays.asList(row1, row2))\n        .partialUpdate(true)\n        .build();\n\nUpsertResp upsertResp = client.upsert(upsertReq);\nSystem.out.println(upsertResp);\n\n// Output:\n//\n// UpsertResp(upsertCnt=2)\n","pkColumn := column.NewColumnInt64(\"id\", []int64{3, 12})\nissueColumn = column.NewColumnString(\"issue\", []string{\n    \"vol.17\", \"vol.7\",\n})\n\n_, err = client.Upsert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithColumns(pkColumn, issueColumn).\n    WithPartialUpdate(true),\n)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","const data=[\n    {\n        \"id\": 3,\n        \"issue\": \"vol.14\"\n    },\n    {\n        \"id\": 12, \n        \"issue\": \"vol.7\"\n    }\n];\n\nconst res = await client.upsert({\n    collection_name: \"my_collection\",\n    data,\n    partial_update: true\n});\n\nconsole.log(res)\n\n// Output\n// \n// 2\n// \n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/upsert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"id\": 3, \"issue\": \"vol.14\"},\n        {\"id\": 12, \"issue\": \"vol.7\"}\n    ],\n    \"collectionName\": \"my_collection\",\n    \"partialUpdate\": true\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {\n#         \"upsertCount\": 2,\n#         \"upsertIds\": [\n#              3,\n#             12,\n#         ]\n#     }\n# }\n"],"headingContent":"Upsert Entities","anchorList":[{"label":"Upsert Entities","href":"Upsert-Entities","type":1,"isActive":false},{"label":"Overview","href":"Overview","type":2,"isActive":false},{"label":"Upsert in override mode","href":"Upsert-in-override-mode","type":3,"isActive":false},{"label":"Upsert in merge mode","href":"Upsert-in-merge-mode--Milvus-v262+","type":3,"isActive":false},{"label":"Upsert behaviors: special notes","href":"Upsert-behaviors-special-notes","type":3,"isActive":false},{"label":"Limits & Restrictions","href":"Limits--Restrictions","type":3,"isActive":false},{"label":"Upsert entities in a collection","href":"Upsert-entities-in-a-collection","type":2,"isActive":false},{"label":"Upsert entities in a partition","href":"Upsert-entities-in-a-partition","type":2,"isActive":false},{"label":"Upsert entities in merge mode","href":"Upsert-entities-in-merge-mode--Milvus-v262+","type":2,"isActive":false}]}