{"codeList":["from pymilvus import MilvusClient\n\nclient= MilvusClient(uri=\"http://localhost:19530\")\n\nclient.create_collection(\n    collection_name=\"my_collection\",\n    dimension=5,\n    # highlight-next-line\n    enable_dynamic_field=True\n)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build());\n        \nCreateCollectionReq createCollectionReq = CreateCollectionReq.builder()\n    .collectionName(\"my_collection\")\n    .dimension(5)\n    // highlight-next-line\n    .enableDynamicField(true)\n    .build()\nclient.createCollection(createCollectionReq);\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst client = new Client({\n    address: 'http://localhost:19530'\n});\n\nawait client.createCollection({\n    collection_name: \"customized_setup_2\",\n    schema: schema,\n    // highlight-next-line\n    enable_dynamic_field: true\n});\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)  \n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\ncli, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: \"localhost:19530\",\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\ndefer client.Close(ctx)\n\nerr = client.CreateCollection(ctx, milvusclient.SimpleCreateCollectionOptions(\"my_collection\", 5).\n    WithAutoID(false).\n    WithDynamicSchema(true))\nif err != nil {\n    fmt.Println(err.Error())\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"dimension\": 5,\n    \"enableDynamicField\": true\n}'\n","[\n    {id: 0, vector: [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], color: \"pink_8682\"},\n    {id: 1, vector: [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104], color: \"red_7025\"},\n    {id: 2, vector: [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592], color: \"orange_6781\"},\n    {id: 3, vector: [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345], color: \"pink_9298\"},\n    {id: 4, vector: [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106], color: \"red_4794\"},\n    {id: 5, vector: [0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955], color: \"yellow_4222\"},\n    {id: 6, vector: [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987], color: \"red_9392\"},\n    {id: 7, vector: [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052], color: \"grey_8510\"},\n    {id: 8, vector: [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336], color: \"white_9381\"},\n    {id: 9, vector: [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717, -0.6980531615588608], color: \"purple_4976\"}        \n]\n","data=[\n    {\"id\": 0, \"vector\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], \"color\": \"pink_8682\"},\n    {\"id\": 1, \"vector\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104], \"color\": \"red_7025\"},\n    {\"id\": 2, \"vector\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592], \"color\": \"orange_6781\"},\n    {\"id\": 3, \"vector\": [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345], \"color\": \"pink_9298\"},\n    {\"id\": 4, \"vector\": [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106], \"color\": \"red_4794\"},\n    {\"id\": 5, \"vector\": [0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955], \"color\": \"yellow_4222\"},\n    {\"id\": 6, \"vector\": [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987], \"color\": \"red_9392\"},\n    {\"id\": 7, \"vector\": [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052], \"color\": \"grey_8510\"},\n    {\"id\": 8, \"vector\": [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336], \"color\": \"white_9381\"},\n    {\"id\": 9, \"vector\": [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717, -0.6980531615588608], \"color\": \"purple_4976\"}\n]\n\nres = client.insert(\n    collection_name=\"my_collection\",\n    data=data\n)\n\nprint(res)\n\n# Output\n# {'insert_count': 10, 'ids': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.InsertResp;\n   \nGson gson = new Gson();\nList<JsonObject> data = Arrays.asList(\n        gson.fromJson(\"{\\\"id\\\": 0, \\\"vector\\\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], \\\"color\\\": \\\"pink_8682\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 1, \\\"vector\\\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104], \\\"color\\\": \\\"red_7025\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 2, \\\"vector\\\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592], \\\"color\\\": \\\"orange_6781\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 3, \\\"vector\\\": [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345], \\\"color\\\": \\\"pink_9298\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 4, \\\"vector\\\": [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106], \\\"color\\\": \\\"red_4794\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 5, \\\"vector\\\": [0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955], \\\"color\\\": \\\"yellow_4222\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 6, \\\"vector\\\": [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987], \\\"color\\\": \\\"red_9392\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 7, \\\"vector\\\": [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052], \\\"color\\\": \\\"grey_8510\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 8, \\\"vector\\\": [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336], \\\"color\\\": \\\"white_9381\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"id\\\": 9, \\\"vector\\\": [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717, -0.6980531615588608], \\\"color\\\": \\\"purple_4976\\\"}\", JsonObject.class)\n);\n\nInsertReq insertReq = InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(data)\n        .build();\n\nInsertResp insertResp = client.insert(insertReq);\nSystem.out.println(insertResp);\n\n// Output:\n//\n// InsertResp(InsertCnt=10, primaryKeys=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n","const { DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\n// 3. Insert some data\n\nconst data = [\n    {id: 0, vector: [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], color: \"pink_8682\"},\n    {id: 1, vector: [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104], color: \"red_7025\"},\n    {id: 2, vector: [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592], color: \"orange_6781\"},\n    {id: 3, vector: [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345], color: \"pink_9298\"},\n    {id: 4, vector: [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106], color: \"red_4794\"},\n    {id: 5, vector: [0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955], color: \"yellow_4222\"},\n    {id: 6, vector: [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987], color: \"red_9392\"},\n    {id: 7, vector: [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052], color: \"grey_8510\"},\n    {id: 8, vector: [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336], color: \"white_9381\"},\n    {id: 9, vector: [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717, -0.6980531615588608], color: \"purple_4976\"}        \n]\n\nconst res = await client.insert({\n    collection_name: \"quick_setup\",\n    data: data,\n})\n\nconsole.log(res.insert_cnt)\n\n// Output\n// \n// 10\n// \n","dynamicColumn := column.NewColumnString(\"color\", []string{\n    \"pink_8682\", \"red_7025\", \"orange_6781\", \"pink_9298\", \"red_4794\", \"yellow_4222\", \"red_9392\", \"grey_8510\", \"white_9381\", \"purple_4976\",\n})\n\n_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"id\", []int64{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}).\n    WithFloatVectorColumn(\"vector\", 5, [][]float32{\n        {0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592},\n        {0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104},\n        {0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592},\n        {0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345},\n        {0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106},\n        {0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955},\n        {0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987},\n        {-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052},\n        {0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336},\n        {0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717, -0.6980531615588608},\n    }).\n    WithColumns(dynamicColumn),\n)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"id\": 0, \"vector\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], \"color\": \"pink_8682\"},\n        {\"id\": 1, \"vector\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104], \"color\": \"red_7025\"},\n        {\"id\": 2, \"vector\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592], \"color\": \"orange_6781\"},\n        {\"id\": 3, \"vector\": [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345], \"color\": \"pink_9298\"},\n        {\"id\": 4, \"vector\": [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106], \"color\": \"red_4794\"},\n        {\"id\": 5, \"vector\": [0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955], \"color\": \"yellow_4222\"},\n        {\"id\": 6, \"vector\": [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987], \"color\": \"red_9392\"},\n        {\"id\": 7, \"vector\": [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052], \"color\": \"grey_8510\"},\n        {\"id\": 8, \"vector\": [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336], \"color\": \"white_9381\"},\n        {\"id\": 9, \"vector\": [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717, -0.6980531615588608], \"color\": \"purple_4976\"}        \n    ],\n    \"collectionName\": \"my_collection\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {\n#         \"insertCount\": 10,\n#         \"insertIds\": [\n#             0,\n#             1,\n#             2,\n#             3,\n#             4,\n#             5,\n#             6,\n#             7,\n#             8,\n#             9\n#         ]\n#     }\n# }\n","# Prepare index parameters\nindex_params = client.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"color\",               # Name of the \"column\" you see in queries (the dynamic key).\n    index_type=\"INVERTED\",            # Currently only \"INVERTED\" is supported for indexing JSON fields.\n    index_name=\"color_index\",         # Assign a name to this index.\n    params={\n        \"json_path\": \"color\",         # JSON path to the key you want to index.\n        \"json_cast_type\": \"varchar\"   # Type to which Milvus will cast the extracted values.\n    }\n)\n\n# Create the index\nclient.create_index(\n    collection_name=\"my_collection\",\n    index_params=index_params\n)\n","import io.milvus.v2.common.IndexParam;\n\nList<IndexParam> indexes = new ArrayList<>();\n\nMap<String,Object> extraParams = new HashMap<>();\nextraParams.put(\"json_path\", \"color\");\nextraParams.put(\"json_cast_type\", \"varchar\");\nindexes.add(IndexParam.builder()\n        .fieldName(\"color\")\n        .indexName(\"color_index\")\n        .indexType(IndexParam.IndexType.INVERTED)\n        .extraParams(extraParams)\n        .build());\n\nclient.createIndex(CreateIndexReq.builder()\n        .collectionName(\"my_collection\")\n        .indexParams(indexes)\n        .build());\n","indexTask, err := client.CreateIndex(ctx, milvusclient.NewCreateIndexOption(\"my_collection\", \"color\",\n    index.NewJSONPathIndex(index.Inverted, \"varchar\", \"color\")))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nerr = indexTask.Await(ctx)\nif err != nil {\n    fmt.Println(err.Error())\n    // handler err\n}\n","const index_params = {\n    field_name: \"color\",               // Name of the \"column\" you see in queries (the dynamic key).\n    index_type: \"INVERTED\",            // Currently only \"INVERTED\" is supported for indexing JSON fields.\n    index_name: \"color_index\",         // Assign a name to this index.\n    params:{\n        \"json_path\": \"color\",          // JSON path to the key you want to index.\n        \"json_cast_type\": \"varchar\"   // Type to which Milvus will cast the extracted values.\n    }\n}\n\n// Create the index\nawait client.create_index({\n    collection_name: \"my_collection\",\n    index_params: index_params\n});\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/indexes/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"indexParams\": [\n        {\n            \"fieldName\": \"color\",\n            \"indexName\": \"color_index\",\n            \"indexType\": \"INVERTED\",\n            \"params\": {\n                \"json_path\": \"color\",\n                \"json_cast_type\": \"varchar\"\n            }\n        }\n    ]\n}'\n","query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = client.search(\n    collection_name=\"my_collection\",\n    data=[query_vector],\n    limit=5,\n    # highlight-start\n    filter='color like \"red%\"',\n    output_fields=[\"color\"]\n    # highlight-end\n)\n\nprint(res)\n\n# Output\n# data: [\"[{'id': 1, 'distance': 0.6290165185928345, 'entity': {'color': 'red_7025'}}, {'id': 4, 'distance': 0.5975797176361084, 'entity': {'color': 'red_4794'}}, {'id': 6, 'distance': -0.24996188282966614, 'entity': {'color': 'red_9392'}}]\"] \n\n","import io.milvus.v2.service.vector.request.SearchReq\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.SearchResp\n\nFloatVec queryVector = new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f});\nSearchResp resp = client.search(SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .annsField(\"vector\")\n        .data(Collections.singletonList(queryVector))\n        .outputFields(Collections.singletonList(\"color\"))\n        .filter(\"color like \\\"red%\\\"\")\n        .topK(5)\n        .consistencyLevel(ConsistencyLevel.STRONG)\n        .build());\n\nSystem.out.println(resp.getSearchResults());\n\n// Output\n//\n// [[\n//    SearchResp.SearchResult(entity={color=red_7025}, score=0.6290165, id=1),\n//    SearchResp.SearchResult(entity={color=red_4794}, score=0.5975797, id=4), \n//    SearchResp.SearchResult(entity={color=red_9392}, score=-0.24996188, id=6)\n//]]\n\n","const query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nconst res = await client.search({\n    collection_name: \"quick_setup\",\n    data: [query_vector],\n    limit: 5,\n    // highlight-start\n    filters: \"color like \\\"red%\\\"\",\n    output_fields: [\"color\"]\n    // highlight-end\n});\n","queryVector := []float32{0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592}\n\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    5,                       // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithFilter(\"color like \\\"red%\\\"\").\n    WithANNSField(\"vector\").\n    WithOutputFields(\"color\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"color: \", resultSet.GetColumn(\"color\").FieldData().GetScalars())\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n    ],\n    \"annsField\": \"vector\",\n    \"filter\": \"color like \\\"red%\\\"\",\n    \"limit\": 3,\n    \"outputFields\": [\"color\"]\n}'\n# {\"code\":0,\"cost\":0,\"data\":[{\"color\":\"red_7025\",\"distance\":0.6290165,\"id\":1},{\"color\":\"red_4794\",\"distance\":0.5975797,\"id\":4},{\"color\":\"red_9392\",\"distance\":-0.24996185,\"id\":6}]}\n","[\n    {\n        \"id\": 1, \n        \"distance\": 0.6290165,\n        \"entity\": {\n            \"color\": \"red_7025\"\n        }\n    },\n    {\n        \"id\": 4, \n        \"distance\": 0.5975797,\n        \"entity\": {\n            \"color\": \"red_4794\"\n        }\n    },\n    {\n        \"id\": 6, \n        \"distance\": -0.24996188，\n        \"entity\": {\n            \"color\": \"red_9392\"\n        }\n    },\n]\n"],"headingContent":"Dynamic Field","anchorList":[{"label":"Champ dynamique","href":"Dynamic-Field","type":1,"isActive":false},{"label":"Vue d'ensemble","href":"Overview","type":2,"isActive":false},{"label":"Activation du champ dynamique","href":"Enable-dynamic-field","type":2,"isActive":false},{"label":"Utiliser le champ dynamique","href":"Use-dynamic-field","type":2,"isActive":false}]}