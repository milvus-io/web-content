{"codeList":["from pymilvus import MilvusClient, DataType\n\ncollection_name = \"my_collection\"\n\n# client = MilvusClient(uri=\"http://localhost:19530\")\nclient = MilvusClient(uri=\"./milvus_demo.db\")\n\nschema = MilvusClient.create_schema(\n    auto_id=False,\n)\n\nschema.add_field(field_name=\"article_id\", datatype=DataType.INT64, is_primary=True, description=\"article id\")\nschema.add_field(field_name=\"title\", datatype=DataType.VARCHAR, max_length=200, description=\"article title\")\nschema.add_field(field_name=\"author_info\", datatype=DataType.JSON, description=\"author information\")\nschema.add_field(field_name=\"publish_ts\", datatype=DataType.INT32, description=\"publish timestamp\")\nschema.add_field(field_name=\"image_url\", datatype=DataType.VARCHAR,  max_length=500, description=\"image URL\")\nschema.add_field(field_name=\"image_vector\", datatype=DataType.FLOAT_VECTOR, dim=768, description=\"image vector\")\nschema.add_field(field_name=\"summary\", datatype=DataType.VARCHAR, max_length=1000, description=\"article summary\")\nschema.add_field(field_name=\"summary_dense_vector\", datatype=DataType.FLOAT_VECTOR, dim=768, description=\"summary dense vector\")\nschema.add_field(field_name=\"summary_sparse_vector\", datatype=DataType.SPARSE_FLOAT_VECTOR, description=\"summary sparse vector\")\n","import io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nString collectionName = \"my_collection\";\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"article_id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .description(\"article id\")\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"title\")\n        .dataType(DataType.VarChar)\n        .maxLength(200)\n        .description(\"article title\")\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"author_info\")\n        .dataType(DataType.JSON)\n        .description(\"author information\")\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"publish_ts\")\n        .dataType(DataType.Int32)\n        .description(\"publish timestamp\")\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"image_url\")\n        .dataType(DataType.VarChar)\n        .maxLength(500)\n        .description(\"image URL\")\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"image_vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(768)\n        .description(\"image vector\")\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"summary\")\n        .dataType(DataType.VarChar)\n        .maxLength(1000)\n        .description(\"article summary\")\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"summary_dense_vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(768)\n        .description(\"summary dense vector\")\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"summary_sparse_vector\")\n        .dataType(DataType.SparseFloatVector)\n        .description(\"summary sparse vector\")\n        .build());\n","const { MilvusClient } = require(\"@zilliz/milvus2-sdk-node\");\nconst collectionName = \"my_collection\";\n\nconst client = new MilvusClient(\"http://localhost:19530\");\n\nconst schema = [\n  { name: \"article_id\", type: \"INT64\", is_primary: true, description: \"article id\" },\n  { name: \"title\", type: \"VARCHAR\", max_length: 200, description: \"article title\" },\n  { name: \"author_info\", type: \"JSON\", description: \"author information\" },\n  { name: \"publish_ts\", type: \"INT32\", description: \"publish timestamp\" },\n  { name: \"image_url\", type: \"VARCHAR\", max_length: 500, description: \"image URL\" },\n  { name: \"image_vector\", type: \"FLOAT_VECTOR\", dim: 768, description: \"image vector\" },\n  { name: \"summary\", type: \"VARCHAR\", max_length: 1000, description: \"article summary\" },\n  { name: \"summary_dense_vector\", type: \"FLOAT_VECTOR\", dim: 768, description: \"summary dense vector\" },\n  { name: \"summary_sparse_vector\", type: \"SPARSE_FLOAT_VECTOR\", description: \"summary sparse vector\" },\n];\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\ncollectionName := \"my_collection\"\nschema := entity.NewSchema()\nschema.WithField(entity.NewField().\n    WithName(\"article_id\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true).\n    WithDescription(\"article id\"),\n).WithField(entity.NewField().\n    WithName(\"title\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithMaxLength(200).\n    WithDescription(\"article title\"),\n).WithField(entity.NewField().\n    WithName(\"author_info\").\n    WithDataType(entity.FieldTypeJSON).\n    WithDescription(\"author information\"),\n).WithField(entity.NewField().\n    WithName(\"publish_ts\").\n    WithDataType(entity.FieldTypeInt32).\n    WithDescription(\"publish timestamp\"),\n).WithField(entity.NewField().\n    WithName(\"image_url\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithMaxLength(500).\n    WithDescription(\"image url\"),\n).WithField(entity.NewField().\n    WithName(\"image_vector\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(768).\n    WithDescription(\"image vector\"),\n).WithField(entity.NewField().\n    WithName(\"summary\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithMaxLength(1000).\n    WithDescription(\"article summary\"),\n).WithField(entity.NewField().\n    WithName(\"summary_dense_vector\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(768).\n    WithDescription(\"summary dense vector\"),\n).WithField(entity.NewField().\n    WithName(\"summary_sparse_vector\").\n    WithDataType(entity.FieldTypeSparseVector).\n    WithDescription(\"summary sparse vector\"),\n)\n","# restful\nexport idField='{\n    \"fieldName\": \"article_id\",\n    \"dataType\": \"Int64\",\n    \"isPrimary\": true\n}'\n\nexport titleField='{\n    \"fieldName\": \"title\",\n    \"dataType\": \"VarChar\",\n    \"elementTypeParams\": {\n       \"max_length\": 200\n    }\n}'\n\nexport authorField='{\n    \"fieldName\": \"author_info\",\n    \"dataType\": \"JSON\"\n}'\n\nexport publishField='{\n    \"fieldName\": \"publish_ts\",\n    \"dataType\": \"Int32\"\n}'\n\nexport imgField='{\n    \"fieldName\": \"image_url\",\n    \"dataType\": \"VarChar\",\n    \"elementTypeParams\": {\n       \"max_length\": 500\n    }\n}'\n\nexport imgVecField='{\n    \"fieldName\": \"image_vector\",\n    \"dataType\": \"FloatVector\",\n    \"elementTypeParams\": {\n       \"dim\": 5\n    }\n}'\n\nexport summaryField='{\n    \"fieldName\": \"summary\",\n    \"dataType\": \"VarChar\",\n    \"elementTypeParams\": {\n       \"max_length\": 1000\n    }\n}'\n\nexport summaryDenseField='{\n    \"fieldName\": \"summary_dense_vector\",\n    \"dataType\": \"FloatVector\",\n    \"elementTypeParams\": {\n       \"dim\": 768\n    }\n}'\n\nexport summarySparseField='{\n    \"fieldName\": \"summary_sparse_vector\",\n    \"dataType\": \"SparseFloatVector\",\n    \"elementTypeParams\": {\n       \"dim\": 768\n    }\n}'\n\nexport schema=\"{\n    \\\"autoID\\\": false,\n    \\\"fields\\\": [\n        $idField,\n        $titleField,\n        $authorField,\n        $publishField,\n        $imgField,\n        $imgVecField,\n        $summaryField,\n        $summaryDenseField,\n        $summarySparseField\n    ]\n}\"\n","index_params = client.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"image_vector\",\n    index_type=\"AUTOINDEX\",\n    metric_type=\"IP\",\n)\nindex_params.add_index(\n    field_name=\"summary_dense_vector\",\n    index_type=\"AUTOINDEX\",\n    metric_type=\"IP\",\n)\nindex_params.add_index(\n    field_name=\"summary_sparse_vector\",\n    index_type=\"SPARSE_INVERTED_INDEX\",\n    metric_type=\"IP\",\n)\nindex_params.add_index(\n    field_name=\"publish_ts\",\n    index_type=\"INVERTED\",\n)\n","import io.milvus.v2.common.IndexParam;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nList<IndexParam> indexes = new ArrayList<>();\nindexes.add(IndexParam.builder()\n        .fieldName(\"image_vector\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.IP)\n        .build());\n\nindexes.add(IndexParam.builder()\n        .fieldName(\"summary_dense_vector\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.IP)\n        .build());\n\nindexes.add(IndexParam.builder()\n        .fieldName(\"summary_sparse_vector\")\n        .indexType(IndexParam.IndexType.SPARSE_INVERTED_INDEX)\n        .metricType(IndexParam.MetricType.IP)\n        .build());\n\nindexes.add(IndexParam.builder()\n        .fieldName(\"publish_ts\")\n        .indexType(IndexParam.IndexType.INVERTED)\n        .build());\n","const { IndexType, MetricType } = require(\"@zilliz/milvus2-sdk-node\");\nconst index_params = [\n  {\n    field_name: \"image_vector\",\n    index_type: IndexType.AUTOINDEX,\n    metric_type: MetricType.IP,\n  },\n  {\n    field_name: \"summary_dense_vector\",\n    index_type: IndexType.AUTOINDEX,\n    metric_type: MetricType.IP,\n  },\n  {\n    field_name: \"summary_sparse_vector\",\n    index_type: IndexType.SPARSE_INVERTED_INDEX,\n    metric_type: MetricType.IP,\n  },\n  {\n    field_name: \"publish_ts\",\n    index_type: IndexType.INVERTED,\n  },\n];\n","indexOption1 := milvusclient.NewCreateIndexOption(collectionName, \"image_vector\",\n    index.NewAutoIndex(index.MetricType(entity.IP)))\nindexOption2 := milvusclient.NewCreateIndexOption(collectionName, \"summary_dense_vector\",\n    index.NewAutoIndex(index.MetricType(entity.IP)))\nindexOption3 := milvusclient.NewCreateIndexOption(collectionName, \"summary_sparse_vector\",\n    index.NewSparseInvertedIndex(index.MetricType(entity.IP), 0.2))\nindexOption4 := milvusclient.NewCreateIndexOption(collectionName, \"publish_ts\",\n    index.NewInvertedIndex())\n","# restful\nindexParams='[\n  {\n    \"fieldName\": \"image_vector\",\n    \"params\": {\n      \"index_type\": \"AUTOINDEX\",\n      \"metric_type\": \"IP\"\n    }\n  },\n  {\n    \"fieldName\": \"summary_dense_vector\",\n    \"params\": {\n      \"index_type\": \"AUTOINDEX\",\n      \"metric_type\": \"IP\"\n    }\n  },\n  {\n    \"fieldName\": \"summary_sparse_vector\",\n    \"params\": {\n      \"index_type\": \"AUTOINDEX\",\n      \"metric_type\": \"IP\"\n    }\n  },\n  {\n    \"fieldName\": \"publish_ts\",\n    \"params\": {\n      \"index_type\": \"AUTOINDEX\"\n    }\n  }\n]'\n\n","client.create_collection(\n    collection_name=collection_name,\n    schema=schema,\n    index_params=index_params,\n)\n","CreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(collectionName)\n        .collectionSchema(schema)\n        .indexParams(indexes)\n        .build();\nclient.createCollection(requestCreate);\n","const client.create_collection({\n    collection_name: collection_name,\n    schema: schema,\n    index_params: index_params,\n});\n","err = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(collectionName, schema).\n        WithIndexOptions(indexOption1, indexOption2, indexOption3, indexOption4))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n--data \"{\n  \\\"collectionName\\\": \\\"my_collection\\\",\n  \\\"schema\\\": $schema,\n  \\\"indexParams\\\": $indexParams\n}\"\n\n","collection_desc = client.describe_collection(\n    collection_name=collection_name\n)\nprint(collection_desc)\n","DescribeCollectionResp descResp = client.describeCollection(DescribeCollectionReq.builder()\n        .collectionName(collectionName)\n        .build());\nSystem.out.println(descResp);\n","const collection_desc = await client.describeCollection({\n    collection_name: collection_name\n});\nconsole.log(collection_desc);\n","desc, err := client.DescribeCollection(ctx, milvusclient.NewDescribeCollectionOption(collectionName))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(desc.Schema)\n","# restful\ncurl --request POST \\\n--url \"http://localhost:19530/v2/vectordb/collections/describe\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": $collection_name\n}'\n"],"headingContent":"Schema Design Hands-On","anchorList":[{"label":"Schema Design Hands-On","href":"Schema-Design-Hands-On","type":1,"isActive":false},{"label":"An Example: News Search","href":"An-Example-News-Search","type":2,"isActive":false},{"label":"How to Implement the Example Schema","href":"How-to-Implement-the-Example-Schema","type":2,"isActive":false},{"label":"Other Considerations","href":"Other-Considerations","type":2,"isActive":false}]}