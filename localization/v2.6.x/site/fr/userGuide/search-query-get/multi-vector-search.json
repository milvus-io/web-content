{"codeList":["from pymilvus import (\n    MilvusClient, DataType, Function, FunctionType\n)\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\n# Init schema with auto_id disabled\nschema = MilvusClient.create_schema(auto_id=False)\n\n# Add fields to schema\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True, description=\"product id\")\nschema.add_field(field_name=\"text\", datatype=DataType.VARCHAR, max_length=1000, enable_analyzer=True, description=\"raw text of product description\")\nschema.add_field(field_name=\"text_dense\", datatype=DataType.FLOAT_VECTOR, dim=768, description=\"text dense embedding\")\nschema.add_field(field_name=\"text_sparse\", datatype=DataType.SPARSE_FLOAT_VECTOR, description=\"text sparse embedding auto-generated by the built-in BM25 function\")\nschema.add_field(field_name=\"image_dense\", datatype=DataType.FLOAT_VECTOR, dim=512, description=\"image dense embedding\")\n\n# Add function to schema\nbm25_function = Function(\n    name=\"text_bm25_emb\",\n    input_field_names=[\"text\"],\n    output_field_names=[\"text_sparse\"],\n    function_type=FunctionType.BM25,\n)\nschema.add_function(bm25_function)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.common.clientenum.FunctionType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq.Function;\n\nimport java.util.*;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .autoID(false)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"text\")\n        .dataType(DataType.VarChar)\n        .maxLength(1000)\n        .enableAnalyzer(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"text_dense\")\n        .dataType(DataType.FloatVector)\n        .dimension(768)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"text_sparse\")\n        .dataType(DataType.SparseFloatVector)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"image_dense\")\n        .dataType(DataType.FloatVector)\n        .dimension(512)\n        .build());\n\nschema.addFunction(Function.builder()\n        .functionType(FunctionType.BM25)\n        .name(\"text_bm25_emb\")\n        .inputFieldNames(Collections.singletonList(\"text\"))\n        .outputFieldNames(Collections.singletonList(\"text_sparse\"))\n        .build());\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nfunction := entity.NewFunction().\n    WithName(\"text_bm25_emb\").\n    WithInputFields(\"text\").\n    WithOutputFields(\"text_sparse\").\n    WithType(entity.FunctionTypeBM25)\n\nschema := entity.NewSchema()\n\nschema.WithField(entity.NewField().\n    WithName(\"id\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"text\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithEnableAnalyzer(true).\n    WithMaxLength(1000),\n).WithField(entity.NewField().\n    WithName(\"text_dense\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(768),\n).WithField(entity.NewField().\n    WithName(\"text_sparse\").\n    WithDataType(entity.FieldTypeSparseVector),\n).WithField(entity.NewField().\n    WithName(\"image_dense\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(512),\n).WithFunction(function)\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\n// Define fields\nconst fields = [\n    {\n        name: \"id\",\n        data_type: DataType.Int64,\n        is_primary_key: true,\n        auto_id: false\n    },\n    {\n        name: \"text\",\n        data_type: DataType.VarChar,\n        max_length: 1000,\n        enable_match: true\n    },\n    {\n        name: \"text_dense\",\n        data_type: DataType.FloatVector,\n        dim: 768\n    },\n    {\n        name: \"text_sparse\",\n        data_type: DataType.SPARSE_FLOAT_VECTOR\n    },\n    {\n        name: \"image_dense\",\n        data_type: DataType.FloatVector,\n        dim: 512\n    }\n];\n\n// define function\nconst functions = [\n    {\n      name: \"text_bm25_emb\",\n      description: \"text bm25 function\",\n      type: FunctionType.BM25,\n      input_field_names: [\"text\"],\n      output_field_names: [\"text_sparse\"],\n      params: {},\n    },\n]ï¼›\n","export bm25Function='{\n    \"name\": \"text_bm25_emb\",\n    \"type\": \"BM25\",\n    \"inputFieldNames\": [\"text\"],\n    \"outputFieldNames\": [\"text_sparse\"],\n    \"params\": {}\n}'\n\nexport schema='{\n        \"autoId\": false,\n        \"functions\": [$bm25Function],\n        \"fields\": [\n            {\n                \"fieldName\": \"id\",\n                \"dataType\": \"Int64\",\n                \"isPrimary\": true\n            },\n            {\n                \"fieldName\": \"text\",\n                \"dataType\": \"VarChar\",\n                \"elementTypeParams\": {\n                    \"max_length\": 1000,\n                    \"enable_analyzer\": true\n                }\n            },\n            {\n                \"fieldName\": \"text_dense\",\n                \"dataType\": \"FloatVector\",\n                \"elementTypeParams\": {\n                    \"dim\": \"768\"\n                }\n            },\n            {\n                \"fieldName\": \"text_sparse\",\n                \"dataType\": \"SparseFloatVector\"\n            },\n            {\n                \"fieldName\": \"image_dense\",\n                \"dataType\": \"FloatVector\",\n                \"elementTypeParams\": {\n                    \"dim\": \"512\"\n                }\n            }\n        ]\n    }'\n","from pymilvus import MilvusClient\n\n# Prepare index parameters\nindex_params = client.prepare_index_params()\n\n# Add indexes\nindex_params.add_index(\n    field_name=\"text_dense\",\n    index_name=\"text_dense_index\",\n    index_type=\"AUTOINDEX\",\n    metric_type=\"IP\"\n)\n\nindex_params.add_index(\n    field_name=\"text_sparse\",\n    index_name=\"text_sparse_index\",\n    index_type=\"SPARSE_INVERTED_INDEX\",\n    metric_type=\"BM25\",\n    params={\"inverted_index_algo\": \"DAAT_MAXSCORE\"}, # or \"DAAT_WAND\" or \"TAAT_NAIVE\"\n)\n\nindex_params.add_index(\n    field_name=\"image_dense\",\n    index_name=\"image_dense_index\",\n    index_type=\"AUTOINDEX\",\n    metric_type=\"IP\"\n)\n","import io.milvus.v2.common.IndexParam;\nimport java.util.*;\n\nMap<String, Object> denseParams = new HashMap<>();\n\nIndexParam indexParamForTextDense = IndexParam.builder()\n        .fieldName(\"text_dense\")\n        .indexName(\"text_dense_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.IP)\n        .build();\n\nMap<String, Object> sparseParams = new HashMap<>();\nsparseParams.put(\"inverted_index_algo\": \"DAAT_MAXSCORE\");\nIndexParam indexParamForTextSparse = IndexParam.builder()\n        .fieldName(\"text_sparse\")\n        .indexName(\"text_sparse_index\")\n        .indexType(IndexParam.IndexType.SPARSE_INVERTED_INDEX)\n        .metricType(IndexParam.MetricType.BM25)\n        .extraParams(sparseParams)\n        .build();\n\nIndexParam indexParamForImageDense = IndexParam.builder()\n        .fieldName(\"image_dense\")\n        .indexName(\"image_dense_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.IP)\n        .build();\n\nList<IndexParam> indexParams = new ArrayList<>();\nindexParams.add(indexParamForTextDense);\nindexParams.add(indexParamForTextSparse);\nindexParams.add(indexParamForImageDense);\n","indexOption1 := milvusclient.NewCreateIndexOption(\"my_collection\", \"text_dense\",\n    index.NewAutoIndex(index.MetricType(entity.IP)))\nindexOption2 := milvusclient.NewCreateIndexOption(\"my_collection\", \"text_sparse\",\n    index.NewSparseInvertedIndex(entity.BM25, 0.2))\nindexOption3 := milvusclient.NewCreateIndexOption(\"my_collection\", \"image_dense\",\n    index.NewAutoIndex(index.MetricType(entity.IP)))\n)\n","const index_params = [{\n    field_name: \"text_dense\",\n    index_name: \"text_dense_index\",\n    index_type: \"AUTOINDEX\",\n    metric_type: \"IP\"\n},{\n    field_name: \"text_sparse\",\n    index_name: \"text_sparse_index\",\n    index_type: \"IndexType.SPARSE_INVERTED_INDEX\",\n    metric_type: \"BM25\",\n    params: {\n      inverted_index_algo: \"DAAT_MAXSCORE\", \n    }\n},{\n    field_name: \"image_dense\",\n    index_name: \"image_dense_index\",\n    index_type: \"AUTOINDEX\",\n    metric_type: \"IP\"\n}]\n","export indexParams='[\n        {\n            \"fieldName\": \"text_dense\",\n            \"metricType\": \"IP\",\n            \"indexName\": \"text_dense_index\",\n            \"indexType\":\"AUTOINDEX\"\n        },\n        {\n            \"fieldName\": \"text_sparse\",\n            \"metricType\": \"BM25\",\n            \"indexName\": \"text_sparse_index\",\n            \"indexType\": \"SPARSE_INVERTED_INDEX\",\n            \"params\":{\"inverted_index_algo\": \"DAAT_MAXSCORE\"}\n        },\n        {\n            \"fieldName\": \"image_dense\",\n            \"metricType\": \"IP\",\n            \"indexName\": \"image_dense_index\",\n            \"indexType\":\"AUTOINDEX\"\n        }\n    ]'\n","from pymilvus import MilvusClient\n\nclient.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema,\n    index_params=index_params\n)\n","CreateCollectionReq createCollectionReq = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexParams)\n        .build();\nclient.createCollection(createCollectionReq);\n","err = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithIndexOptions(indexOption1, indexOption2))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","res = await client.createCollection({\n    collection_name: \"my_collection\",\n    fields: fields,\n    index_params: index_params,\n})\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n","from pymilvus import MilvusClient\n\ndata=[\n    {\n        \"id\": 0,\n        \"text\": \"Red cotton t-shirt with round neck\",\n        \"text_dense\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, ...],\n        \"image_dense\": [0.6366019600530924, -0.09323198122475052, ...]\n    },\n    {\n        \"id\": 1,\n        \"text\": \"Wireless noise-cancelling over-ear headphones\",\n        \"text_dense\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, ...],\n        \"image_dense\": [0.6414180010301553, 0.8976979978567611, ...]\n    },\n    {\n        \"id\": 2,\n        \"text\": \"Stainless steel water bottle, 500ml\",\n        \"dense\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, ...],\n        \"image_dense\": [-0.6901259768402174, 0.6100500332193755, ...]\n    }\n]\n\nres = client.insert(\n    collection_name=\"my_collection\",\n    data=data\n)\n\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport io.milvus.v2.service.vector.request.InsertReq;\n\nGson gson = new Gson();\nJsonObject row1 = new JsonObject();\nrow1.addProperty(\"id\", 0);\nrow1.addProperty(\"text\", \"Red cotton t-shirt with round neck\");\nrow1.add(\"text_dense\", gson.toJsonTree(text_dense1));\nrow1.add(\"image_dense\", gson.toJsonTree(image_dense));\n\nJsonObject row2 = new JsonObject();\nrow2.addProperty(\"id\", 1);\nrow2.addProperty(\"text\", \"Wireless noise-cancelling over-ear headphones\");\nrow2.add(\"text_dense\", gson.toJsonTree(text_dense2));\nrow2.add(\"image_dense\", gson.toJsonTree(image_dense2));\n\nJsonObject row3 = new JsonObject();\nrow3.addProperty(\"id\", 2);\nrow3.addProperty(\"text\", \"Stainless steel water bottle, 500ml\");\nrow3.add(\"text_dense\", gson.toJsonTree(dense3));\nrow3.add(\"image_dense\", gson.toJsonTree(sparse3));\n\nList<JsonObject> data = Arrays.asList(row1, row2, row3);\nInsertReq insertReq = InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(data)\n        .build();\n\nInsertResp insertResp = client.insert(insertReq);\n","_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"id\", []int64{0, 1, 2}).\n    WithVarcharColumn(\"text\", []string{\n        \"Red cotton t-shirt with round neck\",\n        \"Wireless noise-cancelling over-ear headphones\",\n        \"Stainless steel water bottle, 500ml\",\n    }).\n    WithFloatVectorColumn(\"text_dense\", 768, [][]float32{\n        {0.3580376395471989, -0.6023495712049978, 0.18414012509913835, ...},\n        {0.19886812562848388, 0.06023560599112088, 0.6976963061752597, ...},\n        {0.43742130801983836, -0.5597502546264526, 0.6457887650909682, ...},\n    }).\n    WithFloatVectorColumn(\"image_dense\", 512, [][]float32{\n        {0.6366019600530924, -0.09323198122475052, ...},\n        {0.6414180010301553, 0.8976979978567611, ...},\n        {-0.6901259768402174, 0.6100500332193755, ...},\n    }).\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nvar data = [\n    {id: 0, text: \"Red cotton t-shirt with round neck\" , text_dense: [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, ...], image_dense: [0.6366019600530924, -0.09323198122475052, ...]},\n    {id: 1, text: \"Wireless noise-cancelling over-ear headphones\" , text_dense: [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, ...], image_dense: [0.6414180010301553, 0.8976979978567611, ...]},\n    {id: 2, text: \"Stainless steel water bottle, 500ml\" , text_dense: [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, ...], image_dense: [-0.6901259768402174, 0.6100500332193755, ...]}\n]\n\nvar res = await client.insert({\n    collection_name: \"my_collection\",\n    data: data,\n})\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"id\": 0, \"text\": \"Red cotton t-shirt with round neck\" , \"text_dense\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, ...], \"image_dense\": [0.6366019600530924, -0.09323198122475052, ...]},\n        {\"id\": 1, \"text\": \"Wireless noise-cancelling over-ear headphones\" , \"text_dense\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, ...], \"image_dense\": [0.6414180010301553, 0.8976979978567611, ...]},\n        {\"id\": 2, \"text\": \"Stainless steel water bottle, 500ml\" , \"text_dense\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, ...], \"image_dense\": [-0.6901259768402174, 0.6100500332193755, ...]}\n    ],\n    \"collectionName\": \"my_collection\"\n}'\n","from pymilvus import AnnSearchRequest\n\nquery_text = \"white headphones, quiet and comfortable\"\nquery_dense_vector = [0.3580376395471989, -0.6023495712049978, 0.5142999509918703, ...]\nquery_multimodal_vector = [0.015829865178701663, 0.5264158340734488, ...]\n\n# text semantic search (dense)\nsearch_param_1 = {\n    \"data\": [query_dense_vector],\n    \"anns_field\": \"text_dense\",\n    \"param\": {\"nprobe\": 10},\n    \"limit\": 2\n}\nrequest_1 = AnnSearchRequest(**search_param_1)\n\n# full-text search (sparse)\nsearch_param_2 = {\n    \"data\": [query_text],\n    \"anns_field\": \"text_sparse\",\n    \"param\": {\"drop_ratio_search\": 0.2},\n    \"limit\": 2\n}\nrequest_2 = AnnSearchRequest(**search_param_2)\n\n# text-to-image search (multimodal)\nsearch_param_3 = {\n    \"data\": [query_multimodal_vector],\n    \"anns_field\": \"image_dense\",\n    \"param\": {\"nprobe\": 10},\n    \"limit\": 2\n}\nrequest_3 = AnnSearchRequest(**search_param_3)\n\nreqs = [request_1, request_2, request_3]\n\n","import io.milvus.v2.service.vector.request.AnnSearchReq;\nimport io.milvus.v2.service.vector.request.data.BaseVector;\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.request.data.SparseFloatVec;\nimport io.milvus.v2.service.vector.request.data.EmbeddedText;\n\nfloat[] queryDense = new float[]{-0.0475336798f,  0.0521207601f,  0.0904406682f, ...};\nfloat[] queryMultimodal = new float[]{0.0158298651f, 0.5264158340f, ...}\n\nList<BaseVector> queryTexts = Collections.singletonList(new EmbeddedText(\"white headphones, quiet and comfortable\");)\nList<BaseVector> queryDenseVectors = Collections.singletonList(new FloatVec(queryDense));\nList<BaseVector> queryMultimodalVectors = Collections.singletonList(new FloatVec(queryMultimodal));\n\nList<AnnSearchReq> searchRequests = new ArrayList<>();\nsearchRequests.add(AnnSearchReq.builder()\n        .vectorFieldName(\"text_dense\")\n        .vectors(queryDenseVectors)\n        .params(\"{\\\"nprobe\\\": 10}\")\n        .topK(2)\n        .build());\nsearchRequests.add(AnnSearchReq.builder()\n        .vectorFieldName(\"text_sparse\")\n        .vectors(queryTexts)\n        .params(\"{\\\"drop_ratio_search\\\": 0.2}\")\n        .topK(2)\n        .build());\nsearchRequests.add(AnnSearchReq.builder()\n        .vectorFieldName(\"image_dense\")\n        .vectors(queryMultimodalVectors)\n        .params(\"{\\\"nprobe\\\": 10}\")\n        .topK(2)\n        .build());\n","queryText := entity.Text({\"white headphones, quiet and comfortable\"})\nqueryVector := []float32{0.3580376395471989, -0.6023495712049978, 0.18414012509913835, ...}\nqueryMultimodalVector := []float32{0.015829865178701663, 0.5264158340734488, ...}\n\nrequest1 := milvusclient.NewAnnRequest(\"text_dense\", 2, entity.FloatVector(queryVector)).\n    WithAnnParam(index.NewIvfAnnParam(10))\n\nannParam := index.NewSparseAnnParam()\nannParam.WithDropRatio(0.2)\nrequest2 := milvusclient.NewAnnRequest(\"text_sparse\", 2, queryText).\n    WithAnnParam(annParam)\n\nrequest3 := milvusclient.NewAnnRequest(\"image_dense\", 2, entity.FloatVector(queryMultimodalVector)).\n    WithAnnParam(index.NewIvfAnnParam(10))\n","const query_text = \"white headphones, quiet and comfortable\"\nconst query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, ...]\nconst query_multimodal_vector = [0.015829865178701663, 0.5264158340734488, ...]\n\nconst search_param_1 = {\n    \"data\": query_vector, \n    \"anns_field\": \"text_dense\", \n    \"param\": {\"nprobe\": 10},\n    \"limit\": 2\n}\n\nconst search_param_2 = {\n    \"data\": query_text, \n    \"anns_field\": \"text_sparse\", \n    \"param\": {\"drop_ratio_search\": 0.2},\n    \"limit\": 2\n}\n\nconst search_param_3 = {\n    \"data\": query_multimodal_vector, \n    \"anns_field\": \"image_dense\", \n    \"param\": {\"nprobe\": 10},\n    \"limit\": 2\n}\n","export req='[\n    {\n        \"data\": [[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, ...]],\n        \"annsField\": \"text_dense\",\n        \"params\": {\"nprobe\": 10},\n        \"limit\": 2\n    },\n    {\n        \"data\": [\"white headphones, quiet and comfortable\"],\n        \"annsField\": \"text_sparse\",\n        \"params\": {\"drop_ratio_search\": 0.2},\n        \"limit\": 2\n    },\n    {\n        \"data\": [[0.015829865178701663, 0.5264158340734488, ...]],\n        \"annsField\": \"image_dense\",\n        \"params\": {\"nprobe\": 10},\n        \"limit\": 2\n    }\n ]'\n","from pymilvus import RRFRanker\n\nranker = RRFRanker(100)\n","import io.milvus.v2.service.vector.request.ranker.BaseRanker;\nimport io.milvus.v2.service.vector.request.ranker.RRFRanker;\n\nBaseRanker reranker = new RRFRanker(100);\n","reranker := milvusclient.NewRRFReranker().WithK(100)\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst rerank = RRFRanker(\"100\");\n","export rerank='{\n        \"strategy\": \"rrf\",\n        \"params\": { \"k\": 100}\n    }'\n","from pymilvus import MilvusClient\n\nres = client.hybrid_search(\n    collection_name=\"my_collection\",\n    reqs=reqs,\n    ranker=ranker,\n    limit=2\n)\nfor hits in res:\n    print(\"TopK results:\")\n    for hit in hits:\n        print(hit)\n","import io.milvus.v2.common.ConsistencyLevel;\nimport io.milvus.v2.service.vector.request.HybridSearchReq;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nHybridSearchReq hybridSearchReq = HybridSearchReq.builder()\n        .collectionName(\"my_collection\")\n        .searchRequests(searchRequests)\n        .ranker(reranker)\n        .topK(2)\n        .build();\n\nSearchResp searchResp = client.hybridSearch(hybridSearchReq);\n","resultSets, err := client.HybridSearch(ctx, milvusclient.NewHybridSearchOption(\n    \"my_collection\",\n    2,\n    request1,\n    request2,\n    request3,\n).WithReranker(reranker))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n}\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nres = await client.loadCollection({\n    collection_name: \"my_collection\"\n})\n\nimport { MilvusClient, RRFRanker, WeightedRanker } from '@zilliz/milvus2-sdk-node';\n\nconst search = await client.search({\n  collection_name: \"my_collection\",\n  data: [search_param_1, search_param_2, search_param_3],\n  limit: 2,\n  rerank: rerank\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/advanced_search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"search\\\": ${req},\n    \\\"rerank\\\": {\n        \\\"strategy\\\":\\\"rrf\\\",\n        \\\"params\\\": ${rerank}\n    },\n    \\\"limit\\\": 2\n}\"\n","[\"['id: 1, distance: 0.006047376897186041, entity: {}', 'id: 2, distance: 0.006422005593776703, entity: {}']\"]\n"],"headingContent":"Multi-Vector Hybrid Search","anchorList":[{"label":"Recherche hybride multisectorielle","href":"Multi-Vector-Hybrid-Search","type":1,"isActive":false},{"label":"Exemple de recherche","href":"Example","type":2,"isActive":false},{"label":"CrÃ©er une collection avec plusieurs champs vectoriels","href":"Create-a-collection-with-multiple-vector-fields","type":2,"isActive":false},{"label":"InsÃ©rer des donnÃ©es","href":"Insert-data","type":2,"isActive":false},{"label":"Effectuer une recherche hybride","href":"Perform-Hybrid-Search","type":2,"isActive":false}]}