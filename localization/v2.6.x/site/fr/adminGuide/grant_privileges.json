{"codeList":["from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nclient.grant_privilege_v2(\n    role_name=\"role_a\",\n    privilege=\"Search\",\n    collection_name='collection_01',\n    db_name='default',\n)\n    \nclient.grant_privilege_v2(\n    role_name=\"role_a\",\n    privilege=\"privilege_group_1\",\n    collection_name='collection_01',\n    db_name='default',\n)\n\nclient.grant_privilege_v2(\n    role_name=\"role_a\",\n    privilege=\"ClusterReadOnly\",\n    collection_name='*',\n    db_name='*',\n)\n","import io.milvus.v2.service.rbac.request.GrantPrivilegeReqV2\n\nclient.grantPrivilegeV2(GrantPrivilegeReqV2.builder()\n        .roleName(\"role_a\")\n        .privilege(\"Search\")\n        .collectionName(\"collection_01\")\n        .dbName(\"default\")\n        .build());\n\nclient.grantPrivilegeV2(GrantPrivilegeReqV2.builder()\n        .roleName(\"role_a\")\n        .privilege(\"privilege_group_1\")\n        .collectionName(\"collection_01\")\n        .dbName(\"default\")\n        .build());\n\nclient.grantPrivilegeV2(GrantPrivilegeReqV2.builder()\n        .roleName(\"role_a\")\n        .privilege(\"ClusterReadOnly\")\n        .collectionName(\"*\")\n        .dbName(\"*\")\n        .build());\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: \"localhost:19530\",\n    APIKey:  \"root:Milvus\",\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nerr = client.GrantV2(ctx, milvusclient.NewGrantV2Option(\"role_a\", \"Search\", \"default\", \"collection_01\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nerr = client.GrantV2(ctx, milvusclient.NewGrantV2Option(\"role_a\", \"privilege_group_1\", \"default\", \"collection_01\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nerr = client.GrantV2(ctx, milvusclient.NewGrantV2Option(\"role_a\", \"ClusterReadOnly\", \"*\", \"*\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nawait client.grantPrivilegeV2({\n    role: \"role_a\",\n    privilege: \"Search\"\n    collection_name: 'collection_01'\n    db_name: 'default',\n});\n    \nawait client.grantPrivilegeV2({\n    role: \"role_a\",\n    privilege: \"privilege_group_1\"\n    collection_name: 'collection_01'\n    db_name: 'default',\n});\n\nawait client.grantPrivilegeV2({\n    role: \"role_a\",\n    privilege: \"ClusterReadOnly\"\n    collection_name: '*'\n    db_name: '*',\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/roles/grant_privilege_v2\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"roleName\": \"role_a\",\n    \"privilege\": \"Search\",\n    \"collectionName\": \"collection_01\",\n    \"dbName\":\"default\"\n}'\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/roles/grant_privilege_v2\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"roleName\": \"role_a\",\n    \"privilege\": \"privilege_group_1\",\n    \"collectionName\": \"collection_01\",\n    \"dbName\":\"default\"\n}'\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/roles/grant_privilege_v2\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"roleName\": \"role_a\",\n    \"privilege\": \"ClusterReadOnly\",\n    \"collectionName\": \"*\",\n    \"dbName\":\"*\"\n}'\n\n","from pymilvus import MilvusClient\n\nclient.describe_role(role_name=\"role_a\")\n","import io.milvus.v2.service.rbac.response.DescribeRoleResp;\nimport io.milvus.v2.service.rbac.request.DescribeRoleReq\n\nDescribeRoleReq describeRoleReq = DescribeRoleReq.builder()\n        .roleName(\"role_a\")\n        .build();\nDescribeRoleResp resp = client.describeRole(describeRoleReq);\nList<DescribeRoleResp.GrantInfo> infos = resp.getGrantInfos();\n","import \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n\nrole, err := client.DescribeRole(ctx, milvusclient.NewDescribeRoleOption(\"role_a\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","await client.describeRole({roleName: 'role_a'});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/roles/describe\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"roleName\": \"role_a\"\n}'\n","{\n     \"role\": \"role_a\",\n     \"privileges\": [\n         {\n             \"collection_name\": \"collection_01\",\n             \"db_name\": \"default\",\n             \"role_name\": \"role_a\",\n             \"privilege\": \"Search\",\n             \"grantor_name\": \"root\"\n         },\n         \"privilege_group_1\"\n     ]\n}\n","client.revoke_privilege_v2(\n    role_name=\"role_a\",\n    privilege=\"Search\",\n    collection_name='collection_01',\n    db_name='default',\n)\n    \nclient.revoke_privilege_v2(\n    role_name=\"role_a\",\n    privilege=\"privilege_group_1\",\n    collection_name='collection_01',\n    db_name='default',\n)\n\nclient.revoke_privilege_v2(\n    role_name=\"role_a\",\n    privilege=\"ClusterReadOnly\",\n    collection_name='*',\n    db_name='*',\n)\n","import io.milvus.v2.service.rbac.request.RevokePrivilegeReqV2\n\nclient.revokePrivilegeV2(RevokePrivilegeReqV2.builder()\n        .roleName(\"role_a\")\n        .privilege(\"Search\")\n        .collectionName(\"collection_01\")\n        .dbName(\"default\")\n        .build());\n\nclient.revokePrivilegeV2(RevokePrivilegeReqV2.builder()\n        .roleName(\"role_a\")\n        .privilege(\"privilege_group_1\")\n        .collectionName(\"collection_01\")\n        .dbName(\"default\")\n        .build());\n\nclient.revokePrivilegeV2(RevokePrivilegeReqV2.builder()\n        .roleName(\"role_a\")\n        .privilege(\"ClusterReadOnly\")\n        .collectionName(\"*\")\n        .dbName(\"*\")\n        .build());\n","err = client.RevokePrivilegeV2(ctx, milvusclient.NewRevokePrivilegeV2Option(\"role_a\", \"Search\", \"collection_01\").\n        WithDbName(\"default\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nerr = client.RevokePrivilegeV2(ctx, milvusclient.NewRevokePrivilegeV2Option(\"role_a\", \"privilege_group_1\", \"collection_01\").\n    WithDbName(\"default\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nerr = client.RevokePrivilegeV2(ctx, milvusclient.NewRevokePrivilegeV2Option(\"role_a\", \"ClusterReadOnly\", \"*\").\n    WithDbName(\"*\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","await client.revokePrivilegeV2({\n    role: 'role_a',\n    privilege: 'Search',\n    collection_name: 'collection_01',\n    db_name: 'default'\n});\n\nawait client.revokePrivilegeV2({\n    role: 'role_a',\n    collection_name: 'collection_01',\n    privilege: 'Search',\n    db_name: 'default'\n});\n\nawait client.revokePrivilegeV2({\n    role: 'role_a',\n    collection_name: '*',\n    privilege: 'ClusterReadOnly',\n    db_name: '*'\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/roles/revoke_privilege_v2\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"roleName\": \"role_a\",\n    \"privilege\": \"Search\",\n    \"collectionName\": \"collection_01\",\n    \"dbName\":\"default\"\n}'\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/roles/revoke_privilege_v2\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"roleName\": \"role_a\",\n    \"privilege\": \"Search\",\n    \"collectionName\": \"collection_01\",\n    \"dbName\":\"default\"\n}'\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/roles/revoke_privilege_v2\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"roleName\": \"role_a\",\n    \"privilege\": \"ClusterReadOnly\",\n    \"collectionName\": \"*\",\n    \"dbName\":\"*\"\n}'\n\n"],"headingContent":"Grant Privilege or Privilege Group to Roles","anchorList":[{"label":"Octroi de privilèges ou de groupes de privilèges à des rôles","href":"Grant-Privilege-or-Privilege-Group-to-Roles","type":1,"isActive":false},{"label":"Octroi d'un privilège ou d'un groupe de privilèges à un rôle","href":"Grant-a-privilege-or-a-privilege-group-to-a-role","type":2,"isActive":false},{"label":"Décrire un rôle","href":"Describe-a-role","type":2,"isActive":false},{"label":"Révoquer un privilège ou un groupe de privilèges d'un rôle","href":"Revoke-a-privilege-or-a-privilege-group-from-a-role","type":2,"isActive":false}]}