{"codeList":["from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\n# create a user\nclient.drop_user(user_name=\"user_1\")\n","import io.milvus.v2.client.ConnectConfig\nimport io.milvus.v2.client.MilvusClientV2\nimport io.milvus.v2.service.rbac.request.DropUserReq\n\nConnectConfig connectConfig = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build();\n        \nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\nDropUserReq dropUserReq = DropUserReq.builder()\n        .userName(\"user_1\")\n        .build();\nclient.dropUser(dropUserReq);\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: \"localhost:19530\",\n    APIKey:  \"root:Milvus\",\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nerr = client.DropUser(ctx, milvusclient.NewDropUserOption(\"user_1\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nmilvusClient.deleteUser({\n    username: 'user_1'\n})\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/users/drop\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"userName\": \"user_1\"\n}'\n","from pymilvus import MilvusClient\n\nclient.list_users()\n","import io.milvus.v2.service.rbac.request.listUsersReq\n\nList<String> resp = client.listUsers();\n","users, err := client.ListUsers(ctx, milvusclient.NewListUserOption())\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nawait milvusClient.listUsers();\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/users/list\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{}'\n","['root']\n","from pymilvus import MilvusClient\n\nclient.drop_role(role_name=\"role_a\")\n","import io.milvus.v2.service.rbac.request.DropRoleReq\n\nDropRoleReq dropRoleReq = DropRoleReq.builder()\n        .roleName(\"role_a\")\n        .build();\nclient.dropRole(dropRoleReq);\n","err = client.DropRole(ctx, milvusclient.NewDropRoleOption(\"role_a\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nawait milvusClient.dropRole({\n   roleName: 'role_a',\n });\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/roles/drop\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"roleName\": \"role_a\"\n}'\n","from pymilvus import MilvusClient\n\nclient.list_roles()\n","List<String> resp = client.listRoles();\n","roles, err := client.ListRoles(ctx, milvusclient.NewListRoleOption())\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","await client.listRoles({\n    includeUserInfo: true\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/roles/list\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{}'\n","['admin']\n"],"headingContent":"Drop Users & Roles","anchorList":[{"label":"Hapus Pengguna & Peran","href":"Drop-Users--Roles","type":1,"isActive":false},{"label":"Menghapus pengguna","href":"Drop-a-user","type":2,"isActive":false},{"label":"Menghapus peran","href":"Drop-a-role","type":2,"isActive":false}]}