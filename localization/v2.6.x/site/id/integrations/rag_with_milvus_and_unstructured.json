{"codeList":["$ pip install -qU \"unstructured[pdf]\" pymilvus openai\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","from pymilvus import MilvusClient, DataType\n\n# Initialize Milvus client\nmilvus_client = MilvusClient(uri=\"./milvus_demo.db\")\n","collection_name = \"my_rag_collection\"\n\nif milvus_client.has_collection(collection_name):\n    milvus_client.drop_collection(collection_name)\n","from openai import OpenAI\n\nopenai_client = OpenAI()\n\n\ndef emb_text(text):\n    return (\n        openai_client.embeddings.create(input=text, model=\"text-embedding-3-small\")\n        .data[0]\n        .embedding\n    )\n","test_embedding = emb_text(\"This is a test\")\nembedding_dim = len(test_embedding)\nprint(embedding_dim)\nprint(test_embedding[:10])\n","# Create schema\nschema = milvus_client.create_schema(auto_id=False, enable_dynamic_field=False)\n# Add fields to schema\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=embedding_dim)\nschema.add_field(field_name=\"text\", datatype=DataType.VARCHAR, max_length=65535)\nschema.add_field(field_name=\"metadata\", datatype=DataType.JSON)\nindex_params = MilvusClient.prepare_index_params()\nindex_params.add_index(\n    field_name=\"vector\",\n    metric_type=\"COSINE\",\n    index_type=\"AUTOINDEX\",\n)\nmilvus_client.create_collection(\n    collection_name=collection_name,\n    schema=schema,\n    index_params=index_params,\n    consistency_level=\"Bounded\",\n)\n\nmilvus_client.load_collection(collection_name=collection_name)\n","import warnings\nfrom unstructured.partition.auto import partition\n\nwarnings.filterwarnings(\"ignore\")\n\nelements = partition(\n    filename=\"./pdf_files/WhatisMilvus.pdf\",\n    strategy=\"hi_res\",\n    chunking_strategy=\"by_title\",\n)  # Replace with the path to your PDF file\n","for element in elements:\n    print(element)\n    break\n","data = []\nfor i, element in enumerate(elements):\n    data.append(\n        {\n            \"id\": i,\n            \"vector\": emb_text(element.text),\n            \"text\": element.text,\n            \"metadata\": element.metadata.to_dict(),\n        }\n    )\nmilvus_client.insert(collection_name=collection_name, data=data)\n","def retrieve_documents(question, top_k=3):\n    search_res = milvus_client.search(\n        collection_name=collection_name,\n        data=[emb_text(question)],\n        limit=top_k,\n        # search_params={\"metric_type\": \"IP\", \"params\": {}},\n        output_fields=[\"text\"],\n    )\n    return [(res[\"entity\"][\"text\"], res[\"distance\"]) for res in search_res[0]]\n","def generate_rag_response(question):\n    retrieved_docs = retrieve_documents(question)\n    context = \"\\n\".join([f\"Text: {doc[0]}\\n\" for doc in retrieved_docs])\n    system_prompt = (\n        \"You are an AI assistant. Provide answers based on the given context.\"\n    )\n    user_prompt = f\"\"\"\n    Use the following pieces of information to answer the question. If the information is not in the context, say you don't know.\n    \n    Context:\n    {context}\n    \n    Question: {question}\n    \"\"\"\n    response = openai_client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[\n            {\"role\": \"system\", \"content\": system_prompt},\n            {\"role\": \"user\", \"content\": user_prompt},\n        ],\n    )\n    return response.choices[0].message.content\n","question = \"What is the Advanced Search Algorithms in Milvus?\"\nanswer = generate_rag_response(question)\nprint(f\"Question: {question}\")\nprint(f\"Answer: {answer}\")\n"],"headingContent":"Build a RAG with Milvus and Unstructured","anchorList":[{"label":"Membangun RAG dengan Milvus dan Unstructured","href":"Build-a-RAG-with-Milvus-and-Unstructured","type":1,"isActive":false},{"label":"Persiapan","href":"Preparation","type":2,"isActive":false},{"label":"Membuat Koleksi Milvus","href":"Create-Milvus-Collection","type":2,"isActive":false},{"label":"Memuat data dari Unstructured","href":"Load-data-from-Unstructured","type":2,"isActive":false},{"label":"Mengambil dan Menghasilkan Respons","href":"Retrieve-and-Generate-Response","type":2,"isActive":false}]}