{"codeList":["$ pip install --upgrade pymilvus langextract google-genai requests tqdm pandas\n","import os\n\nos.environ[\"GEMINI_API_KEY\"] = \"AIza*****************\"\n","import langextract as lx\nimport textwrap\nfrom google import genai\nfrom google.genai.types import EmbedContentConfig\nfrom pymilvus import MilvusClient, DataType\nimport uuid\n","genai_client = genai.Client()\n\nCOLLECTION_NAME = \"document_extractions\"\nEMBEDDING_MODEL = \"gemini-embedding-001\"\nEMBEDDING_DIM = 3072  # Default dimension for gemini-embedding-001\n","client = MilvusClient(uri=\"./milvus_demo.db\")\n","sample_documents = [\n    \"John McClane fights terrorists in a Los Angeles skyscraper during Christmas Eve. The action-packed thriller features intense gunfights and explosive scenes.\",\n    \"A young wizard named Harry Potter discovers his magical abilities at Hogwarts School. The fantasy adventure includes magical creatures and epic battles.\",\n    \"Tony Stark builds an advanced suit of armor to become Iron Man. The superhero movie showcases cutting-edge technology and spectacular action sequences.\",\n    \"A group of friends get lost in a haunted forest where supernatural creatures lurk. The horror film creates a terrifying atmosphere with jump scares.\",\n    \"Two detectives investigate a series of mysterious murders in New York City. The crime thriller features suspenseful plot twists and dramatic confrontations.\",\n    \"A brilliant scientist creates artificial intelligence that becomes self-aware. The sci-fi thriller explores the dangers of advanced technology and human survival.\",\n    \"A romantic comedy about two friends who fall in love during a cross-country road trip. The drama explores personal growth and relationship dynamics.\",\n    \"An evil sorcerer threatens to destroy the magical kingdom. A brave hero must gather allies and master ancient magic to save the fantasy world.\",\n    \"Space marines battle alien invaders on a distant planet. The action sci-fi movie features futuristic weapons and intense combat in space.\",\n    \"A detective investigates supernatural crimes in Victorian London. The horror thriller combines period drama with paranormal investigation themes.\",\n]\n\nprint(\"=== LangExtract + Milvus Integration Demo ===\")\nprint(f\"Preparing to process {len(sample_documents)} documents\")\n","print(\"\\n1. Setting up Milvus collection...\")\n\n# Drop existing collection if it exists\nif client.has_collection(collection_name=COLLECTION_NAME):\n    client.drop_collection(collection_name=COLLECTION_NAME)\n    print(f\"Dropped existing collection: {COLLECTION_NAME}\")\n\n# Create collection schema\nschema = client.create_schema(\n    auto_id=False,\n    enable_dynamic_field=True,\n    description=\"Document extraction results and vector storage\",\n)\n\n# Add fields - simplified to 3 main metadata fields\nschema.add_field(\n    field_name=\"id\", datatype=DataType.VARCHAR, max_length=100, is_primary=True\n)\nschema.add_field(\n    field_name=\"document_text\", datatype=DataType.VARCHAR, max_length=10000\n)\nschema.add_field(\n    field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=EMBEDDING_DIM\n)\n\n# Create collection\nclient.create_collection(collection_name=COLLECTION_NAME, schema=schema)\nprint(f\"Collection '{COLLECTION_NAME}' created successfully\")\n\n# Create vector index\nindex_params = client.prepare_index_params()\nindex_params.add_index(\n    field_name=\"embedding\",\n    index_type=\"AUTOINDEX\",\n    metric_type=\"COSINE\",\n)\nclient.create_index(collection_name=COLLECTION_NAME, index_params=index_params)\nprint(\"Vector index created successfully\")\n","print(\"\\n2. Extracting tags from documents...\")\n\n# Define extraction prompt - for movie descriptions, specify attribute value ranges\nprompt = textwrap.dedent(\n    \"\"\"\\\n    Extract movie genre, main characters, and key themes from movie descriptions.\n    Use exact text for extractions. Do not paraphrase or overlap entities.\n    \n    For each extraction, provide attributes with values from these predefined sets:\n    \n    Genre attributes:\n    - primary_genre: [\"action\", \"comedy\", \"drama\", \"horror\", \"sci-fi\", \"fantasy\", \"thriller\", \"crime\", \"superhero\"]\n    - secondary_genre: [\"action\", \"comedy\", \"drama\", \"horror\", \"sci-fi\", \"fantasy\", \"thriller\", \"crime\", \"superhero\"]\n    \n    Character attributes:\n    - role: [\"protagonist\", \"antagonist\", \"supporting\"]\n    - type: [\"hero\", \"villain\", \"detective\", \"military\", \"wizard\", \"scientist\", \"friends\", \"investigator\"]\n    \n    Theme attributes:\n    - theme_type: [\"conflict\", \"investigation\", \"personal_growth\", \"technology\", \"magic\", \"survival\", \"romance\"]\n    - setting: [\"urban\", \"space\", \"fantasy_world\", \"school\", \"forest\", \"victorian\", \"america\", \"future\"]\n    \n    Focus on identifying key elements that would be useful for movie search and filtering.\"\"\"\n)\n","# Provide examples to guide the model - n-shot examples for movie descriptions\n# Unify attribute keys to ensure consistency in extraction results\nexamples = [\n    lx.data.ExampleData(\n        text=\"A space marine battles alien creatures on a distant planet. The sci-fi action movie features futuristic weapons and intense combat scenes.\",\n        extractions=[\n            lx.data.Extraction(\n                extraction_class=\"genre\",\n                extraction_text=\"sci-fi action\",\n                attributes={\"primary_genre\": \"sci-fi\", \"secondary_genre\": \"action\"},\n            ),\n            lx.data.Extraction(\n                extraction_class=\"character\",\n                extraction_text=\"space marine\",\n                attributes={\"role\": \"protagonist\", \"type\": \"military\"},\n            ),\n            lx.data.Extraction(\n                extraction_class=\"theme\",\n                extraction_text=\"battles alien creatures\",\n                attributes={\"theme_type\": \"conflict\", \"setting\": \"space\"},\n            ),\n        ],\n    ),\n    lx.data.ExampleData(\n        text=\"A detective investigates supernatural murders in Victorian London. The horror thriller film combines period drama with paranormal elements.\",\n        extractions=[\n            lx.data.Extraction(\n                extraction_class=\"genre\",\n                extraction_text=\"horror thriller\",\n                attributes={\"primary_genre\": \"horror\", \"secondary_genre\": \"thriller\"},\n            ),\n            lx.data.Extraction(\n                extraction_class=\"character\",\n                extraction_text=\"detective\",\n                attributes={\"role\": \"protagonist\", \"type\": \"detective\"},\n            ),\n            lx.data.Extraction(\n                extraction_class=\"theme\",\n                extraction_text=\"supernatural murders\",\n                attributes={\"theme_type\": \"investigation\", \"setting\": \"victorian\"},\n            ),\n        ],\n    ),\n    lx.data.ExampleData(\n        text=\"Two friends embark on a road trip adventure across America. The comedy drama explores friendship and self-discovery through humorous situations.\",\n        extractions=[\n            lx.data.Extraction(\n                extraction_class=\"genre\",\n                extraction_text=\"comedy drama\",\n                attributes={\"primary_genre\": \"comedy\", \"secondary_genre\": \"drama\"},\n            ),\n            lx.data.Extraction(\n                extraction_class=\"character\",\n                extraction_text=\"two friends\",\n                attributes={\"role\": \"protagonist\", \"type\": \"friends\"},\n            ),\n            lx.data.Extraction(\n                extraction_class=\"theme\",\n                extraction_text=\"friendship and self-discovery\",\n                attributes={\"theme_type\": \"personal_growth\", \"setting\": \"america\"},\n            ),\n        ],\n    ),\n]\n\n# Extract from each document\nextraction_results = []\nfor doc in sample_documents:\n    result = lx.extract(\n        text_or_documents=doc,\n        prompt_description=prompt,\n        examples=examples,\n        model_id=\"gemini-2.0-flash\",\n    )\n    extraction_results.append(result)\n    print(f\"Successfully extracted from document: {doc[:50]}...\")\n\nprint(f\"Completed tag extraction, processed {len(extraction_results)} documents\")\n","print(\"\\n3. Processing extraction results and generating vectors...\")\n\nprocessed_data = []\n\nfor result in extraction_results:\n    # Generate vectors for documents\n    embedding_response = genai_client.models.embed_content(\n        model=EMBEDDING_MODEL,\n        contents=[result.text],\n        config=EmbedContentConfig(\n            task_type=\"RETRIEVAL_DOCUMENT\",\n            output_dimensionality=EMBEDDING_DIM,\n        ),\n    )\n    embedding = embedding_response.embeddings[0].values\n    print(f\"Successfully generated vector: {result.text[:30]}...\")\n\n    # Initialize data structure, flatten attributes into separate fields\n    data_entry = {\n        \"id\": result.document_id or str(uuid.uuid4()),\n        \"document_text\": result.text,\n        \"embedding\": embedding,\n        # Initialize all possible fields with default values\n        \"genre\": \"unknown\",\n        \"primary_genre\": \"unknown\",\n        \"secondary_genre\": \"unknown\",\n        \"character_role\": \"unknown\",\n        \"character_type\": \"unknown\",\n        \"theme_type\": \"unknown\",\n        \"theme_setting\": \"unknown\",\n    }\n\n    # Process extraction results, flatten attributes\n    for extraction in result.extractions:\n        if extraction.extraction_class == \"genre\":\n            # Flatten genre attributes\n            data_entry[\"genre\"] = extraction.extraction_text\n            attrs = extraction.attributes or {}\n            data_entry[\"primary_genre\"] = attrs.get(\"primary_genre\", \"unknown\")\n            data_entry[\"secondary_genre\"] = attrs.get(\"secondary_genre\", \"unknown\")\n\n        elif extraction.extraction_class == \"character\":\n            # Flatten character attributes (take first main character's attributes)\n            attrs = extraction.attributes or {}\n            if (\n                data_entry[\"character_role\"] == \"unknown\"\n            ):  # Only take first character's attributes\n                data_entry[\"character_role\"] = attrs.get(\"role\", \"unknown\")\n                data_entry[\"character_type\"] = attrs.get(\"type\", \"unknown\")\n\n        elif extraction.extraction_class == \"theme\":\n            # Flatten theme attributes (take first main theme's attributes)\n            attrs = extraction.attributes or {}\n            if (\n                data_entry[\"theme_type\"] == \"unknown\"\n            ):  # Only take first theme's attributes\n                data_entry[\"theme_type\"] = attrs.get(\"theme_type\", \"unknown\")\n                data_entry[\"theme_setting\"] = attrs.get(\"setting\", \"unknown\")\n\n    processed_data.append(data_entry)\n\nprint(f\"Completed data processing, ready to insert {len(processed_data)} records\")\n","print(\"\\n4. Inserting data into Milvus...\")\n\nif processed_data:\n    res = client.insert(collection_name=COLLECTION_NAME, data=processed_data)\n    print(f\"Successfully inserted {len(processed_data)} documents into Milvus\")\n    print(f\"Insert result: {res}\")\nelse:\n    print(\"No data to insert\")\n","print(\"\\n=== Filter Expression Search Examples ===\")\n\n# Load collection into memory for querying\nprint(\"Loading collection into memory...\")\nclient.load_collection(collection_name=COLLECTION_NAME)\nprint(\"Collection loaded successfully\")\n\n# Search for thriller movies\nprint(\"\\n1. Searching for thriller movies:\")\nresults = client.query(\n    collection_name=COLLECTION_NAME,\n    filter='secondary_genre == \"thriller\"',\n    output_fields=[\"document_text\", \"genre\", \"primary_genre\", \"secondary_genre\"],\n    limit=5,\n)\n\nfor result in results:\n    print(f\"- {result['document_text'][:100]}...\")\n    print(\n        f\"  Genre: {result['genre']} ({result.get('primary_genre')}-{result.get('secondary_genre')})\"\n    )\n\n# Search for movies with military characters\nprint(\"\\n2. Searching for movies with military characters:\")\nresults = client.query(\n    collection_name=COLLECTION_NAME,\n    filter='character_type == \"military\"',\n    output_fields=[\"document_text\", \"genre\", \"character_role\", \"character_type\"],\n    limit=5,\n)\n\nfor result in results:\n    print(f\"- {result['document_text'][:100]}...\")\n    print(f\"  Genre: {result['genre']}\")\n    print(\n        f\"  Character: {result.get('character_role')} ({result.get('character_type')})\"\n    )\n","print(\"\\n=== Semantic Search Examples ===\")\n\n# 1. Search for action-related content + only thriller genre\nprint(\"\\n1. Searching for action-related content + only thriller genre:\")\nquery_text = \"action fight combat battle explosion\"\n\nquery_embedding_response = genai_client.models.embed_content(\n    model=EMBEDDING_MODEL,\n    contents=[query_text],\n    config=EmbedContentConfig(\n        task_type=\"RETRIEVAL_QUERY\",\n        output_dimensionality=EMBEDDING_DIM,\n    ),\n)\nquery_embedding = query_embedding_response.embeddings[0].values\n\nresults = client.search(\n    collection_name=COLLECTION_NAME,\n    data=[query_embedding],\n    anns_field=\"embedding\",\n    limit=3,\n    filter='secondary_genre == \"thriller\"',\n    output_fields=[\"document_text\", \"genre\", \"primary_genre\", \"secondary_genre\"],\n    search_params={\"metric_type\": \"COSINE\"},\n)\n\nif results:\n    for result in results[0]:\n        print(f\"- Similarity: {result['distance']:.4f}\")\n        print(f\"  Text: {result['document_text'][:100]}...\")\n        print(\n            f\"  Genre: {result.get('genre')} ({result.get('primary_genre')}-{result.get('secondary_genre')})\"\n        )\n\n# 2. Search for magic-related content + fantasy genre + conflict theme\nprint(\"\\n2. Searching for magic-related content + fantasy genre + conflict theme:\")\nquery_text = \"magic wizard spell fantasy magical\"\n\nquery_embedding_response = genai_client.models.embed_content(\n    model=EMBEDDING_MODEL,\n    contents=[query_text],\n    config=EmbedContentConfig(\n        task_type=\"RETRIEVAL_QUERY\",\n        output_dimensionality=EMBEDDING_DIM,\n    ),\n)\nquery_embedding = query_embedding_response.embeddings[0].values\n\nresults = client.search(\n    collection_name=COLLECTION_NAME,\n    data=[query_embedding],\n    anns_field=\"embedding\",\n    limit=3,\n    filter='primary_genre == \"fantasy\" and theme_type == \"conflict\"',\n    output_fields=[\n        \"document_text\",\n        \"genre\",\n        \"primary_genre\",\n        \"theme_type\",\n        \"theme_setting\",\n    ],\n    search_params={\"metric_type\": \"COSINE\"},\n)\n\nif results:\n    for result in results[0]:\n        print(f\"- Similarity: {result['distance']:.4f}\")\n        print(f\"  Text: {result['document_text'][:100]}...\")\n        print(f\"  Genre: {result.get('genre')} ({result.get('primary_genre')})\")\n        print(f\"  Theme: {result.get('theme_type')} ({result.get('theme_setting')})\")\n\nprint(\"\\n=== Demo Complete ===\")\n"],"headingContent":"LangExtract + Milvus Integration","anchorList":[{"label":"Integrasi LangExtract + Milvus","href":"LangExtract-+-Milvus-Integration","type":1,"isActive":false},{"label":"Prasyarat","href":"Prerequisites","type":2,"isActive":false},{"label":"Mendefinisikan pipeline LangExtract + Milvus","href":"Define-the-LangExtract-+-Milvus-pipeline","type":2,"isActive":false},{"label":"Konfigurasi dan Penyiapan","href":"Configuration-and-Setup","type":2,"isActive":false},{"label":"Inisialisasi Klien Milvus","href":"Initialize-Milvus-Client","type":2,"isActive":false},{"label":"Persiapan Data Sampel","href":"Sample-Data-Preparation","type":2,"isActive":false},{"label":"Menyiapkan Koleksi Milvus","href":"Setting-Up-the-Milvus-Collection","type":2,"isActive":false},{"label":"Menentukan Skema Ekstraksi","href":"Defining-the-Extraction-Schema","type":2,"isActive":false},{"label":"Memberikan Contoh untuk Ekstraksi yang Lebih Baik","href":"Providing-Examples-for-Better-Extraction","type":2,"isActive":false},{"label":"Memproses dan Membuat Vektor Hasil","href":"Processing-and-Vectorizing-the-Results","type":2,"isActive":false},{"label":"Memasukkan Data ke dalam Milvus","href":"Inserting-Data-into-Milvus","type":2,"isActive":false},{"label":"Mendemonstrasikan Pemfilteran Metadata","href":"Demonstrating-Metadata-Filtering","type":2,"isActive":false},{"label":"Menggabungkan Pencarian Semantik dengan Pemfilteran Metadata","href":"Combining-Semantic-Search-with-Metadata-Filtering","type":2,"isActive":false}]}