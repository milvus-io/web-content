{"codeList":["mkdir video-search-tutorial\ncd video-search-tutorial\n","python -m venv venv\nsource venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n","pip install twelvelabs pymilvus\n","touch video_search.py\n","export TWELVE_LABS_API_KEY='your_api_key_here'\n","from pymilvus import MilvusClient\n\n# Initialize the Milvus client\nmilvus_client = MilvusClient(\"milvus_twelvelabs_demo.db\")\n\nprint(\"Successfully connected to Milvus\")\n","# Initialize the collection name\ncollection_name = \"twelvelabs_demo_collection\"\n\n# Check if the collection already exists and drop it if it does\nif milvus_client.has_collection(collection_name=collection_name):\n    milvus_client.drop_collection(collection_name=collection_name)\n\n# Create the collection\nmilvus_client.create_collection(\n    collection_name=collection_name,\n    dimension=1024  # The dimension of the Twelve Labs embeddings\n)\n\nprint(f\"Collection '{collection_name}' created successfully\")\n","from twelvelabs import TwelveLabs\nfrom twelvelabs.models.embed import EmbeddingsTask\nimport os\n\n# Retrieve the API key from environment variables\nTWELVE_LABS_API_KEY = os.getenv('TWELVE_LABS_API_KEY')\n","twelvelabs_client = TwelveLabs(api_key=TWELVE_LABS_API_KEY)\n","def generate_embedding(video_url):\n    \"\"\"\n    Generate embeddings for a given video URL using the Twelve Labs API.\n\n    This function creates an embedding task for the specified video URL using\n    the Marengo-retrieval-2.6 engine. It monitors the task progress and waits\n    for completion. Once done, it retrieves the task result and extracts the\n    embeddings along with their associated metadata.\n\n    Args:\n        video_url (str): The URL of the video to generate embeddings for.\n\n    Returns:\n        tuple: A tuple containing two elements:\n            1. list: A list of dictionaries, where each dictionary contains:\n                - 'embedding': The embedding vector as a list of floats.\n                - 'start_offset_sec': The start time of the segment in seconds.\n                - 'end_offset_sec': The end time of the segment in seconds.\n                - 'embedding_scope': The scope of the embedding (e.g., 'shot', 'scene').\n            2. EmbeddingsTaskResult: The complete task result object from Twelve Labs API.\n\n    Raises:\n        Any exceptions raised by the Twelve Labs API during task creation,\n        execution, or retrieval.\n    \"\"\"\n\n    # Create an embedding task\n    task = twelvelabs_client.embed.task.create(\n        engine_name=\"Marengo-retrieval-2.6\",\n        video_url=video_url\n    )\n    print(f\"Created task: id={task.id} engine_name={task.engine_name} status={task.status}\")\n\n    # Define a callback function to monitor task progress\n    def on_task_update(task: EmbeddingsTask):\n        print(f\"  Status={task.status}\")\n\n    # Wait for the task to complete\n    status = task.wait_for_done(\n        sleep_interval=2,\n        callback=on_task_update\n    )\n    print(f\"Embedding done: {status}\")\n\n    # Retrieve the task result\n    task_result = twelvelabs_client.embed.task.retrieve(task.id)\n\n    # Extract and return the embeddings\n    embeddings = []\n    for v in task_result.video_embeddings:\n        embeddings.append({\n            'embedding': v.embedding.float,\n            'start_offset_sec': v.start_offset_sec,\n            'end_offset_sec': v.end_offset_sec,\n            'embedding_scope': v.embedding_scope\n        })\n    \n    return embeddings, task_result\n","# Example usage\nvideo_url = \"https://example.com/your-video.mp4\"\n\n# Generate embeddings for the video\nembeddings, task_result = generate_embedding(video_url)\n\nprint(f\"Generated {len(embeddings)} embeddings for the video\")\nfor i, emb in enumerate(embeddings):\n    print(f\"Embedding {i+1}:\")\n    print(f\"  Scope: {emb['embedding_scope']}\")\n    print(f\"  Time range: {emb['start_offset_sec']} - {emb['end_offset_sec']} seconds\")\n    print(f\"  Embedding vector (first 5 values): {emb['embedding'][:5]}\")\n    print()\n","def insert_embeddings(milvus_client, collection_name, task_result, video_url):\n    \"\"\"\n    Insert embeddings into the Milvus collection.\n\n    Args:\n        milvus_client: The Milvus client instance.\n        collection_name (str): The name of the Milvus collection to insert into.\n        task_result (EmbeddingsTaskResult): The task result containing video embeddings.\n        video_url (str): The URL of the video associated with the embeddings.\n\n    Returns:\n        MutationResult: The result of the insert operation.\n\n    This function takes the video embeddings from the task result and inserts them\n    into the specified Milvus collection. Each embedding is stored with additional\n    metadata including its scope, start and end times, and the associated video URL.\n    \"\"\"\n    data = []\n\n    for i, v in enumerate(task_result.video_embeddings):\n        data.append({\n            \"id\": i,\n            \"vector\": v.embedding.float,\n            \"embedding_scope\": v.embedding_scope,\n            \"start_offset_sec\": v.start_offset_sec,\n            \"end_offset_sec\": v.end_offset_sec,\n            \"video_url\": video_url\n        })\n\n    insert_result = milvus_client.insert(collection_name=collection_name, data=data)\n    print(f\"Inserted {len(data)} embeddings into Milvus\")\n    return insert_result\n\n# Usage example\nvideo_url = \"https://example.com/your-video.mp4\"\n\n# Assuming this function exists from previous step\nembeddings, task_result = generate_embedding(video_url)\n\n# Insert embeddings into the Milvus collection\ninsert_result = insert_embeddings(milvus_client, collection_name, task_result, video_url)\nprint(insert_result)\n","def perform_similarity_search(milvus_client, collection_name, query_vector, limit=5):\n    \"\"\"\n    Perform a similarity search on the Milvus collection.\n\n    Args:\n        milvus_client: The Milvus client instance.\n        collection_name (str): The name of the Milvus collection to search in.\n        query_vector (list): The query vector to search for similar embeddings.\n        limit (int, optional): The maximum number of results to return. Defaults to 5.\n\n    Returns:\n        list: A list of search results, where each result is a dictionary containing\n              the matched entity's metadata and similarity score.\n\n    This function searches the specified Milvus collection for embeddings similar to\n    the given query vector. It returns the top matching results, including metadata\n    such as the embedding scope, time range, and associated video URL for each match.\n    \"\"\"\n    search_results = milvus_client.search(\n        collection_name=collection_name,\n        data=[query_vector],\n        limit=limit,\n        output_fields=[\"embedding_scope\", \"start_offset_sec\", \"end_offset_sec\", \"video_url\"]\n    )\n\n    return search_results\n    \n# define the query vector\n# We use the embedding inserted previously as an example. In practice, you can replace it with any video embedding you want to query.\nquery_vector = task_result.video_embeddings[0].embedding.float\n\n# Perform a similarity search on the Milvus collection\nsearch_results = perform_similarity_search(milvus_client, collection_name, query_vector)\n\nprint(\"Search Results:\")\nfor i, result in enumerate(search_results[0]):\n    print(f\"Result {i+1}:\")\n    print(f\"  Video URL: {result['entity']['video_url']}\")\n    print(f\"  Time Range: {result['entity']['start_offset_sec']} - {result['entity']['end_offset_sec']} seconds\")\n    print(f\"  Similarity Score: {result['distance']}\")\n    print()\n"],"headingContent":"Advanced Video Search: Leveraging Twelve Labs and Milvus for Semantic Retrieval","anchorList":[{"label":"Advanced Video Search: Leveraging Twelve Labs and Milvus for Semantic Retrieval","href":"Advanced-Video-Search-Leveraging-Twelve-Labs-and-Milvus-for-Semantic-Retrieval","type":1,"isActive":false},{"label":"Introduction","href":"Introduction","type":2,"isActive":false},{"label":"Prerequisites","href":"Prerequisites","type":2,"isActive":false},{"label":"Setting Up the Development Environment","href":"Setting-Up-the-Development-Environment","type":2,"isActive":false},{"label":"Connecting to Milvus","href":"Connecting-to-Milvus","type":2,"isActive":false},{"label":"Creating a Milvus Collection for Video Embeddings","href":"Creating-a-Milvus-Collection-for-Video-Embeddings","type":2,"isActive":false},{"label":"Generating Embeddings with Twelve Labs Embed API","href":"Generating-Embeddings-with-Twelve-Labs-Embed-API","type":2,"isActive":false},{"label":"Initialize the Twelve Labs client:","href":"Initialize-the-Twelve-Labs-client","type":2,"isActive":false},{"label":"Inserting Embeddings into Milvus","href":"Inserting-Embeddings-into-Milvus","type":2,"isActive":false},{"label":"Performing Similarity Search","href":"Performing-Similarity-Search","type":2,"isActive":false},{"label":"Optimizing Performance","href":"Optimizing-Performance","type":2,"isActive":false},{"label":"Advanced Features","href":"Advanced-Features","type":2,"isActive":false},{"label":"Error Handling and Logging","href":"Error-Handling-and-Logging","type":2,"isActive":false},{"label":"Conclusion","href":"Conclusion","type":2,"isActive":false}]}