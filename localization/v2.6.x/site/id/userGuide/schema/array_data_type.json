{"codeList":["{\n  \"tags\": [\"pop\", \"rock\", \"classic\"],\n  \"ratings\": [5, 4, 3]\n}\n","# Import necessary libraries\nfrom pymilvus import MilvusClient, DataType\n\n# Define server address\nSERVER_ADDR = \"http://localhost:19530\"\n\n# Create a MilvusClient instance\nclient = MilvusClient(uri=SERVER_ADDR)\n\n# Define the collection schema\nschema = client.create_schema(\n    auto_id=False,\n    enable_dynamic_fields=True,\n)\n\n#  Add `tags` and `ratings` ARRAY fields with nullable=True\nschema.add_field(field_name=\"tags\", datatype=DataType.ARRAY, element_type=DataType.VARCHAR, max_capacity=10, max_length=65535, nullable=True)\nschema.add_field(field_name=\"ratings\", datatype=DataType.ARRAY, element_type=DataType.INT64, max_capacity=5, nullable=True)\nschema.add_field(field_name=\"pk\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=3)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build());\n        \nCreateCollectionReq.CollectionSchema schema = client.createSchema();\nschema.setEnableDynamicField(true);\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"tags\")\n        .dataType(DataType.Array)\n        .elementType(DataType.VarChar)\n        .maxCapacity(10)\n        .maxLength(65535)\n        .isNullable(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"ratings\")\n        .dataType(DataType.Array)\n        .elementType(DataType.Int64)\n        .maxCapacity(5)\n        .isNullable(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"pk\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"embedding\")\n        .dataType(DataType.FloatVector)\n        .dimension(3)\n        .build());\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nschema := entity.NewSchema()\nschema.WithField(entity.NewField().\n    WithName(\"pk\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"embedding\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(3),\n).WithField(entity.NewField().\n    WithName(\"tags\").\n    WithDataType(entity.FieldTypeArray).\n    WithElementType(entity.FieldTypeVarChar).\n    WithMaxCapacity(10).\n    WithMaxLength(65535).\n    WithNullable(true),\n).WithField(entity.NewField().\n    WithName(\"ratings\").\n    WithDataType(entity.FieldTypeArray).\n    WithElementType(entity.FieldTypeInt64).\n    WithMaxCapacity(5).\n    WithNullable(true),\n)\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\nconst schema = [\n  {\n    name: \"tags\",\n    data_type: DataType.Array,\n    element_type: DataType.VarChar,\n    max_capacity: 10,\n    max_length: 65535\n  },\n  {\n    name: \"rating\",\n    data_type: DataType.Array,\n    element_type: DataType.Int64,\n    max_capacity: 5,\n  },\n  {\n    name: \"pk\",\n    data_type: DataType.Int64,\n    is_primary_key: true,\n  },\n  {\n    name: \"embedding\",\n    data_type: DataType.FloatVector,\n    dim: 3,\n  },\n];\n","export arrayField1='{\n    \"fieldName\": \"tags\",\n    \"dataType\": \"Array\",\n    \"elementDataType\": \"VarChar\",\n    \"elementTypeParams\": {\n        \"max_capacity\": 10,\n        \"max_length\": 65535\n    }\n}'\n\nexport arrayField2='{\n    \"fieldName\": \"ratings\",\n    \"dataType\": \"Array\",\n    \"elementDataType\": \"Int64\",\n    \"elementTypeParams\": {\n        \"max_capacity\": 5\n    }\n}'\n\nexport pkField='{\n    \"fieldName\": \"pk\",\n    \"dataType\": \"Int64\",\n    \"isPrimary\": true\n}'\n\nexport vectorField='{\n    \"fieldName\": \"embedding\",\n    \"dataType\": \"FloatVector\",\n    \"elementTypeParams\": {\n        \"dim\": 3\n    }\n}'\n\nexport schema=\"{\n    \\\"autoID\\\": false,\n    \\\"fields\\\": [\n        $arrayField1,\n        $arrayField2,\n        $pkField,\n        $vectorField\n    ]\n}\"\n","# Set index params\n\nindex_params = client.prepare_index_params()\n\n# Index `age` with AUTOINDEX\nindex_params.add_index(\n    field_name=\"tags\",\n    index_type=\"AUTOINDEX\",\n    index_name=\"tags_index\"\n)\n\n# Index `embedding` with AUTOINDEX and specify similarity metric type\nindex_params.add_index(\n    field_name=\"embedding\",\n    index_type=\"AUTOINDEX\",  # Use automatic indexing to simplify complex index settings\n    metric_type=\"COSINE\"  # Specify similarity metric type, options include L2, COSINE, or IP\n)\n","import io.milvus.v2.common.IndexParam;\nimport java.util.*;\n\nList<IndexParam> indexes = new ArrayList<>();\nindexes.add(IndexParam.builder()\n        .fieldName(\"tags\")\n        .indexName(\"tags_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .build());\n        \nindexes.add(IndexParam.builder()\n        .fieldName(\"embedding\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.COSINE)\n        .build());\n","indexOpt1 := milvusclient.NewCreateIndexOption(\"my_collection\", \"tags\", index.NewInvertedIndex())\nindexOpt2 := milvusclient.NewCreateIndexOption(\"my_collection\", \"embedding\", index.NewAutoIndex(entity.COSINE))\n","const indexParams = [{\n    index_name: 'inverted_index',\n    field_name: 'tags',\n    index_type: IndexType.AUTOINDEX,\n)];\n\nindexParams.push({\n    index_name: 'embedding_index',\n    field_name: 'embedding',\n    index_type: IndexType.AUTOINDEX,\n});\n","export indexParams='[\n        {\n            \"fieldName\": \"tags\",\n            \"indexName\": \"inverted_index\",\n            \"indexType\": \"AUTOINDEX\"\n        },\n        {\n            \"fieldName\": \"embedding\",\n            \"metricType\": \"COSINE\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n","client.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema,\n    index_params=index_params\n)\n","CreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexes)\n        .build();\nclient.createCollection(requestCreate);\n","err = client.CreateCollection(ctx, milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n    WithIndexOptions(indexOpt1, indexOpt2))\nif err != nil {\n    fmt.Println(err.Error())\n    // handler err\n}\n","client.create_collection({\n    collection_name: \"my_collection\",\n    schema: schema,\n    index_params: indexParams\n})\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n","# Sample data\ndata = [\n  {\n      \"tags\": [\"pop\", \"rock\", \"classic\"],\n      \"ratings\": [5, 4, 3],\n      \"pk\": 1,\n      \"embedding\": [0.12, 0.34, 0.56]\n  },\n  {\n      \"tags\": None,  # Entire ARRAY is null\n      \"ratings\": [4, 5],\n      \"pk\": 2,\n      \"embedding\": [0.78, 0.91, 0.23]\n  },\n  {  # The tags field is completely missing\n      \"ratings\": [9, 5],\n      \"pk\": 3,\n      \"embedding\": [0.18, 0.11, 0.23]\n  }\n]\n\nclient.insert(\n    collection_name=\"my_collection\",\n    data=data\n)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.InsertResp;\n\nList<JsonObject> rows = new ArrayList<>();\nGson gson = new Gson();\nrows.add(gson.fromJson(\"{\\\"tags\\\": [\\\"pop\\\", \\\"rock\\\", \\\"classic\\\"], \\\"ratings\\\": [5, 4, 3], \\\"pk\\\": 1, \\\"embedding\\\": [0.12, 0.34, 0.56]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"tags\\\": null, \\\"ratings\\\": [4, 5], \\\"pk\\\": 2, \\\"embedding\\\": [0.78, 0.91, 0.23]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"ratings\\\": [9, 5], \\\"pk\\\": 3, \\\"embedding\\\": [0.18, 0.11, 0.23]}\", JsonObject.class));\n\nInsertResp insertR = client.insert(InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(rows)\n        .build());\n","column1, _ := column.NewNullableColumnVarCharArray(\"tags\",\n    [][]string{{\"pop\", \"rock\", \"classic\"}},\n    []bool{true, false, false})\ncolumn2, _ := column.NewNullableColumnInt64Array(\"ratings\",\n    [][]int64{{5, 4, 3}, {4, 5}, {9, 5}},\n    []bool{true, true, true})\n\n_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"pk\", []int64{1, 2, 3}).\n    WithFloatVectorColumn(\"embedding\", 3, [][]float32{\n        {0.12, 0.34, 0.56},\n        {0.78, 0.91, 0.23},\n        {0.18, 0.11, 0.23},\n    }).WithColumns(column1, column2))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","const data = [\n    {\n        \"tags\": [\"pop\", \"rock\", \"classic\"],\n        \"ratings\": [5, 4, 3],\n        \"pk\": 1,\n        \"embedding\": [0.12, 0.34, 0.56]\n    },\n    {\n        \"tags\": [\"jazz\", \"blues\"],\n        \"ratings\": [4, 5],\n        \"pk\": 2,\n        \"embedding\": [0.78, 0.91, 0.23]\n    },\n    {\n        \"tags\": [\"electronic\", \"dance\"],\n        \"ratings\": [3, 3, 4],\n        \"pk\": 3,\n        \"embedding\": [0.67, 0.45, 0.89]\n    }\n];\n\nclient.insert({\n  collection_name: \"my_collection\",\n  data: data,\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\n        \"tags\": [\"pop\", \"rock\", \"classic\"],\n        \"ratings\": [5, 4, 3],\n        \"pk\": 1,\n        \"embedding\": [0.12, 0.34, 0.56]\n    },\n    {\n        \"tags\": [\"jazz\", \"blues\"],\n        \"ratings\": [4, 5],\n        \"pk\": 2,\n        \"embedding\": [0.78, 0.91, 0.23]\n    },\n    {\n        \"tags\": [\"electronic\", \"dance\"],\n        \"ratings\": [3, 3, 4],\n        \"pk\": 3,\n        \"embedding\": [0.67, 0.45, 0.89]\n    }       \n    ],\n    \"collectionName\": \"my_collection\"\n}'\n","# Query to exclude entities where `tags` is not null\n\nfilter = 'tags IS NOT NULL'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"tags\", \"ratings\", \"pk\"]\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"{'tags': ['pop', 'rock', 'classic'], 'ratings': [5, 4, 3], 'pk': 1}\"\n# ]\n","import io.milvus.v2.service.vector.request.QueryReq;\nimport io.milvus.v2.service.vector.response.QueryResp;\n\nString filter = \"tags IS NOT NULL\";\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"tags\", \"ratings\", \"pk\"))\n        .build());\n\nSystem.out.println(resp.getQueryResults());\n\n// Output\n//\n// [QueryResp.QueryResult(entity={ratings=[5, 4, 3], pk=1, tags=[pop, rock, classic]})]\n","filter := \"tags IS NOT NULL\"\nrs, err := client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"tags\", \"ratings\", \"pk\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(\"pk\", rs.GetColumn(\"pk\").FieldData().GetScalars())\nfmt.Println(\"tags\", rs.GetColumn(\"tags\").FieldData().GetScalars())\nfmt.Println(\"ratings\", rs.GetColumn(\"ratings\").FieldData().GetScalars())\n","client.query({\n    collection_name: 'my_collection',\n    filter: 'tags IS NOT NULL',\n    output_fields: ['tags', 'ratings', 'embedding']\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"tags IS NOT NULL\",\n    \"outputFields\": [\"tags\", \"ratings\", \"embedding\"]\n}'\n\n","filter = 'ratings[0] > 4'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"tags\", \"ratings\", \"embedding\"]\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"{'tags': ['pop', 'rock', 'classic'], 'ratings': [5, 4, 3], 'embedding': [0.12, 0.34, 0.56], 'pk': 1}\",\n#     \"{'tags': None, 'ratings': [9, 5], 'embedding': [0.18, 0.11, 0.23], 'pk': 3}\"\n# ]\n","String filter = \"ratings[0] > 4\"\n\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"tags\", \"ratings\", \"pk\"))\n        .build());\n\nSystem.out.println(resp.getQueryResults());\n\n// Output\n// [\n//    QueryResp.QueryResult(entity={ratings=[5, 4, 3], pk=1, tags=[pop, rock, classic]}), \n//    QueryResp.QueryResult(entity={ratings=[9, 5], pk=3, tags=[]})\n// ]\n","filter = \"ratings[0] > 4\"\nrs, err = client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"tags\", \"ratings\", \"pk\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(\"pk\", rs.GetColumn(\"pk\"))\nfmt.Println(\"tags\", rs.GetColumn(\"tags\"))\nfmt.Println(\"ratings\", rs.GetColumn(\"ratings\"))\n","// node\nconst filter = 'ratings[0] > 4';\n\nconst res = await client.query({\n    collection_name:\"my_collection\",\n    filter:filter,\n    output_fields: [\"tags\", \"ratings\", \"embedding\"]\n});\n\nconsole.log(res)\n\n// Example output:\n// data: [\n//     \"{'tags': ['pop', 'rock', 'classic'], 'ratings': [5, 4, 3], 'embedding': [0.12, 0.34, 0.56], 'pk': 1}\",\n//     \"{'tags': None, 'ratings': [9, 5], 'embedding': [0.18, 0.11, 0.23], 'pk': 3}\"\n// ]\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n  \"collectionName\": \"my_collection\",\n  \"filter\": \"ratings[0] > 4\",\n  \"outputFields\": [\"tags\", \"ratings\", \"embedding\"]\n}'\n","filter = 'tags[0] == \"pop\"'\n\nres = client.search(\n    collection_name=\"my_collection\",\n    data=[[0.3, -0.6, 0.1]],\n    limit=5,\n    search_params={\"params\": {\"nprobe\": 10}},\n    output_fields=[\"tags\", \"ratings\", \"embedding\"],\n    filter=filter\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"[{'id': 1, 'distance': -0.2479381263256073, 'entity': {'tags': ['pop', 'rock', 'classic'], 'ratings': [5, 4, 3], 'embedding': [0.11999999731779099, 0.3400000035762787, 0.5600000023841858]}}]\"\n# ]\n","import io.milvus.v2.service.vector.request.SearchReq;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nString filter = \"tags[0] == \\\"pop\\\"\";\nSearchResp resp = client.search(SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .annsField(\"embedding\")\n        .data(Collections.singletonList(new FloatVec(new float[]{0.3f, -0.6f, 0.1f})))\n        .topK(5)\n        .outputFields(Arrays.asList(\"tags\", \"ratings\", \"embedding\"))\n        .filter(filter)\n        .build());\n\nSystem.out.println(resp.getSearchResults());\n\n// Output\n//\n// [[SearchResp.SearchResult(entity={ratings=[5, 4, 3], embedding=[0.12, 0.34, 0.56], tags=[pop, rock, classic]}, score=-0.24793813, id=1)]]\n","queryVector := []float32{0.3, -0.6, 0.1}\nfilter = \"tags[0] == \\\"pop\\\"\"\n\nannParam := index.NewCustomAnnParam()\nannParam.WithExtraParam(\"nprobe\", 10)\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    5,               // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithANNSField(\"embedding\").\n    WithFilter(filter).\n    WithOutputFields(\"tags\", \"ratings\", \"embedding\").\n    WithAnnParam(annParam))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"tags\", resultSet.GetColumn(\"tags\").FieldData().GetScalars())\n    fmt.Println(\"ratings\", resultSet.GetColumn(\"ratings\").FieldData().GetScalars())\n    fmt.Println(\"embedding\", resultSet.GetColumn(\"embedding\").FieldData().GetVectors())\n}\n","client.search({\n    collection_name: 'my_collection',\n    data: [0.3, -0.6, 0.1],\n    limit: 5,\n    output_fields: ['tags', 'ratings', 'embdding'],\n    filter: 'tags[0] == \"pop\"'\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.3, -0.6, 0.1]\n    ],\n    \"annsField\": \"embedding\",\n    \"limit\": 5,\n    \"filter\": \"tags[0] == \\\"pop\\\"\",\n    \"outputFields\": [\"tags\", \"ratings\", \"embedding\"]\n}'\n\n# {\"code\":0,\"cost\":0,\"data\":[{\"distance\":-0.24793813,\"embedding\":[0.12,0.34,0.56],\"id\":1,\"ratings\":{\"Data\":{\"LongData\":{\"data\":[5,4,3]}}},\"tags\":{\"Data\":{\"StringData\":{\"data\":[\"pop\",\"rock\",\"classic\"]}}}}]}\n"],"headingContent":"Array Field","anchorList":[{"label":"Bidang Array","href":"Array-Field","type":1,"isActive":false},{"label":"Batas","href":"Limits","type":2,"isActive":false},{"label":"Menambahkan bidang ARRAY","href":"Add-ARRAY-field","type":2,"isActive":false},{"label":"Mengatur parameter indeks","href":"Set-index-params","type":2,"isActive":false},{"label":"Membuat koleksi","href":"Create-collection","type":2,"isActive":false},{"label":"Menyisipkan data","href":"Insert-data","type":2,"isActive":false},{"label":"Kueri dengan ekspresi filter","href":"Query-with-filter-expressions","type":2,"isActive":false},{"label":"Pencarian vektor dengan ekspresi filter","href":"Vector-search-with-filter-expressions","type":2,"isActive":false}]}