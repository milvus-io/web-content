{"codeList":["from pymilvus import MilvusClient, Function, FunctionType\n\n# Connect to your Milvus server\nclient = MilvusClient(\n    uri=\"http://localhost:19530\"  # Replace with your Milvus server URI\n)\n\n# Configure TEI Ranker\ntei_ranker = Function(\n    name=\"tei_semantic_ranker\",            # Unique identifier for your ranker\n    input_field_names=[\"document\"],        # VARCHAR field containing text to rerank\n    function_type=FunctionType.RERANK,     # Must be RERANK for reranking functions\n    params={\n        \"reranker\": \"model\",               # Enables model-based reranking\n        \"provider\": \"tei\",                 # Specifies TEI as the service provider\n        \"queries\": [\"renewable energy developments\"],  # Query text for relevance evaluation\n        \"endpoint\": \"http://localhost:8080\",  # Your TEI service URL\n        \"maxBatch\": 32,                    # Optional: batch size for processing (default: 32)\n        \"truncate\": True,                # Optional: Truncate the inputs that are longer than the maximum supported size\n        \"truncation_direction\": \"Right\",    # Optional: Direction to truncate the inputs\n    }\n)\n","# Execute search with vLLM reranking\nresults = client.search(\n    collection_name=\"your_collection\",\n    data=[\"AI Research Progress\", \"What is AI\"],  # Search queries\n    anns_field=\"dense_vector\",                   # Vector field to search\n    limit=5,                                     # Number of results to return\n    output_fields=[\"document\"],                  # Include text field for reranking\n    #  highlight-next-line\n    ranker=tei_ranker,                         # Apply tei reranking\n    consistency_level=\"Bounded\"\n)\n","from pymilvus import AnnSearchRequest\n\n# Configure dense vector search\ndense_search = AnnSearchRequest(\n    data=[\"AI Research Progress\", \"What is AI\"],\n    anns_field=\"dense_vector\",\n    param={},\n    limit=5\n)\n\n# Configure sparse vector search  \nsparse_search = AnnSearchRequest(\n    data=[\"AI Research Progress\", \"What is AI\"],\n    anns_field=\"sparse_vector\", \n    param={},\n    limit=5\n)\n\n# Execute hybrid search with vLLM reranking\nhybrid_results = client.hybrid_search(\n    collection_name=\"your_collection\",\n    [dense_search, sparse_search],              # Multiple search requests\n    #  highlight-next-line\n    ranker=tei_ranker,                        # Apply tei reranking to combined results\n    limit=5,                                   # Final number of results\n    output_fields=[\"document\"]\n)\n"],"headingContent":"TEI Ranker","anchorList":[{"label":"Pemeringkat TEICompatible with Milvus 2.6.x","href":"TEI-Ranker","type":1,"isActive":false},{"label":"Prasyarat","href":"Prerequisites","type":2,"isActive":false},{"label":"Membuat fungsi pemeringkat TEI","href":"Create-a-TEI-ranker-function","type":2,"isActive":false},{"label":"Menerapkan ke pencarian vektor standar","href":"Apply-to-standard-vector-search","type":2,"isActive":false},{"label":"Terapkan ke pencarian hibrida","href":"Apply-to-hybrid-search","type":2,"isActive":false}]}