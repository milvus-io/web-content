{"codeList":["$ pip install -U crawl4ai pymilvus openai requests tqdm\n","# Run post-installation setup\n$ crawl4ai-setup\n\n# Verify installation\n$ crawl4ai-doctor\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","from openai import OpenAI\n\nopenai_client = OpenAI()\n","def emb_text(text):\n    return (\n        openai_client.embeddings.create(input=text, model=\"text-embedding-3-small\")\n        .data[0]\n        .embedding\n    )\n","test_embedding = emb_text(\"This is a test\")\nembedding_dim = len(test_embedding)\nprint(embedding_dim)\nprint(test_embedding[:10])\n","from crawl4ai import *\n\n\nasync def crawl():\n    async with AsyncWebCrawler() as crawler:\n        result = await crawler.arun(\n            url=\"https://lilianweng.github.io/posts/2023-06-23-agent/\",\n        )\n        return result.markdown\n\n\nmarkdown_content = await crawl()\n","def split_markdown_content(content):\n    return [section.strip() for section in content.split(\"# \") if section.strip()]\n\n\n# Process the crawled markdown content\nsections = split_markdown_content(markdown_content)\n\n# Print the first few sections to understand the structure\nfor i, section in enumerate(sections[:3]):\n    print(f\"Section {i+1}:\")\n    print(section[:300] + \"...\")\n    print(\"-\" * 50)\n","from pymilvus import MilvusClient\n\nmilvus_client = MilvusClient(uri=\"./milvus_demo.db\")\ncollection_name = \"my_rag_collection\"\n","if milvus_client.has_collection(collection_name):\n    milvus_client.drop_collection(collection_name)\n","milvus_client.create_collection(\n    collection_name=collection_name,\n    dimension=embedding_dim,\n    metric_type=\"IP\",  # Inner product distance\n    consistency_level=\"Strong\",  # Supported values are (`\"Strong\"`, `\"Session\"`, `\"Bounded\"`, `\"Eventually\"`). See https://milvus.io/docs/consistency.md#Consistency-Level for more details.\n)\n","from tqdm import tqdm\n\ndata = []\nfor i, section in enumerate(tqdm(sections, desc=\"Processing sections\")):\n    embedding = emb_text(section)\n    data.append({\"id\": i, \"vector\": embedding, \"text\": section})\n\n# Insert data into Milvus\nmilvus_client.insert(collection_name=collection_name, data=data)\n","question = \"What are the main components of autonomous agents?\"\n","search_res = milvus_client.search(\n    collection_name=collection_name,\n    data=[emb_text(question)],\n    limit=3,\n    search_params={\"metric_type\": \"IP\", \"params\": {}},\n    output_fields=[\"text\"],\n)\n","import json\n\nretrieved_lines_with_distances = [\n    (res[\"entity\"][\"text\"], res[\"distance\"]) for res in search_res[0]\n]\nprint(json.dumps(retrieved_lines_with_distances, indent=4))\n","context = \"\\n\".join(\n    [line_with_distance[0] for line_with_distance in retrieved_lines_with_distances]\n)\n","SYSTEM_PROMPT = \"\"\"\nHuman: You are an AI assistant. You are able to find answers to the questions from the contextual passage snippets provided.\n\"\"\"\nUSER_PROMPT = f\"\"\"\nUse the following pieces of information enclosed in <context> tags to provide an answer to the question enclosed in <question> tags.\n<context>\n{context}\n</context>\n<question>\n{question}\n</question>\n\"\"\"\n","response = openai_client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n        {\"role\": \"user\", \"content\": USER_PROMPT},\n    ],\n)\nprint(response.choices[0].message.content)\n"],"headingContent":"Building RAG with Milvus and Crawl4AI","anchorList":[{"label":"Creación de RAG con Milvus y Crawl4AI","href":"Building-RAG-with-Milvus-and-Crawl4AI","type":1,"isActive":false},{"label":"Preparación","href":"Preparation","type":2,"isActive":false},{"label":"Rastreo de datos con Crawl4AI","href":"Crawl-Data-Using-Crawl4AI","type":2,"isActive":false},{"label":"Cargar datos en Milvus","href":"Load-Data-into-Milvus","type":2,"isActive":false},{"label":"Construir RAG","href":"Build-RAG","type":2,"isActive":false}]}