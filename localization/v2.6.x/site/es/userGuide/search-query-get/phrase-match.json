{"codeList":["from pymilvus import MilvusClient, DataType\n\n# Create a schema for a new collection\nschema = MilvusClient.create_schema(enable_dynamic_field=False)\nschema.add_field(\n    field_name=\"id\",\n    datatype=DataType.INT64,\n    is_primary=True,\n    auto_id=True\n)\n# Add a VARCHAR field configured for phrase matching\nschema.add_field(\n    field_name='text',                 # Name of the field\n    datatype=DataType.VARCHAR,         # Field data type set as VARCHAR (string)\n    max_length=1000,                   # Maximum length of the string\n    enable_analyzer=True,              # Enables text analysis (tokenization)\n    enable_match=True                  # Enables inverted indexing for phrase matching\n)\nschema.add_field(\n    field_name=\"embeddings\",\n    datatype=DataType.FLOAT_VECTOR,\n    dim=5\n)\n","# Define analyzer parameters for English-language tokenization\nanalyzer_params = {\n    \"type\": \"english\"\n}\n\n# Add the VARCHAR field with the English analyzer enabled\nschema.add_field(\n    field_name='text',                 # Name of the field\n    datatype=DataType.VARCHAR,         # Field data type set as VARCHAR\n    max_length=1000,                   # Maximum length of the string\n    enable_analyzer=True,              # Enables text analysis\n    analyzer_params=analyzer_params,   # Specifies the analyzer configuration\n    enable_match=True                  # Enables inverted indexing for phrase matching\n)\n","PHRASE_MATCH(field_name, phrase, slop)\n","# Match documents containing exactly \"machine learning\"\nfilter = \"PHRASE_MATCH(text, 'machine learning')\"\n\nresult = client.query(\n    collection_name=\"tech_articles\",\n    filter=filter,\n    output_fields=[\"id\", \"text\"]\n)\n","# Example: Filter documents containing \"learning machine\" with slop=1\nfilter_slop1 = \"PHRASE_MATCH(text, 'learning machine', 1)\"\n\nresult_slop1 = client.search(\n    collection_name=\"tech_articles\",\n    anns_field=\"embeddings\",\n    data=[query_vector],\n    filter=filter_slop1,\n    search_params={\"params\": {\"nprobe\": 10}},\n    limit=10,\n    output_fields=[\"id\", \"text\"]\n)\n","# Example: Filter documents containing \"machine learning\" with slop=2\nfilter_slop2 = \"PHRASE_MATCH(text, 'machine learning', 2)\"\n\nresult_slop2 = client.search(\n    collection_name=\"tech_articles\",\n    anns_field=\"embeddings\",             # Vector field name\n    data=[query_vector],                 # Query vector\n    filter=filter_slop2,                 # Filter expression\n    search_params={\"params\": {\"nprobe\": 10}},\n    limit=10,                            # Maximum results to return\n    output_fields=[\"id\", \"text\"]\n)\n","# Example: Filter documents containing \"machine learning\" with slop=3\nfilter_slop3 = \"PHRASE_MATCH(text, 'machine learning', 3)\"\n\nresult_slop2 = client.search(\n    collection_name=\"tech_articles\",\n    anns_field=\"embeddings\",             # Vector field name\n    data=[query_vector],                 # Query vector\n    filter=filter_slop3,                 # Filter expression\n    search_params={\"params\": {\"nprobe\": 10}},\n    limit=10,                            # Maximum results to return\n    output_fields=[\"id\", \"text\"]\n)\n"],"headingContent":"Phrase Match","anchorList":[{"label":"Concordancia de frasesCompatible with Milvus 2.6.x","href":"Phrase-Match","type":1,"isActive":false},{"label":"Resumen","href":"Overview","type":2,"isActive":false},{"label":"Activar la concordancia de frases","href":"Enable-phrase-match","type":2,"isActive":false},{"label":"Utilizar la concordancia de frases","href":"Use-phrase-match","type":2,"isActive":false},{"label":"Consideraciones","href":"Considerations","type":2,"isActive":false}]}