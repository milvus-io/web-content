{"codeList":["{\n  \"metadata\": { \n    \"category\": \"electronics\",\n    \"brand\": \"BrandA\",\n    \"in_stock\": true,\n    \"price\": 99.99,\n    \"string_price\": \"99.99\",\n    \"tags\": [\"clearance\", \"summer_sale\"],\n    \"supplier\": {\n      \"name\": \"SupplierX\",\n      \"country\": \"USA\",\n      \"contact\": {\n        \"email\": \"support@supplierx.com\",\n        \"phone\": \"+1-800-555-0199\"\n      }\n    }\n  }\n}\n","from pymilvus import MilvusClient, DataType\n\nclient = MilvusClient(uri=\"http://localhost:19530\") # Replace with your server address \n\n# Create schema\nschema = client.create_schema(auto_id=False, enable_dynamic_field=True)\n\nschema.add_field(field_name=\"product_id\", datatype=DataType.INT64, is_primary=True) # Primary field\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5) # Vector field\n# Define a JSON field that allows null values\n# highlight-next-line\nschema.add_field(field_name=\"metadata\", datatype=DataType.JSON, nullable=True)\n\nclient.create_collection(\n    collection_name=\"product_catalog\",\n    schema=schema\n)\n","entities = [\n    {\n        \"product_id\": 1,\n        \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5],\n        # highlight-start\n        \"metadata\": { # JSON field\n            \"category\": \"electronics\",\n            \"brand\": \"BrandA\",\n            \"in_stock\": True,\n            \"price\": 99.99,\n            \"string_price\": \"99.99\",\n            \"tags\": [\"clearance\", \"summer_sale\"],\n            \"supplier\": {\n                \"name\": \"SupplierX\",\n                \"country\": \"USA\",\n                \"contact\": {\n                    \"email\": \"support@supplierx.com\",\n                    \"phone\": \"+1-800-555-0199\"\n                }\n            }\n        }\n        # highlight-end\n    }\n]\n\nclient.insert(collection_name=\"product_catalog\", data=entities)\n","index_params = client.prepare_index_params()\nindex_params.add_index(\n    field_name=\"vector\",\n    index_type=\"AUTOINDEX\",\n    index_name=\"vector_index\",\n    metric_type=\"COSINE\"\n)\n\nclient.create_index(collection_name=\"product_catalog\", index_params=index_params)\n\nclient.load_collection(collection_name=\"product_catalog\")\n","# Define filter expression\nfilter = 'metadata[\"category\"] == \"electronics\"'\n\nclient.search(\n    collection_name=\"product_catalog\",  # Collection name\n    data=[[0.1, 0.2, 0.3, 0.4, 0.5]],               # Query vector (must match collection's vector dim)\n    limit=5,                           # Max. number of results to return\n    # highlight-next-line\n    filter=filter,                    # Filter expression\n    output_fields=[\"product_id\", \"metadata\"]   # Fields to include in the search results\n)\n","# Define filter expression\nfilter = 'metadata[\"supplier\"][\"country\"] == \"USA\"'\n\nres = client.search(\n    collection_name=\"product_catalog\",  # Collection name\n    data=[[0.1, 0.2, 0.3, 0.4, 0.5]],               # Query vector (must match collection's vector dim)\n    limit=5,                           # Max. number of results to return\n    # highlight-next-line\n    filter=filter,                    # Filter expression\n    output_fields=[\"product_id\", \"metadata\"]   # Fields to include in the search results\n)\n\nprint(res)\n","# Define filter expression\nfilter = 'json_contains(metadata[\"tags\"], \"summer_sale\")'\n\nres = client.search(\n    collection_name=\"product_catalog\",  # Collection name\n    data=[[0.1, 0.2, 0.3, 0.4, 0.5]],               # Query vector (must match collection's vector dim)\n    limit=5,                           # Max. number of results to return\n    # highlight-next-line\n    filter=filter,                    # Filter expression\n    output_fields=[\"product_id\", \"metadata\"]   # Fields to include in the search results\n)\n\nprint(res)\n","# Define filter expression\nfilter = 'json_contains_any(metadata[\"tags\"], [\"electronics\", \"new\", \"clearance\"])'\n\nres = client.search(\n    collection_name=\"product_catalog\",  # Collection name\n    data=[[0.1, 0.2, 0.3, 0.4, 0.5]],               # Query vector (must match collection's vector dim)\n    limit=5,                           # Max. number of results to return\n    # highlight-next-line\n    filter=filter,                    # Filter expression\n    output_fields=[\"product_id\", \"metadata\"]   # Fields to include in the search results\n)\n\nprint(res)\n","\"a\\\"b\", \"a'b\", \"a\\\\b\"\n","'a\"b', 'a\\'b'\n"],"headingContent":"JSON Field Overview","anchorList":[{"label":"Descripción general del campo JSON","href":"JSON-Field-Overview","type":1,"isActive":false},{"label":"¿Qué es un campo JSON?","href":"What-is-a-JSON-field","type":2,"isActive":false},{"label":"Campo JSON frente a campo dinámico","href":"JSON-field-vs-dynamic-field","type":2,"isActive":false},{"label":"Operaciones básicas","href":"Basic-operations","type":2,"isActive":false},{"label":"Definir un campo JSON","href":"Define-a-JSON-field","type":3,"isActive":false},{"label":"Insertar datos","href":"Insert-data","type":3,"isActive":false},{"label":"Operaciones de filtrado","href":"Filtering-operations","type":3,"isActive":false},{"label":"A continuación: Acelerar las consultas JSON","href":"Next-Accelerate-JSON-queries","type":2,"isActive":false},{"label":"PREGUNTAS FRECUENTES","href":"FAQ","type":2,"isActive":false},{"label":"¿Existen limitaciones en el tamaño de un campo JSON?","href":"Are-there-any-limitations-on-the-size-of-a-JSON-field","type":3,"isActive":false},{"label":"¿Admite un campo JSON un valor por defecto?","href":"Does-a-JSON-field-support-setting-a-default-value","type":3,"isActive":false},{"label":"¿Existen convenciones de nomenclatura para las claves de los campos JSON?","href":"Are-there-any-naming-conventions-for-JSON-field-keys","type":3,"isActive":false},{"label":"¿Cómo maneja Milvus los valores de cadena en los campos JSON?","href":"How-does-Milvus-handle-string-values-in-JSON-fields","type":3,"isActive":false}]}