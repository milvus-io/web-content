{"codeList":["# Import necessary libraries\nfrom pymilvus import MilvusClient, DataType\n\n# Define server address\nSERVER_ADDR = \"http://localhost:19530\"\n\n# Create a MilvusClient instance\nclient = MilvusClient(uri=SERVER_ADDR)\n\n# Define the collection schema\nschema = client.create_schema(\n    auto_id=False,\n    enable_dynamic_fields=True,\n)\n\n# Add `varchar_field1` that supports null values with default value \"Unknown\"\nschema.add_field(field_name=\"varchar_field1\", datatype=DataType.VARCHAR, max_length=100, nullable=True, default_value=\"Unknown\")\n# Add `varchar_field2` that supports null values without default value\nschema.add_field(field_name=\"varchar_field2\", datatype=DataType.VARCHAR, max_length=200, nullable=True)\nschema.add_field(field_name=\"pk\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=3)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\n\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build());\n        \nCreateCollectionReq.CollectionSchema schema = client.createSchema();\nschema.setEnableDynamicField(true);\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"varchar_field1\")\n        .dataType(DataType.VarChar)\n        .maxLength(100)\n        .isNullable(true)\n        .defaultValue(\"Unknown\")\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"varchar_field2\")\n        .dataType(DataType.VarChar)\n        .maxLength(200)\n        .isNullable(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"pk\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"embedding\")\n        .dataType(DataType.FloatVector)\n        .dimension(3)\n        .build());\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst client = new MilvusClient({\n  address: `http://localhost:19530`\n});\n\nconst schema = [\n  {\n    name: \"metadata\",\n    data_type: DataType.JSON,\n  },\n  {\n    name: \"pk\",\n    data_type: DataType.Int64,\n    is_primary_key: true,\n  },\n  {\n    name: \"varchar_field2\",\n    data_type: DataType.VarChar,\n    max_length: 200,\n  },\n  {\n    name: \"varchar_field1\",\n    data_type: DataType.VarChar,\n    max_length: 100,\n  },\n];\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nschema := entity.NewSchema()\nschema.WithField(entity.NewField().\n    WithName(\"pk\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"embedding\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(3),\n).WithField(entity.NewField().\n    WithName(\"varchar_field1\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithMaxLength(100).\n    WithNullable(true).\n    WithDefaultValueString(\"Unknown\"),\n).WithField(entity.NewField().\n    WithName(\"varchar_field2\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithMaxLength(200).\n    WithNullable(true),\n)\n","export varcharField1='{\n    \"fieldName\": \"varchar_field1\",\n    \"dataType\": \"VarChar\",\n    \"elementTypeParams\": {\n        \"max_length\": 100\n    },\n    \"nullable\": true\n}'\n\nexport varcharField2='{\n    \"fieldName\": \"varchar_field2\",\n    \"dataType\": \"VarChar\",\n    \"elementTypeParams\": {\n        \"max_length\": 200\n    },\n    \"nullable\": true\n}'\n\nexport primaryField='{\n    \"fieldName\": \"pk\",\n    \"dataType\": \"Int64\",\n    \"isPrimary\": true\n}'\n\nexport vectorField='{\n    \"fieldName\": \"embedding\",\n    \"dataType\": \"FloatVector\",\n    \"elementTypeParams\": {\n        \"dim\": 3\n    }\n}'\n\nexport schema=\"{\n    \\\"autoID\\\": false,\n    \\\"fields\\\": [\n        $varcharField1,\n        $varcharField2,\n        $primaryField,\n        $vectorField\n    ]\n}\"\n","# Set index params\n\nindex_params = client.prepare_index_params()\n\n# Index `varchar_field1` with AUTOINDEX\nindex_params.add_index(\n    field_name=\"varchar_field1\",\n    index_type=\"AUTOINDEX\",\n    index_name=\"varchar_index\"\n)\n\n# Index `embedding` with AUTOINDEX and specify metric_type\nindex_params.add_index(\n    field_name=\"embedding\",\n    index_type=\"AUTOINDEX\",  # Use automatic indexing to simplify complex index settings\n    metric_type=\"COSINE\"  # Specify similarity metric type, options include L2, COSINE, or IP\n)\n","import io.milvus.v2.common.IndexParam;\nimport java.util.*;\n\nList<IndexParam> indexes = new ArrayList<>();\nindexes.add(IndexParam.builder()\n        .fieldName(\"varchar_field1\")\n        .indexName(\"varchar_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .build());\n        \nindexes.add(IndexParam.builder()\n        .fieldName(\"embedding\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.COSINE)\n        .build());\n","indexOption1 := milvusclient.NewCreateIndexOption(\"my_collection\", \"embedding\",\n    index.NewAutoIndex(index.MetricType(entity.IP)))\nindexOption2 := milvusclient.NewCreateIndexOption(\"my_collection\", \"varchar_field1\",\n    index.NewInvertedIndex())\n","const indexParams = [{\n    index_name: 'varchar_index',\n    field_name: 'varchar_field1',\n    index_type: IndexType.AUTOINDEX,\n)];\n\nindexParams.push({\n    index_name: 'embedding_index',\n    field_name: 'embedding',\n    metric_type: MetricType.COSINE,\n    index_type: IndexType.AUTOINDEX,\n});\n","export indexParams='[\n        {\n            \"fieldName\": \"varchar_field1\",\n            \"indexName\": \"varchar_index\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n    \nexport indexParams='[\n        {\n            \"fieldName\": \"varchar_field1\",\n            \"indexName\": \"varchar_index\",\n            \"indexType\": \"AUTOINDEX\"\n        },\n        {\n            \"fieldName\": \"embedding\",\n            \"metricType\": \"COSINE\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n","# Create Collection\nclient.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema,\n    index_params=index_params\n)\n","CreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexes)\n        .build();\nclient.createCollection(requestCreate);\n","err = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithIndexOptions(indexOption1, indexOption2))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","await client.create_collection({\n    collection_name: \"my_collection\",\n    schema: schema,\n    index_params: index_params\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n## {\"code\":0,\"data\":{}}\n","# Sample data\ndata = [\n    {\"varchar_field1\": \"Product A\", \"varchar_field2\": \"High quality product\", \"pk\": 1, \"embedding\": [0.1, 0.2, 0.3]},\n    {\"varchar_field1\": \"Product B\", \"pk\": 2, \"embedding\": [0.4, 0.5, 0.6]}, # varchar_field2 field is missing, which should be NULL\n    {\"varchar_field1\": None, \"varchar_field2\": None, \"pk\": 3, \"embedding\": [0.2, 0.3, 0.1]},  # `varchar_field1` should default to `Unknown`, `varchar_field2` is NULL\n    {\"varchar_field1\": \"Product C\", \"varchar_field2\": None, \"pk\": 4, \"embedding\": [0.5, 0.7, 0.2]},  # `varchar_field2` is NULL\n    {\"varchar_field1\": None, \"varchar_field2\": \"Exclusive deal\", \"pk\": 5, \"embedding\": [0.6, 0.4, 0.8]},  # `varchar_field1` should default to `Unknown`\n    {\"varchar_field1\": \"Unknown\", \"varchar_field2\": None, \"pk\": 6, \"embedding\": [0.8, 0.5, 0.3]},  # `varchar_field2` is NULL\n    {\"varchar_field1\": \"\", \"varchar_field2\": \"Best seller\", \"pk\": 7, \"embedding\": [0.8, 0.5, 0.3]}, # Empty string is not treated as NULL\n]\n\n# Insert data\nclient.insert(\n    collection_name=\"my_collection\",\n    data=data\n)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.InsertResp;\n\nList<JsonObject> rows = new ArrayList<>();\nGson gson = new Gson();\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": \\\"Product A\\\", \\\"varchar_field2\\\": \\\"High quality product\\\", \\\"pk\\\": 1, \\\"embedding\\\": [0.1, 0.2, 0.3]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": \\\"Product B\\\", \\\"pk\\\": 2, \\\"embedding\\\": [0.4, 0.5, 0.6]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": null, \\\"varchar_field2\\\": null, \\\"pk\\\": 3, \\\"embedding\\\": [0.2, 0.3, 0.1]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": \\\"Product C\\\", \\\"varchar_field2\\\": null, \\\"pk\\\": 4, \\\"embedding\\\": [0.5, 0.7, 0.2]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": null, \\\"varchar_field2\\\": \\\"Exclusive deal\\\", \\\"pk\\\": 5, \\\"embedding\\\": [0.6, 0.4, 0.8]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": \\\"Unknown\\\", \\\"varchar_field2\\\": null, \\\"pk\\\": 6, \\\"embedding\\\": [0.8, 0.5, 0.3]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": \\\"\\\", \\\"varchar_field2\\\": \\\"Best seller\\\", \\\"pk\\\": 7, \\\"embedding\\\": [0.8, 0.5, 0.3]}\", JsonObject.class));\n\nInsertResp insertR = client.insert(InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(rows)\n        .build());\n","column1, _ := column.NewNullableColumnVarChar(\"varchar_field1\",\n    []string{\"Product A\", \"Product B\", \"Product C\", \"Unknown\", \"\"},\n    []bool{true, true, false, true, false, true, true})\ncolumn2, _ := column.NewNullableColumnVarChar(\"varchar_field2\",\n    []string{\"High quality product\", \"Exclusive deal\", \"Best seller\"},\n    []bool{true, false, false, false, true, false, true})\n\n_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"pk\", []int64{1, 2, 3, 4, 5, 6, 7}).\n    WithFloatVectorColumn(\"embedding\", 3, [][]float32{\n        {0.1, 0.2, 0.3},\n        {0.4, 0.5, 0.6},\n        {0.2, 0.3, 0.1},\n        {0.5, 0.7, 0.2},\n        {0.6, 0.4, 0.8},\n        {0.8, 0.5, 0.3},\n        {0.8, 0.5, 0.3},\n    }).\n    WithColumns(column1, column2),\n)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","const data = [\n  {\n    varchar_field1: \"Product A\",\n    varchar_field2: \"High quality product\",\n    pk: 1,\n    embedding: [0.1, 0.2, 0.3],\n  },\n  {\n    varchar_field1: \"Product B\",\n    varchar_field2: \"Affordable price\",\n    pk: 2,\n    embedding: [0.4, 0.5, 0.6],\n  },\n  {\n    varchar_field1: \"Product C\",\n    varchar_field2: \"Best seller\",\n    pk: 3,\n    embedding: [0.7, 0.8, 0.9],\n  },\n];\n\nawait client.insert({\n  collection_name: \"my_collection\",\n  data: data,\n});\n\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n--data '{\n    \"data\": [\n        {\"varchar_field1\": \"Product A\", \"varchar_field2\": \"High quality product\", \"pk\": 1, \"embedding\": [0.1, 0.2, 0.3]},\n        {\"varchar_field1\": \"Product B\", \"pk\": 2, \"embedding\": [0.4, 0.5, 0.6]},\n        {\"varchar_field1\": null, \"varchar_field2\": null, \"pk\": 3, \"embedding\": [0.2, 0.3, 0.1]},  \n        {\"varchar_field1\": \"Product C\", \"varchar_field2\": null, \"pk\": 4, \"embedding\": [0.5, 0.7, 0.2]},  \n        {\"varchar_field1\": null, \"varchar_field2\": \"Exclusive deal\", \"pk\": 5, \"embedding\": [0.6, 0.4, 0.8]},  \n        {\"varchar_field1\": \"Unknown\", \"varchar_field2\": null, \"pk\": 6, \"embedding\": [0.8, 0.5, 0.3]},  \n        {\"varchar_field1\": \"\", \"varchar_field2\": \"Best seller\", \"pk\": 7, \"embedding\": [0.8, 0.5, 0.3]}  \n    ],\n    \"collectionName\": \"my_collection\"\n}'\n\n## {\"code\":0,\"cost\":0,\"data\":{\"insertCount\":3,\"insertIds\":[1,2,3]}}\n","# Filter `varchar_field1` with value \"Product A\"\nfilter = 'varchar_field1 == \"Product A\"'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"varchar_field1\", \"varchar_field2\"]\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"{'varchar_field1': 'Product A', 'varchar_field2': 'High quality product', 'pk': 1}\"\n# ]\n","import io.milvus.v2.service.vector.request.QueryReq;\nimport io.milvus.v2.service.vector.response.QueryResp;\n\nString filter = \"varchar_field1 == \\\"Product A\\\"\";\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"varchar_field1\", \"varchar_field2\"))\n        .build());\n\nSystem.out.println(resp.getQueryResults());\n\n// Output\n//\n// [QueryResp.QueryResult(entity={varchar_field1=Product A, varchar_field2=High quality product, pk=1})]\n","filter := \"varchar_field1 == \\\"Product A\\\"\"\nqueryResult, err := client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"varchar_field1\", \"varchar_field2\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"varchar_field1\", queryResult.GetColumn(\"varchar_field1\").FieldData().GetScalars())\nfmt.Println(\"varchar_field2\", queryResult.GetColumn(\"varchar_field2\").FieldData().GetScalars())\n\n// Output\n//\n// varchar_field1 string_data:{data:\"Product A\"}\n// varchar_field2 string_data:{data:\"High quality product\"}\n","await client.query({\n    collection_name: 'my_collection',\n    filter: 'varchar_field1 == \"Product A\"',\n    output_fields: ['varchar_field1', 'varchar_field2']\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"varchar_field1 == \\\"Product A\\\"\",\n    \"outputFields\": [\"varchar_field1\", \"varchar_field2\"]\n}'\n## {\"code\":0,\"cost\":0,\"data\":[{\"pk\":1,\"varchar_field1\":\"Product A\",\"varchar_field2\":\"High quality product\"}]}\n","# Filter entities where `varchar_field2` is null\nfilter = 'varchar_field2 is null'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"varchar_field1\", \"varchar_field2\"]\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"{'varchar_field1': 'Product B', 'varchar_field2': None, 'pk': 2}\",\n#     \"{'varchar_field1': 'Unknown', 'varchar_field2': None, 'pk': 3}\",\n#     \"{'varchar_field1': 'Product C', 'varchar_field2': None, 'pk': 4}\",\n#     \"{'varchar_field1': 'Unknown', 'varchar_field2': None, 'pk': 6}\"\n# ]\n","String filter = \"varchar_field2 is null\";\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"varchar_field1\", \"varchar_field2\"))\n        .build());\n\nSystem.out.println(resp.getQueryResults());\n\n// Output\n//\n// [\n//    QueryResp.QueryResult(entity={varchar_field1=Product B, varchar_field2=null, pk=2}),\n//    QueryResp.QueryResult(entity={varchar_field1=Unknown, varchar_field2=null, pk=3}),\n//    QueryResp.QueryResult(entity={varchar_field1=Product C, varchar_field2=null, pk=4}),\n//    QueryResp.QueryResult(entity={varchar_field1=Unknown, varchar_field2=null, pk=6})\n// ]\n","filter = \"varchar_field2 is null\"\nqueryResult, err = client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"varchar_field1\", \"varchar_field2\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"varchar_field1\", queryResult.GetColumn(\"varchar_field1\"))\nfmt.Println(\"varchar_field2\", queryResult.GetColumn(\"varchar_field2\"))\n","await client.query({\n    collection_name: 'my_collection',\n    filter: 'varchar_field2 is null',\n    output_fields: ['varchar_field1', 'varchar_field2']\n});\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"varchar_field2 is null\",\n    \"outputFields\": [\"varchar_field1\", \"varchar_field2\"]\n}'\n","# Filter entities with `varchar_field1` with value `Unknown`\nfilter = 'varchar_field1 == \"Unknown\"'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"varchar_field1\", \"varchar_field2\"]\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"{'varchar_field1': 'Unknown', 'varchar_field2': None, 'pk': 3}\",\n#     \"{'varchar_field1': 'Unknown', 'varchar_field2': 'Exclusive deal', 'pk': 5}\",\n#     \"{'varchar_field1': 'Unknown', 'varchar_field2': None, 'pk': 6}\"\n# ]\n","String filter = \"varchar_field1 == \\\"Unknown\\\"\";\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"varchar_field1\", \"varchar_field2\"))\n        .build());\n\nSystem.out.println(resp.getQueryResults());\n\n// Output\n// \n// [\n//    QueryResp.QueryResult(entity={varchar_field1=Unknown, varchar_field2=null, pk=3}),\n//    QueryResp.QueryResult(entity={varchar_field1=Unknown, varchar_field2=Exclusive deal, pk=5}),\n//    QueryResp.QueryResult(entity={varchar_field1=Unknown, varchar_field2=null, pk=6})\n// ]\n","filter = \"varchar_field1 == \\\"Unknown\\\"\"\nqueryResult, err = client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"varchar_field1\", \"varchar_field2\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"varchar_field1\", queryResult.GetColumn(\"varchar_field1\"))\nfmt.Println(\"varchar_field2\", queryResult.GetColumn(\"varchar_field2\"))\n","// node\nawait client.query({\n    collection_name: 'my_collection',\n    filter: 'varchar_field1 == \"Unknown\"',\n    output_fields: ['varchar_field1', 'varchar_field2']\n});\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"varchar_field1 == \\\"Unknown\\\"\",\n    \"outputFields\": [\"varchar_field1\", \"varchar_field2\"]\n}'\n","# Search with string filtering\n\n# Filter `varchar_field2` with value \"Best seller\"\nfilter = 'varchar_field2 == \"Best seller\"'\n\nres = client.search(\n    collection_name=\"my_collection\",\n    data=[[0.3, -0.6, 0.1]],\n    limit=5,\n    search_params={\"params\": {\"nprobe\": 10}},\n    output_fields=[\"varchar_field1\", \"varchar_field2\"],\n    filter=filter\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"[{'id': 7, 'distance': -0.04468163847923279, 'entity': {'varchar_field1': '', 'varchar_field2': 'Best seller'}}]\"\n# ]\n","import io.milvus.v2.service.vector.request.SearchReq;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nString filter = \"varchar_field2 == \\\"Best seller\\\"\";\nSearchResp resp = client.search(SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .annsField(\"embedding\")\n        .data(Collections.singletonList(new FloatVec(new float[]{0.3f, -0.6f, 0.1f})))\n        .topK(5)\n        .outputFields(Arrays.asList(\"varchar_field1\", \"varchar_field2\"))\n        .filter(filter)\n        .build());\n\nSystem.out.println(resp.getSearchResults());\n\n// Output\n//\n// [[SearchResp.SearchResult(entity={varchar_field1=, varchar_field2=Best seller}, score=-0.04468164, id=7)]]\n","queryVector := []float32{0.3, -0.6, 0.1}\nfilter = \"varchar_field2 == \\\"Best seller\\\"\"\n\nannParam := index.NewCustomAnnParam()\nannParam.WithExtraParam(\"nprobe\", 10)\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    5,                       // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithANNSField(\"embedding\").\n    WithFilter(filter).\n    WithAnnParam(annParam).\n    WithOutputFields(\"varchar_field1\", \"varchar_field2\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"varchar_field1: \", resultSet.GetColumn(\"varchar_field1\"))\n    fmt.Println(\"varchar_field2: \", resultSet.GetColumn(\"varchar_field2\"))\n}\n","await client.search({\n    collection_name: 'my_collection',\n    data: [0.3, -0.6, 0.1],\n    limit: 5,\n    output_fields: ['varchar_field1', 'varchar_field2'],\n    filter: 'varchar_field2 == \"Best seller\"'\n    params: {\n       nprobe:10\n    }\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.3, -0.6, 0.1]\n    ],\n    \"limit\": 5,\n    \"searchParams\":{\n        \"params\":{\"nprobe\":10}\n    },\n    \"outputFields\": [\"varchar_field1\", \"varchar_field2\"],\n    \"filter\": \"varchar_field2 == \\\"Best seller\\\"\"\n}'\n\n## {\"code\":0,\"cost\":0,\"data\":[{\"distance\":-0.2364331,\"id\":1,\"varchar_field1\":\"Product A\",\"varchar_field2\":\"High quality product\"}]}\n"],"headingContent":"String Field","anchorList":[{"label":"Campo Cadena","href":"String-Field","type":1,"isActive":false},{"label":"Añadir campo VARCHAR","href":"Add-VARCHAR-field","type":2,"isActive":false},{"label":"Establecer parámetros de índice","href":"Set-index-params","type":2,"isActive":false},{"label":"Crear colección","href":"Create-collection","type":2,"isActive":false},{"label":"Insertar datos","href":"Insert-data","type":2,"isActive":false},{"label":"Consulta con expresiones de filtro","href":"Query-with-filter-expressions","type":2,"isActive":false},{"label":"Búsqueda vectorial con expresiones de filtro","href":"Vector-search-with-filter-expressions","type":2,"isActive":false}]}