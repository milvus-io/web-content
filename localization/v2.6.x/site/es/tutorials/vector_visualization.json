{"codeList":["$ pip install --upgrade pymilvus openai requests tqdm matplotlib seaborn\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","$ wget https://github.com/milvus-io/milvus-docs/releases/download/v2.4.6-preview/milvus_docs_2.4.x_en.zip\n$ unzip -q milvus_docs_2.4.x_en.zip -d milvus_docs\n","from glob import glob\n\ntext_lines = []\n\nfor file_path in glob(\"milvus_docs/en/faq/*.md\", recursive=True):\n    with open(file_path, \"r\") as file:\n        file_text = file.read()\n\n    text_lines += file_text.split(\"# \")\n","from openai import OpenAI\n\nopenai_client = OpenAI()\n","def emb_text(text):\n    return (\n        openai_client.embeddings.create(input=text, model=\"text-embedding-3-large\")\n        .data[0]\n        .embedding\n    )\n","test_embedding = emb_text(\"This is a test\")\nembedding_dim = len(test_embedding)\nprint(embedding_dim)\nprint(test_embedding[:10])\n","from pymilvus import MilvusClient\n\nmilvus_client = MilvusClient(uri=\"./milvus_demo.db\")\n\ncollection_name = \"my_rag_collection\"\n","if milvus_client.has_collection(collection_name):\n    milvus_client.drop_collection(collection_name)\n","milvus_client.create_collection(\n    collection_name=collection_name,\n    dimension=embedding_dim,\n    metric_type=\"IP\",  # Inner product distance\n    consistency_level=\"Bounded\",  # Supported values are (`\"Strong\"`, `\"Session\"`, `\"Bounded\"`, `\"Eventually\"`). See https://milvus.io/docs/consistency.md#Consistency-Level for more details.\n)\n","from tqdm import tqdm\n\ndata = []\n\nfor i, line in enumerate(tqdm(text_lines, desc=\"Creating embeddings\")):\n    data.append({\"id\": i, \"vector\": emb_text(line), \"text\": line})\n\nmilvus_client.insert(collection_name=collection_name, data=data)\n","# Modify the question to test it with your own query!\n\nquestion = \"How is data stored in Milvus?\"\n","search_res = milvus_client.search(\n    collection_name=collection_name,\n    data=[\n        emb_text(question)\n    ],  # Use the `emb_text` function to convert the question to an embedding vector\n    limit=10,  # Return top 10 results\n    search_params={\"metric_type\": \"IP\", \"params\": {}},  # Inner product distance\n    output_fields=[\"text\"],  # Return the text field\n)\n","import json\n\nretrieved_lines_with_distances = [\n    (res[\"entity\"][\"text\"], res[\"distance\"]) for res in search_res[0]\n]\nprint(json.dumps(retrieved_lines_with_distances, indent=4))\n","import pandas as pd\nimport numpy as np\nfrom sklearn.manifold import TSNE\n\ndata.append({\"id\": len(data), \"vector\": emb_text(question), \"text\": question})\nembeddings = []\nfor gp in data:\n    embeddings.append(gp[\"vector\"])\n\nX = np.array(embeddings, dtype=np.float32)\ntsne = TSNE(random_state=0, max_iter=1000)\ntsne_results = tsne.fit_transform(X)\n\ndf_tsne = pd.DataFrame(tsne_results, columns=[\"TSNE1\", \"TSNE2\"])\ndf_tsne\n","import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Extract similar ids from search results\nsimilar_ids = [gp[\"id\"] for gp in search_res[0]]\n\ndf_norm = df_tsne[:-1]\n\ndf_query = pd.DataFrame(df_tsne.iloc[-1]).T\n\n# Filter points based on similar ids\nsimilar_points = df_tsne[df_tsne.index.isin(similar_ids)]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(8, 6))  # Set figsize\n\n# Set the style of the plot\nsns.set_style(\"darkgrid\", {\"grid.color\": \".6\", \"grid.linestyle\": \":\"})\n\n# Plot all points in blue\nsns.scatterplot(\n    data=df_tsne, x=\"TSNE1\", y=\"TSNE2\", color=\"blue\", label=\"All knowledge\", ax=ax\n)\n\n# Overlay similar points in red\nsns.scatterplot(\n    data=similar_points,\n    x=\"TSNE1\",\n    y=\"TSNE2\",\n    color=\"red\",\n    label=\"Similar knowledge\",\n    ax=ax,\n)\n\nsns.scatterplot(\n    data=df_query, x=\"TSNE1\", y=\"TSNE2\", color=\"green\", label=\"Query\", ax=ax\n)\n\n# Set plot titles and labels\nplt.title(\"Scatter plot of knowledge using t-SNE\")\nplt.xlabel(\"TSNE1\")\nplt.ylabel(\"TSNE2\")\n\n# Set axis to be equal\nplt.axis(\"equal\")\n\n# Display the legend\nplt.legend()\n\n# Show the plot\nplt.show()\n"],"headingContent":"Vector Visualization","anchorList":[{"label":"Visualización de vectores","href":"Vector-Visualization","type":1,"isActive":false},{"label":"Preparación","href":"Preparation","type":2,"isActive":false},{"label":"Preparar los datos","href":"Prepare-the-data","type":2,"isActive":false},{"label":"Preparar el modelo de incrustación","href":"Prepare-the-Embedding-Model","type":2,"isActive":false},{"label":"Cargar datos en Milvus","href":"Load-data-into-Milvus","type":2,"isActive":false},{"label":"Insertar datos","href":"Insert-data","type":2,"isActive":false},{"label":"Visualización de incrustaciones en la búsqueda vectorial","href":"Visualizing-Embeddings-in-Vector-Search","type":2,"isActive":false}]}