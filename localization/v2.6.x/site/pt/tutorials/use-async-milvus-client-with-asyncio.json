{"codeList":["import asyncio​\nimport numpy as np​\nfrom scipy.sparse import csr_matrix​\nfrom pymilvus import MilvusClient, AsyncMilvusClient, DataType, RRFRanker, AnnSearchRequest​\n​\nloop = asyncio.get_event_loop()​\n\n","# Connect to Milvus server using AsyncMilvusClient​\nasync_client = AsyncMilvusClient(​\n    uri=\"http://localhost:19530\",​\n    token=\"root:Milvus\"​\n)​\n\n","schema = async_client.create_schema(​\n    auto_id=False,​\n    description=\"This is a sample schema\",​\n)​\n​\nschema.add_field(\"id\", DataType.INT64, is_primary=True)​\nschema.add_field(\"dense_vector\", DataType.FLOAT_VECTOR, dim=5)​\nschema.add_field(\"sparse_vector\", DataType.SPARSE_FLOAT_VECTOR)​\nschema.add_field(\"text\", DataType.VARCHAR, max_length=512)​\n\n","async def create_my_collection(collection_name, schema):​\n    if (client.has_collection(collection_name)):​\n        await async_client.drop_collection(collection_name)​\n​\n    await async_client.create_collection(​\n        collection_name=collection_name,​\n        schema=schema​\n    )​\n​\n    if (client.has_collection(collection_name)):​\n        print(\"Collection created successfully\")​\n    else:​\n        print(\"Failed to create collection\")​\n        ​\n# Call the above function asynchronously ​\nloop.run_until_complete(create_my_collection(\"my_collection\", schema))​\n​\n# Output​\n#​\n# Collection created successfully​\n\n","async def create_indexes(collection_name):​\n    index_params = client.prepare_index_params()​\n​\n    index_params.add_index(field_name=\"dense_vector\", index_type=\"AUTOINDEX\", metric_type=\"IP\")​\n    index_params.add_index(field_name=\"sparse_vector\", index_type=\"AUTOINDEX\", metric_type=\"IP\")​\n    index_params.add_index(field_name=\"text\", index_type=\"AUTOINDEX\")​\n​\n    await async_client.create_index(collection_name, index_params)​\n​\n# Call the above function asynchronously ​\nloop.run_until_complete(create_indexes(\"my_collection\"))​\n\n","async def load_my_collection(collection_name):​\n    await async_client.load_collection(collection_name)​\n    print(client.get_load_state(collection_name))​\n    ​\n# Call the above function asynchronously ​\nloop.run_until_complete(load_my_collection(\"my_collection\"))​\n​\n# Output​\n#​\n# {'state': <LoadState: Loaded>}​\n\n","async def insert_sample_data(collection_name):​\n    # Randomly generated data will be used here​\n    rng = np.random.default_rng(42)​\n​\n    def generate_random_text(length):​\n        seed = \"this is a seed paragraph to generate random text, which is used for testing purposes. Specifically, a random text is generated by randomly selecting words from this sentence.\"​\n        words = seed.split()​\n        return \" \".join(rng.choice(words, length))​\n    ​\n    data = [{​\n        'id': i, ​\n        'dense_vector': rng.random(5).tolist(), ​\n        'sparse_vector': csr_matrix(rng.random(5)), ​\n        'text': generate_random_text(10)​\n    } for i in range(10000)]​\n​\n    res = await async_client.insert(collection_name, data)​\n​\n    print(res)​\n​\n# Call the above function asynchronously ​\nloop.run_until_complete(insert_sample_data(\"my_collection\"))​\n​\n# Output​\n#​\n# {'insert_count': 10000, 'ids': [0, 1, 2, 3, ..., 9999]}​\n\n","async def query_my_collection(collection_name):​\n    # Find the number of entities with the `text` fields starting with the word \"random\" in the `my_collection` collection.​\n​\n    res = await async_client.query(​\n        collection_name=\"my_collection\",​\n        filter='text like \"%random%\"',​\n        output_fields=[\"count(*)\"]​\n    )​\n​\n    print(res) ​\n    ​\n# Call the above function asynchronously   ​\nloop.run_until_complete(query_my_collection(\"my_collection\"))​\n​\n# Output​\n#​\n# data: [\"{'count(*)': 6802}\"] ​\n\n","async def conduct_vector_search(collection_name, type, field):​\n    # Generate a set of three random query vectors​\n    query_vectors = []​\n    if type == \"dense\":​\n        query_vectors = [ rng.random(5) for _ in range(3) ]​\n    ​\n    if type == \"sparse\":​\n        query_vectors = [ csr_matrix(rng.random(5)) for _ in range(3) ]​\n​\n    print(query_vectors)​\n​\n    res = await async_client.search(​\n        collection_name=\"my_collection\",​\n        data=query_vectors,​\n        anns_field=field,​\n        output_fields=[\"text\", field]​\n    )​\n​\n    print(res)​\n    ​\n# To search against the dense vector field asynchronously ​\nloop.run_until_complete(conduct_vector_search(\"my_collection\", \"dense\", \"dense_vector\"))​\n​\n# To search against the sparse vector field asynchronously ​\nloop.run_until_complete(conduct_vector_search(\"my_collection\", \"sparse\", \"sparse_vector\"))​\n\n","async def conduct_hybrid_search(collection_name):​\n    req_dense = AnnSearchRequest(​\n        data=[ rng.random(5) for _ in range(3) ],​\n        anns_field=\"dense_vector\",​\n        param={\"metric_type\": \"IP\"},​\n        limit=10​\n    )​\n​\n    req_sparse = AnnSearchRequest(​\n        data=[ csr_matrix(rng.random(5)) for _ in range(3) ],​\n        anns_field=\"sparse_vector\",​\n        param={\"metric_type\": \"IP\"},​\n        limit=10​\n    )​\n​\n    reqs = [req_dense, req_sparse]​\n​\n    ranker = RRFRanker()​\n​\n    res = await async_client.hybrid_search(​\n        collection_name=\"my_collection\",​\n        reqs=reqs,​\n        ranker=ranker,​\n        output_fields=[\"text\", \"dense_vector\", \"sparse_vector\"]​\n    )​\n​\n    print(res)​\n    ​\n# Call the above function asynchronously  ​\nloop.run_until_complete(conduct_hybrid_search(\"my_collection\"))​\n\n"],"headingContent":"Tutorial: Use AsyncMilvusClient with asyncio​","anchorList":[{"label":"Tutorial: Usar AsyncMilvusClient com asyncio","href":"Tutorial-Use-AsyncMilvusClient-with-asyncio​","type":1,"isActive":false},{"label":"Visão geral","href":"Overview​","type":2,"isActive":false},{"label":"Criar um ciclo de eventos","href":"Create-an-event-loop​","type":2,"isActive":false},{"label":"Conectar com AsyncMilvusClient","href":"Connect-with-AsyncMilvusClient​","type":2,"isActive":false},{"label":"Criar esquema","href":"Create-schema​","type":2,"isActive":false},{"label":"Criar coleção","href":"Create-collection​","type":2,"isActive":false},{"label":"Criar índice","href":"Create-index​","type":2,"isActive":false},{"label":"Carregar coleção","href":"Load-collection​","type":2,"isActive":false},{"label":"Inserir dados","href":"Insert-data​","type":2,"isActive":false},{"label":"Consulta","href":"Query​","type":2,"isActive":false},{"label":"Pesquisa","href":"Search​","type":2,"isActive":false},{"label":"Pesquisa híbrida","href":"Hybrid-Search​","type":2,"isActive":false}]}