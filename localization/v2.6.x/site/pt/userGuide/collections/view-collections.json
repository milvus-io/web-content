{"codeList":["from pymilvus import MilvusClient, DataType\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nres = client.list_collections()\n\nprint(res)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.collection.response.ListCollectionsResp;\n\nConnectConfig connectConfig = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\nListCollectionsResp resp = client.listCollections();\nSystem.out.println(resp.getCollectionNames());\n","import { MilvusClient } from '@zilliz/milvus2-sdk-node';\n\nconst client = new MilvusClient({\n    address: 'localhost:19530',\n    token: 'root:Milvus'\n});\n\nconst collections = await client.listCollections();\nconsole.log(collections);\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\ntoken := \"root:Milvus\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n    APIKey:  token,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\ndefer client.Close(ctx)\n\ncollectionNames, err := client.ListCollections(ctx, milvusclient.NewListCollectionOption())\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(collectionNames)\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/list\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{}'\n","[\"quick_setup\"]\n","res = client.describe_collection(\n    collection_name=\"quick_setup\"\n)\n\nprint(res)\n","import io.milvus.v2.service.collection.request.DescribeCollectionReq;\nimport io.milvus.v2.service.collection.response.DescribeCollectionResp;\n\nDescribeCollectionReq request = DescribeCollectionReq.builder()\n        .collectionName(\"quick_setup\")\n        .build();\nDescribeCollectionResp resp = client.describeCollection(request);\nSystem.out.println(resp);\n","const res = await client.describeCollection({\n    collection_name: \"quick_setup\"\n});\n\nconsole.log(res);\n","collection, err := client.DescribeCollection(ctx, milvusclient.NewDescribeCollectionOption(\"quick_setup\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n\nfmt.Println(collection)\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/describe\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"quick_setup\"\n}'\n","{\n    'collection_name': 'quick_setup', \n    'auto_id': False, \n    'num_shards': 1, \n    'description': '', \n    'fields': [\n        {\n            'field_id': 100, \n            'name': 'id', \n            'description': '', \n            'type': <DataType.INT64: 5>, \n            'params': {}, \n            'is_primary': True\n        }, \n        {\n            'field_id': 101, \n            'name': 'vector', \n            'description': '', \n            'type': <DataType.FLOAT_VECTOR: 101>, \n            'params': {'dim': 768}\n        }\n    ], \n    'functions': [], \n    'aliases': [], \n    'collection_id': 456909630285026300, \n    'consistency_level': 2, \n    'properties': {}, \n    'num_partitions': 1, \n    'enable_dynamic_field': True\n}\n"],"headingContent":"View Collections","anchorList":[{"label":"Ver colecções","href":"View-Collections","type":1,"isActive":false},{"label":"Listar colecções","href":"List-Collections","type":2,"isActive":false},{"label":"Descrever coleção","href":"Describe-Collection","type":2,"isActive":false}]}