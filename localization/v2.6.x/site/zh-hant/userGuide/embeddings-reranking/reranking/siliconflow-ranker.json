{"codeList":["from pymilvus import MilvusClient, Function, FunctionType\n\n# Connect to your Milvus server\nclient = MilvusClient(\n    uri=\"http://localhost:19530\"  # Replace with your Milvus server URI\n)\n\n# Configure SiliconFlow Ranker\nsiliconflow_ranker = Function(\n    name=\"siliconflow_semantic_ranker\",     # Unique identifier for your ranker\n    input_field_names=[\"document\"],         # VARCHAR field containing text to rerank\n    function_type=FunctionType.RERANK,      # Must be RERANK for reranking functions\n    params={\n        \"reranker\": \"model\",                # Enables model-based reranking\n        \"provider\": \"siliconflow\",          # Specifies SiliconFlow as the service provider\n        \"model_name\": \"BAAI/bge-reranker-v2-m3\", # SiliconFlow reranking model to use\n        \"queries\": [\"renewable energy developments\"], # Query text for relevance evaluation\n        \"max_client_batch_size\": 128,       # Optional: batch size for model service requests (default: 128)\n        \"max_chunks_per_doc\": 5,            # Optional: max chunks per document for supported models\n        \"overlap_tokens\": 50,               # Optional: token overlap between chunks for supported models\n        # \"credential\": \"your-siliconflow-api-key\" # Optional: if not set, uses SILICONFLOW_API_KEY env var\n    }\n)\n","// java\n","// nodejs\n","// go\n","# restful\n","# Execute search with SiliconFlow reranking\nresults = client.search(\n    collection_name=\"your_collection\",\n    data=[\"AI Research Progress\", \"What is AI\"],  # Search queries\n    anns_field=\"dense_vector\",                   # Vector field to search\n    limit=5,                                     # Number of results to return\n    output_fields=[\"document\"],                  # Include text field for reranking\n    #  highlight-next-line\n    ranker=siliconflow_ranker,                  # Apply SiliconFlow reranking\n    consistency_level=\"Bounded\"\n)\n","from pymilvus import AnnSearchRequest\n\n# Configure dense vector search\ndense_search = AnnSearchRequest(\n    data=[\"AI Research Progress\", \"What is AI\"],\n    anns_field=\"dense_vector\",\n    param={},\n    limit=5\n)\n\n# Configure sparse vector search  \nsparse_search = AnnSearchRequest(\n    data=[\"AI Research Progress\", \"What is AI\"],\n    anns_field=\"sparse_vector\", \n    param={},\n    limit=5\n)\n\n# Execute hybrid search with SiliconFlow reranking\nhybrid_results = client.hybrid_search(\n    collection_name=\"your_collection\",\n    [dense_search, sparse_search],              # Multiple search requests\n    #  highlight-next-line\n    ranker=siliconflow_ranker,                 # Apply SiliconFlow reranking to combined results\n    limit=5,                                   # Final number of results\n    output_fields=[\"document\"]\n)\n"],"headingContent":"SiliconFlow Ranker","anchorList":[{"label":"SiliconFlow RankerCompatible with Milvus 2.6.x","href":"SiliconFlow-Ranker","type":1,"isActive":false},{"label":"先決條件","href":"Prerequisites","type":2,"isActive":false},{"label":"創建一個SiliconFlow排名函數","href":"Create-a-SiliconFlow-ranker-function","type":2,"isActive":false},{"label":"SiliconFlow 排序器特定參數","href":"SiliconFlow-ranker-specific-parameters","type":3,"isActive":false},{"label":"應用於標準向量搜尋","href":"Apply-to-standard-vector-search","type":2,"isActive":false},{"label":"應用於混合搜尋","href":"Apply-to-hybrid-search","type":2,"isActive":false}]}