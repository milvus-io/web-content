{"codeList":["dataCoord:\n  compaction:\n    clustering:\n      enable: true \n      autoEnable: false \n      triggerInterval: 600 \n      minInterval: 3600 \n      maxInterval: 259200 \n      newDataSizeThreshold: 512m \n      timeout: 7200\n     \nqueryNode:\n  enableSegmentPrune: true \n\ndatanode:\n  clusteringCompaction:\n    memoryBufferRatio: 0.1 \n    workPoolSize: 8  \ncommon:\n  usePartitionKeyAsClusteringKey: true \n","from pymilvus import MilvusClient, DataType\n\nCLUSTER_ENDPOINT=\"http://localhost:19530\"\nTOKEN=\"root:Milvus\"\n\nclient = MilvusClient(\n    uri=CLUSTER_ENDPOINT,\n    token=TOKEN\n)\n\nschema = MilvusClient.create_schema()\nschema.add_field(\"id\", DataType.INT64, is_primary=True, auto_id=False)\nschema.add_field(\"key\", DataType.INT64, is_clustering_key=True)\nschema.add_field(\"var\", DataType.VARCHAR, max_length=1000)\nschema.add_field(\"vector\", DataType.FLOAT_VECTOR, dim=5)\n\nclient.create_collection(\n    collection_name=\"clustering_test\",\n    schema=schema\n)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n        \nCreateCollectionReq.CollectionSchema schema = client.createSchema();\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .autoID(false)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"key\")\n        .dataType(DataType.Int64)\n        .isClusteringKey(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"var\")\n        .dataType(DataType.VarChar)\n        .maxLength(1000)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\n\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"clustering_test\")\n        .collectionSchema(schema)\n        .build();\nclient.createCollection(requestCreate);\n","// go\n","import { MilvusClient, DataType } from '@zilliz/milvus2-sdk-node';\n\nconst CLUSTER_ENDPOINT = 'http://localhost:19530';\nconst TOKEN = 'root:Milvus';\nconst client = new MilvusClient({\n  address: CLUSTER_ENDPOINT,\n  token: TOKEN,\n});\nconst schema = [\n    {\n      name: 'id',\n      type: DataType.Int64,\n      is_primary_key: true,\n      autoID: false,\n    },\n    {\n      name: 'key',\n      type: DataType.Int64,\n      is_clustering_key: true,\n    },\n    {\n      name: 'var',\n      type: DataType.VarChar,\n      max_length: 1000,\n      is_primary_key: false,\n    },\n    {\n      name: 'vector',\n      type: DataType.FloatVector,\n      dim: 5,\n    },\n  ];\n  \n  await client.createCollection({\n    collection_name: 'clustering_test',\n    schema: schema,\n  });\n","# restful\n","# trigger a manual compaction\njob_id = client.compact(\n    collection_name=\"clustering_test\", \n    is_clustering=True\n)\n\n# get the compaction state\nclient.get_compaction_state(\n    job_id=job_id,\n)\n","import io.milvus.v2.service.utility.request.CompactReq;\nimport io.milvus.v2.service.utility.request.GetCompactionStateReq;\nimport io.milvus.v2.service.utility.response.CompactResp;\nimport io.milvus.v2.service.utility.response.GetCompactionStateResp;\n\nCompactResp compactResp = client.compact(CompactReq.builder()\n        .collectionName(\"clustering_test\")\n        .isClustering(true)\n        .build());\n\nGetCompactionStateResp stateResp = client.getCompactionState(GetCompactionStateReq.builder()\n        .compactionID(compactResp.getCompactionID())\n        .build());\n\nSystem.out.println(stateResp.getState());\n","// go\n","// trigger a manual compaction\nconst {compactionID} = await client.compact({\n    collection_name: \"clustering_test\", \n    is_clustering: true\n});\n\n// get the compaction state\nawait client.getCompactionState({\n    compactionID: compactionID,\n});\n","# restful\n"],"headingContent":"Clustering Compaction","anchorList":[{"label":"聚類壓縮","href":"Clustering-Compaction","type":1,"isActive":false},{"label":"概述","href":"Overview","type":2,"isActive":false},{"label":"使用聚類壓縮","href":"Use-Clustering-Compaction","type":2,"isActive":false},{"label":"基準測試","href":"Benchmark-Test","type":2,"isActive":false},{"label":"最佳實務","href":"Best-Practices","type":2,"isActive":false}]}