{"codeList":["version: '3'\nservices:\n  zookeeper:\n    image: wurstmeister/zookeeper:latest\n    container_name: zookeeper\n    ports:\n      - 2181:2181\n    restart: always\n\n  kafka:\n    image: wurstmeister/kafka:latest\n    container_name: kafka\n    ports:\n      - 9092:9092\n    environment:\n      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\n      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092\n      - KAFKA_LISTENERS=PLAINTEXT://:9092\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    restart: always\n","$ docker compose up -d\n","version: '3.5'\n\nservices:\n  etcd:\n    ......\n    \n  minio:\n    ......\n      \n  standalone:\n    container_name: milvus-standalone\n    ......\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus.yaml:/milvus/configs/milvus.yaml\n","$ wget https://raw.githubusercontent.com/zilliztech/milvus-operator/main/config/samples/milvus_cluster_default.yaml -O milvus.yaml\n","mq:\n  type: kafka\n\nkafka:\n  brokerList: \"127.0.0.1:9092\"\n  saslUsername:\n  saslPassword:\n  saslMechanisms:\n  securityProtocol:\n  readTimeout: 10 # read message timeout in seconds\n  ssl:\n    enabled: false # Whether to support kafka secure connection mode\n    tlsCert: \n    tlsKey:\n    tlsCACert:\n    tlsKeyPassword:\n","$ docker compose up -d\n","version: '3'\nservices:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:latest\n    container_name: zookeeper\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n    ports:\n      - 2181:2181\n\n  kafka:\n    image: confluentinc/cp-kafka:latest\n    container_name: kafka\n    depends_on:\n      - zookeeper\n    ports:\n      - 9092:9092\n      - 9093:9093\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'\n      ZOOKEEPER_SASL_ENABLED: \"false\"\n      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://localhost:9093\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SASL_PLAINTEXT:SASL_PLAINTEXT\n      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT\n      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN\n      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN\n      KAFKA_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 1\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_OPTS: \"-Djava.security.auth.login.config=/etc/kafka/configs/kafka_server_jass.conf\"\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/kafka_server_jass.conf:/etc/kafka/configs/kafka_server_jass.conf\n","KafkaServer {\n    org.apache.kafka.common.security.plain.PlainLoginModule required\n    username=\"kafka\"\n    password=\"pass123\"\n    user_kafka=\"pass123\";\n};\n","$ docker compose up -d\n","version: '3.5'\n\nservices:\n  etcd:\n    ......\n    \n  minio:\n    ......\n      \n  standalone:\n    container_name: milvus-standalone\n    ......\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus.yaml:/milvus/configs/milvus.yaml\n","$ wget https://raw.githubusercontent.com/zilliztech/milvus-operator/main/config/samples/milvus_cluster_default.yaml -O milvus.yaml\n","mq:\n  type: kafka\n\nkafka:\n  brokerList: \"127.0.0.1:9093\"\n  saslUsername: kafka\n  saslPassword: pass123\n  saslMechanisms: PLAIN\n  securityProtocol: SASL_PLAINTEXT\n  readTimeout: 10 # read message timeout in seconds\n  ssl:\n    enabled: false # Whether to support kafka secure connection mode\n    tlsCert: # path to client's public key\n    tlsKey: # path to client's private key\n    tlsCACert: # file or directory path to CA certificate\n    tlsKeyPassword: # private key passphrase for use with private key, if any\n","$ docker compose up -d\n","#!/bin/bash\n#\n#\n# This scripts generates:\n#  - root CA certificate\n#  - server certificate and keystore\n#  - client keys\n#\n# https://cwiki.apache.org/confluence/display/KAFKA/Deploying+SSL+for+Kafka\n#\n\n\nif [[ \"$1\" == \"-k\" ]]; then\n    USE_KEYTOOL=1\n    shift\nelse\n    USE_KEYTOOL=0\nfi\n\nOP=\"$1\"\nCA_CERT=\"$2\"\nPFX=\"$3\"\nHOST=\"$4\"\n\nC=NN\nST=NN\nL=NN\nO=NN\nOU=NN\nCN=\"kafka-ssl\"\n \n\n# Password\nPASS=\"abcdefgh\"\n\n# Cert validity, in days\nVALIDITY=365\n\nset -e\n\nexport LC_ALL=C\n\nif [[ $OP == \"ca\" && ! -z \"$CA_CERT\" && ! -z \"$3\" ]]; then\n    CN=\"$3\"\n    openssl req -new -x509 -keyout ${CA_CERT}.key -out $CA_CERT -days $VALIDITY -passin \"pass:$PASS\" -passout \"pass:$PASS\" <<EOF\n${C}\n${ST}\n${L}\n${O}\n${OU}\n${CN}\n$USER@${CN}\n.\n.\nEOF\n\n\n\nelif [[ $OP == \"server\" && ! -z \"$CA_CERT\" && ! -z \"$PFX\" && ! -z \"$CN\" ]]; then\n\n    #Step 1\n    echo \"############ Generating key\"\n    keytool -storepass \"$PASS\" -keypass \"$PASS\" -keystore ${PFX}server.keystore.jks -alias localhost -validity $VALIDITY -genkey -keyalg RSA <<EOF\n$CN\n$OU\n$O\n$L\n$ST\n$C\nyes\nyes\nEOF\n        \n    #Step 2\n    echo \"############ Adding CA\"\n    keytool -storepass \"$PASS\" -keypass \"$PASS\" -keystore ${PFX}server.truststore.jks -alias CARoot -import -file $CA_CERT <<EOF\nyes\nEOF\n    \n    #Step 3\n    echo \"############ Export certificate\"\n    keytool -storepass \"$PASS\" -keypass \"$PASS\" -keystore ${PFX}server.keystore.jks -alias localhost -certreq -file ${PFX}cert-file\n\n    echo \"############ Sign certificate\"\n    openssl x509 -req -CA $CA_CERT -CAkey ${CA_CERT}.key -in ${PFX}cert-file -out ${PFX}cert-signed -days $VALIDITY -CAcreateserial -passin \"pass:$PASS\"\n    \n    \n    echo \"############ Import CA\"\n    keytool -storepass \"$PASS\" -keypass \"$PASS\" -keystore ${PFX}server.keystore.jks -alias CARoot -import -file $CA_CERT <<EOF\nyes\nEOF\n    \n    echo \"############ Import signed CA\"\n    keytool -storepass \"$PASS\" -keypass \"$PASS\" -keystore ${PFX}server.keystore.jks -alias localhost -import -file ${PFX}cert-signed    \n\n    \nelif [[ $OP == \"client\" && ! -z \"$CA_CERT\" && ! -z \"$PFX\" && ! -z \"$CN\" ]]; then\n\n    if [[ $USE_KEYTOOL == 1 ]]; then\n        echo \"############ Creating client truststore\"\n\n        [[ -f ${PFX}client.truststore.jks ]] || keytool -storepass \"$PASS\" -keypass \"$PASS\" -keystore ${PFX}client.truststore.jks -alias CARoot -import -file $CA_CERT <<EOF\nyes\nEOF\n\n        echo \"############ Generating key\"\n        keytool -storepass \"$PASS\" -keypass \"$PASS\" -keystore ${PFX}client.keystore.jks -alias localhost -validity $VALIDITY -genkey -keyalg RSA <<EOF\n$CN\n$OU\n$O\n$L\n$ST\n$C\nyes\nyes\nEOF\n        echo \"########### Export certificate\"\n        keytool -storepass \"$PASS\" -keystore ${PFX}client.keystore.jks -alias localhost -certreq -file ${PFX}cert-file\n\n        echo \"########### Sign certificate\"\n        openssl x509 -req -CA ${CA_CERT} -CAkey ${CA_CERT}.key -in ${PFX}cert-file -out ${PFX}cert-signed -days $VALIDITY -CAcreateserial -passin pass:$PASS        \n\n        echo \"########### Import CA\"\n        keytool -storepass \"$PASS\" -keypass \"$PASS\" -keystore ${PFX}client.keystore.jks -alias CARoot -import -file ${CA_CERT} <<EOF\nyes\nEOF\n\n        echo \"########### Import signed CA\"\n        keytool -storepass \"$PASS\" -keypass \"$PASS\" -keystore ${PFX}client.keystore.jks -alias localhost -import -file ${PFX}cert-signed\n\n    else\n        # Standard OpenSSL keys\n        echo \"############ Generating key\"\n        openssl genrsa -des3 -passout \"pass:$PASS\" -out ${PFX}client.key 2048 \n        \n        echo \"############ Generating request\"\n        openssl req -passin \"pass:$PASS\" -passout \"pass:$PASS\" -key ${PFX}client.key -new -out ${PFX}client.req \\\n                <<EOF\n$C\n$ST\n$L\n$O\n$OU\n$CN\n.\n$PASS\n.\nEOF\n\n        echo \"########### Signing key\"\n        openssl x509 -req -passin \"pass:$PASS\" -in ${PFX}client.req -CA $CA_CERT -CAkey ${CA_CERT}.key -CAcreateserial -out ${PFX}client.pem -days $VALIDITY\n\n    fi\n\n    \n    \n\nelse\n    echo \"Usage: $0 ca <ca-cert-file> <CN>\"\n    echo \"       $0 [-k] server|client <ca-cert-file> <file_prefix> <hostname>\"\n    echo \"\"\n    echo \"       -k = Use keytool/Java Keystore, else standard SSL keys\"\n    exit 1\nfi\n","$ ./gen-ssl-certs.sh ca ca-cert kafka-ssl\n","$ ./gen-ssl-certs.sh -k server ca-cert kafka_ kafka-ssl\n","$ ./gen-ssl-certs.sh client ca-cert kafka_ kafka-client\n","$ ls -l my_secrets\ntotal 12\n-rw-rw-r-- 1 1.4K Feb 26 11:53 ca-cert\n-rw------- 1 1.9K Feb 26 11:53 ca-cert.key\n-rw-rw-r-- 1   41 Feb 26 11:54 ca-cert.srl\n-rw-rw-r-- 1    9 Feb 26 12:08 cert_creds\n-rwxrwxr-x 1 3.9K Feb 26 17:26 gen-ssl-certs.sh\n-rw-rw-r-- 1 1.4K Feb 26 11:54 kafka_cert-file\n-rw-rw-r-- 1 1.4K Feb 26 11:54 kafka_cert-signed\n-rw------- 1 1.8K Feb 26 11:54 kafka_client.key\n-rw-rw-r-- 1 1.2K Feb 26 11:54 kafka_client.pem\n-rw-rw-r-- 1 1013 Feb 26 11:54 kafka_client.req\n-rw-rw-r-- 1 5.6K Feb 26 11:54 kafka_server.keystore.jks\n-rw-rw-r-- 1 1.4K Feb 26 11:54 kafka_server.truststore.jks\n","version: '3'\nservices:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:latest\n    container_name: zookeeper\n    hostname: zookeeper\n    ports:\n      - 2181:2181\n    environment:\n      ZOOKEEPER_SERVER_ID: 1\n      ZOOKEEPER_CLIENT_PORT: 2181\n\n  kafka-ssl:\n    image: confluentinc/cp-kafka:latest\n    container_name: kafka-ssl\n    hostname: kafka-ssl\n    ports:\n      - 9093:9093\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'\n      ZOOKEEPER_SASL_ENABLED: \"false\"\n      KAFKA_ADVERTISED_LISTENERS: SSL://kafka-ssl:9093\n      KAFKA_SSL_KEYSTORE_FILENAME: kafka_server.keystore.jks\n      KAFKA_SSL_KEYSTORE_CREDENTIALS: cert_creds\n      KAFKA_SSL_KEY_CREDENTIALS: cert_creds\n      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka_server.truststore.jks\n      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: cert_creds\n      KAFKA_SSL_CLIENT_AUTH: 'required'\n      KAFKA_SECURITY_PROTOCOL: SSL\n      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/my_secrets:/etc/kafka/secrets\n","$ docker compose up -d\n","version: '3.5'\n\nservices:\n  etcd:\n    ......\n    \n  minio:\n    ......\n      \n  standalone:\n    container_name: milvus-standalone\n    ......\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus.yaml:/milvus/configs/milvus.yaml\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/my_secrets:/milvus/secrets\n","$ wget https://raw.githubusercontent.com/zilliztech/milvus-operator/main/config/samples/milvus_cluster_default.yaml -O milvus.yaml\n","mq:\n  type: kafka\n\nkafka:\n  brokerList: \"127.0.0.1:9093\"\n  saslUsername: \n  saslPassword: \n  saslMechanisms: \n  securityProtocol: SSL\n  readTimeout: 10 # read message timeout in seconds\n  ssl:\n    enabled: true # Whether to support kafka secure connection mode\n    tlsCert: /milvus/secrets/kafka_client.pem # path to client's public key\n    tlsKey: /milvus/secrets/kafka_client.key # path to client's private key\n    tlsCACert: /milvus/secrets/ca-cert # file or directory path to CA certificate\n    tlsKeyPassword: abcdefgh # private key passphrase for use with private key, if any\n","$ docker compose up -d\n","version: '3'\nservices:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:latest\n    container_name: zookeeper\n    hostname: zookeeper\n    ports:\n      - 2181:2181\n    environment:\n      ZOOKEEPER_SERVER_ID: 1\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n\n\n  kafka-ssl:\n    image: confluentinc/cp-kafka:latest\n    container_name: kafka-ssl\n    hostname: kafka-ssl\n    ports:\n      - 9093:9093\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'\n      ZOOKEEPER_SASL_ENABLED: \"false\"\n      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://kafka-ssl:9093\n      KAFKA_SSL_KEYSTORE_FILENAME: kafka_server.keystore.jks\n      KAFKA_SSL_KEYSTORE_CREDENTIALS: cert_creds\n      KAFKA_SSL_KEY_CREDENTIALS: cert_creds\n      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka_server.truststore.jks\n      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: cert_creds\n      KAFKA_SSL_CLIENT_AUTH: 'required'\n      KAFKA_SECURITY_PROTOCOL: SASL_SSL\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SASL_SSL:SASL_SSL\n      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_SSL\n      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN\n      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN\n      KAFKA_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 1\n      KAFKA_OPTS: \"-Djava.security.auth.login.config=/etc/kafka/configs/kafka_server_jass.conf\"\n\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/my_secrets:/etc/kafka/secrets\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/kafka_server_jass.conf:/etc/kafka/configs/kafka_server_jass.conf\n","$ docker compose up -d\n","version: '3.5'\n\nservices:\n  etcd:\n    ......\n    \n  minio:\n    ......\n    \n  standalone:\n    container_name: milvus-standalone\n    ......\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus.yaml:/milvus/configs/milvus.yaml\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/my_secrets:/milvus/secrets\n","$ wget https://raw.githubusercontent.com/zilliztech/milvus-operator/main/config/samples/milvus_cluster_default.yaml -O milvus.yaml\n","mq:\n  type: kafka\n\nkafka:\n  brokerList: \"127.0.0.1:9093\"\n  saslUsername: kafka\n  saslPassword: pass123\n  saslMechanisms: PLAIN\n  securityProtocol: SASL_SSL\n  readTimeout: 10 # read message timeout in seconds\n  ssl:\n    enabled: true # Whether to support kafka secure connection mode\n    tlsCert: /milvus/secrets/kafka_client.pem # path to client's public key\n    tlsKey: /milvus/secrets/kafka_client.key # path to client's private key\n    tlsCACert: /milvus/secrets/ca-cert # file or directory path to CA certificate\n    tlsKeyPassword: abcdefgh # private key passphrase for use with private key, if any\n"],"headingContent":"Connecting to Kafka with SASL/SSL","anchorList":[{"label":"使用 SASL/SSL 連線到 Kafka","href":"Connecting-to-Kafka-with-SASLSSL","type":1,"isActive":false},{"label":"不使用 SASL/SSL 連接 Milvus 到 Kafka","href":"Connect-Milvus-to-Kafka-Without-SASLSSL","type":2,"isActive":false},{"label":"使用 SASL/PLAIN Alone 連接 Milus 到 Kafka","href":"Connect-Milus-to-Kafka-with-SASLPLAIN-Alone","type":2,"isActive":false},{"label":"使用 SSL 獨立連接 Milvus 到 Kafka","href":"Connect-Milvus-to-Kafka-with-SSL-Alone","type":2,"isActive":false},{"label":"使用 SASL/PLAIN 和 SSL 連接 Milvus 到 Kafka","href":"Connect-Milvus-to-Kafka-with-SASLPLAIN-and-SSL","type":2,"isActive":false}]}