{"codeList":["$ pip install openai pymilvus datasets tqdm\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","from openai import OpenAI\n\nopenai_client = OpenAI()\n","COLLECTION_NAME = \"movie_search\"\nDIMENSION = 1536\n\nBATCH_SIZE = 1000\n","from pymilvus import MilvusClient\n\n# Connect to Milvus Database\nclient = MilvusClient(\"./milvus_demo.db\")\n","# Remove collection if it already exists\nif client.has_collection(COLLECTION_NAME):\n    client.drop_collection(COLLECTION_NAME)\n","from pymilvus import DataType\n\n# Create collection which includes the id, title, and embedding.\n\n# 1. Create schema\nschema = MilvusClient.create_schema(\n    auto_id=True,\n    enable_dynamic_field=False,\n)\n\n# 2. Add fields to schema\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"title\", datatype=DataType.VARCHAR, max_length=64000)\nschema.add_field(field_name=\"type\", datatype=DataType.VARCHAR, max_length=64000)\nschema.add_field(field_name=\"release_year\", datatype=DataType.INT64)\nschema.add_field(field_name=\"rating\", datatype=DataType.VARCHAR, max_length=64000)\nschema.add_field(field_name=\"description\", datatype=DataType.VARCHAR, max_length=64000)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=DIMENSION)\n\n# 3. Create collection with the schema\nclient.create_collection(collection_name=COLLECTION_NAME, schema=schema)\n","# Create the index on the collection and load it.\n\n# 1. Prepare index parameters\nindex_params = client.prepare_index_params()\n\n\n# 2. Add an index on the embedding field\nindex_params.add_index(\n    field_name=\"embedding\", metric_type=\"IP\", index_type=\"AUTOINDEX\", params={}\n)\n\n\n# 3. Create index\nclient.create_index(collection_name=COLLECTION_NAME, index_params=index_params)\n\n\n# 4. Load collection\nclient.load_collection(collection_name=COLLECTION_NAME, replica_number=1)\n","from datasets import load_dataset\n\ndataset = load_dataset(\"hugginglearners/netflix-shows\", split=\"train\")\n","def emb_texts(texts):\n    res = openai_client.embeddings.create(input=texts, model=\"text-embedding-3-small\")\n    return [res_data.embedding for res_data in res.data]\n","from tqdm import tqdm\n\n# batch (data to be inserted) is a list of dictionaries\nbatch = []\n\n# Embed and insert in batches\nfor i in tqdm(range(0, len(dataset))):\n    batch.append(\n        {\n            \"title\": dataset[i][\"title\"] or \"\",\n            \"type\": dataset[i][\"type\"] or \"\",\n            \"release_year\": dataset[i][\"release_year\"] or -1,\n            \"rating\": dataset[i][\"rating\"] or \"\",\n            \"description\": dataset[i][\"description\"] or \"\",\n        }\n    )\n\n    if len(batch) % BATCH_SIZE == 0 or i == len(dataset) - 1:\n        embeddings = emb_texts([item[\"description\"] for item in batch])\n\n        for item, emb in zip(batch, embeddings):\n            item[\"embedding\"] = emb\n\n        client.insert(collection_name=COLLECTION_NAME, data=batch)\n        batch = []\n","import textwrap\n\n\ndef query(query, top_k=5):\n    text, expr = query\n\n    res = client.search(\n        collection_name=COLLECTION_NAME,\n        data=emb_texts(text),\n        filter=expr,\n        limit=top_k,\n        output_fields=[\"title\", \"type\", \"release_year\", \"rating\", \"description\"],\n        search_params={\n            \"metric_type\": \"IP\",\n            \"params\": {},\n        },\n    )\n\n    print(\"Description:\", text, \"Expression:\", expr)\n\n    for hit_group in res:\n        print(\"Results:\")\n        for rank, hit in enumerate(hit_group, start=1):\n            entity = hit[\"entity\"]\n\n            print(\n                f\"\\tRank: {rank} Score: {hit['distance']:} Title: {entity.get('title', '')}\"\n            )\n            print(\n                f\"\\t\\tType: {entity.get('type', '')} \"\n                f\"Release Year: {entity.get('release_year', '')} \"\n                f\"Rating: {entity.get('rating', '')}\"\n            )\n            description = entity.get(\"description\", \"\")\n            print(textwrap.fill(description, width=88))\n            print()\n\n\nmy_query = (\"movie about a fluffly animal\", 'release_year < 2019 and rating like \"PG%\"')\n\nquery(my_query)\n"],"headingContent":"Movie Recommendation with Milvus","anchorList":[{"label":"使用 Milvus 推薦電影","href":"Movie-Recommendation-with-Milvus","type":1,"isActive":false},{"label":"相依性與環境","href":"Dependencies-and-Environment","type":2,"isActive":false},{"label":"初始化 OpenAI 用戶端和 Milvus","href":"Initialize-OpenAI-client-and-Milvus","type":2,"isActive":false},{"label":"資料集","href":"Dataset","type":2,"isActive":false},{"label":"插入資料","href":"Insert-the-Data","type":2,"isActive":false},{"label":"查詢資料庫","href":"Query-the-Database","type":2,"isActive":false}]}