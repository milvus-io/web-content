{"codeList":["openssl version\n","sudo apt install openssl\n","mkdir cert && cd cert\ntouch gen.sh\n","#!/usr/bin/env sh\n# your variables\nCountry=\"US\"\nState=\"CA\"\nLocation=\"Redwood City\"\nOrganization=\"zilliz\"\nOrganizationUnit=\"devops\"\nCommonName=\"localhost\"\nExpireDays=3650 # 10 years\n\n# generate private key for ca, server and client\nopenssl genpkey -quiet -algorithm rsa:2048 -out ca.key\nopenssl genpkey -quiet -algorithm rsa:2048 -out server.key\nopenssl genpkey -quiet -algorithm rsa:2048 -out client.key\n\n# create a new ca certificate\nopenssl req -x509 -new -nodes -key ca.key -sha256 -days 36500 -out ca.pem \\\n  -subj \"/C=$Country/ST=$State/L=$Location/O=$Organization/OU=$OrganizationUnit/CN=$CommonName\"\n\n# prepare extension config for signing certificates\necho '[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS = '$CommonName > openssl.cnf\n\n# sign server certificate with ca\nopenssl req -new -key server.key\\\n  -subj \"/C=$Country/ST=$State/L=$Location/O=$Organization/OU=$OrganizationUnit/CN=$CommonName\"\\\n  | openssl x509 -req -days $ExpireDays -out server.pem -CA ca.pem -CAkey ca.key -CAcreateserial \\\n    -extfile ./openssl.cnf -extensions v3_req\n\n# sign client certificate with ca\nopenssl req -new -key client.key\\\n  -subj \"/C=$Country/ST=$State/L=$Location/O=$Organization/OU=$OrganizationUnit/CN=$CommonName\"\\\n  | openssl x509 -req -days $ExpireDays -out client.pem -CA ca.pem -CAkey ca.key -CAcreateserial \\\n    -extfile ./openssl.cnf -extensions v3_req\n\n","chmod +x gen.sh\n./gen.sh\n","#!/usr/bin/env sh\n# your variables\nCountry=\"US\"\nState=\"CA\"\nLocation=\"Redwood City\"\nOrganization=\"zilliz\"\nOrganizationUnit=\"devops\"\nCommonName=\"localhost\"\nExpireDays=3650 # 10 years\n\n# generate private key for ca, server and client\nopenssl genpkey -quiet -algorithm rsa:2048 -out server.key\nopenssl genpkey -quiet -algorithm rsa:2048 -out client.key\n\n# prepare extension config for signing certificates\necho '[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS = '$CommonName > openssl.cnf\n\n# sign server certificate with ca\nopenssl req -new -key server.key\\\n  -subj \"/C=$Country/ST=$State/L=$Location/O=$Organization/OU=$OrganizationUnit/CN=$CommonName\"\\\n  | openssl x509 -req -days $ExpireDays -out server.pem -CA ca.pem -CAkey ca.key -CAcreateserial \\\n    -extfile ./openssl.cnf -extensions v3_req\n\n# sign client certificate with ca\nopenssl req -new -key client.key\\\n  -subj \"/C=$Country/ST=$State/L=$Location/O=$Organization/OU=$OrganizationUnit/CN=$CommonName\"\\\n  | openssl x509 -req -days $ExpireDays -out client.pem -CA ca.pem -CAkey ca.key -CAcreateserial \\\n    -extfile ./openssl.cnf -extensions v3_req\n","chmod +x renew.sh\n./renew.sh\n","proxy:\n  http:\n    # for now milvus do not support config restful on same port with grpc\n    # so we set to 8080, grpc will still use 19530\n    port: 8080 \ntls:\n  serverPemPath: /milvus/tls/server.pem\n  serverKeyPath: /milvus/tls/server.key\n  caPemPath: /milvus/tls/ca.pem\n\ncommon:\n  security:\n    tlsMode: 1\n","internaltls:\n  serverPemPath: /milvus/tls/server.pem\n  serverKeyPath: /milvus/tls/server.key\n  caPemPath: /milvus/tls/ca.pem\n\ncommon:\n  security:\n    internaltlsEnabled: true \n","├── docker-compose.yml\n├── milvus.yaml\n└── tls\n     ├── server.pem\n     ├── server.key\n     └── ca.pem\n","  standalone:\n    container_name: milvus-standalone\n    image: milvusdb/milvus:latest\n    command: [\"milvus\", \"run\", \"standalone\"]\n    security_opt:\n    - seccomp:unconfined\n    environment:\n      ETCD_ENDPOINTS: etcd:2379\n      MINIO_ADDRESS: minio:9000\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/tls:/milvus/tls\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus.yaml:/milvus/configs/milvus.yaml\n","sudo docker compose up -d\n","├── milvus.yaml (to be created later)\n├── server.pem\n├── server.key\n└── ca.pem\n","kubectl create secret generic certs --from-file=server.pem --from-file=server.key --from-file=ca.pem\n","apiVersion: milvus.io/v1beta1\nkind: Milvus\nmetadata:\n  name: my-release\nspec:\n  config:\n    proxy:\n      http:\n        # for now not support config restful on same port with grpc\n        # so we set to 8080, grpc will still use 19530\n        port: 8080 \n    common:\n      security:\n        tlsMode: 1 # tlsMode for external service 1 for one-way TLS, 2 for Mutual TLS, 0 for disable\n    tls:\n      serverPemPath: /certs/server.pem\n      serverKeyPath: /certs/server.key\n      caPemPath: /certs/ca.pem\n  components:\n    # mount the certs secret to the milvus container\n    volumes:\n      - name: certs\n        secret:\n          secretName: certs\n    volumeMounts:\n      - name: certs\n        mountPath: /certs\n        readOnly: true\n","apiVersion: milvus.io/v1beta1\nkind: Milvus\nmetadata:\n  name: my-release\nspec:\n  config:\n    proxy:\n      http:\n        # for now not support config restful on same port with grpc\n        # so we set to 8080, grpc will still use 19530\n        port: 8080 \n    common:\n      security:\n        internaltlsEnabled: true # whether to enable internal tls\n    # Configure tls certificates path for internal service\n    internaltls:\n      serverPemPath: /certs/server.pem\n      serverKeyPath: /certs/server.key\n      caPemPath: /certs/ca.pem\n      sni: localhost # the CommonName in your certificates\n  components:\n    # mount the certs secret to the milvus container\n    volumes:\n      - name: certs\n        secret:\n          secretName: certs\n    volumeMounts:\n      - name: certs\n        mountPath: /certs\n        readOnly: true\n","kubectl create -f milvus.yaml\n","├── values.yaml (to be created later)\n├── server.pem\n├── server.key\n└── ca.pem\n","kubectl create secret generic certs --from-file=server.pem --from-file=server.key --from-file=ca.pem\n","extraConfigFiles:\n  user.yaml: |+\n    proxy:\n      http:\n        # for now not support config restful on same port with grpc\n        # so we set to 8080, grpc will still use 19530\n        port: 8080 \n    common:\n      security:\n        tlsMode: 1 # tlsMode for external service 1 means set to 2 to enable Mutual TLS\n    # Configure tls certificates path for external service\n    tls:\n      serverPemPath: /certs/server.pem\n      serverKeyPath: /certs/server.key\n      caPemPath: /certs/ca.pem\n# mount the certs secret to the milvus container\nvolumes:\n  - name: certs\n    secret:\n      secretName: certs\nvolumeMounts:\n  - name: certs\n    mountPath: /certs\n    readOnly: true\n","extraConfigFiles:\n  user.yaml: |+\n    common:\n      security:\n        internaltlsEnabled: true # whether to enable internal tls\n    # Configure tls certificates path for internal service\n    internaltls:\n      serverPemPath: /certs/server.pem\n      serverKeyPath: /certs/server.key\n      caPemPath: /certs/ca.pem\n      sni: localhost\n# mount the certs secret to the milvus container\nvolumes:\n  - name: certs\n    secret:\n      secretName: certs\nvolumeMounts:\n  - name: certs\n    mountPath: /certs\n    readOnly: true\n","helm repo add milvus https://zilliztech.github.io/milvus-helm/\nhelm repo update milvus\nhelm install my-release milvus/milvus -f values.yaml\n","[...date time...] [INFO] [utils/util.go:56] [\"Internal TLS Enabled\"] [value=true]\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"https://localhost:19530\",\n    secure=True,\n    server_pem_path=\"path_to/server.pem\",\n    server_name=\"localhost\"\n)\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"https://localhost:19530\",\n    secure=True,\n    client_pem_path=\"path_to/client.pem\",\n    client_key_path=\"path_to/client.key\",\n    ca_pem_path=\"path_to/ca.pem\",\n    server_name=\"localhost\"\n)\n","curl --cacert path_to/ca.pem https://localhost:8080/v2/vectordb/collections/list\n","curl --cert path_to/client.pem --key path_to/client.key --cacert path_to/ca.pem https://localhost:8080/v2/vectordb/collections/list\n"],"headingContent":"Encryption in Transit","anchorList":[{"label":"Verschlüsselung bei der Übermittlung","href":"Encryption-in-Transit","type":1,"isActive":false},{"label":"Erstellen Sie Ihr eigenes Zertifikat","href":"Create-your-own-certificate","type":2,"isActive":false},{"label":"Einrichten eines Milvus-Servers mit TLS","href":"Set-up-a-Milvus-server-with-TLS","type":2,"isActive":false},{"label":"Überprüfen Sie, ob internes TLS aktiviert ist","href":"Verify-Internal-TLS-enabled","type":2,"isActive":false},{"label":"Verbindung zum Milvus-Server mit TLS","href":"Connect-to-the-Milvus-server-with-TLS","type":2,"isActive":false},{"label":"Verbinden mit dem Milvus RESTful Server mit TLS","href":"Connect-to-the-Milvus-RESTful-server-with-TLS","type":2,"isActive":false}]}