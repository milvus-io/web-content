{"codeList":["from pymilvus import connections, Collection\n\nconnections.connect(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\n# create iterator\nquery_vectors = [\n    [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]]\n\ncollection = Collection(\"iterator_collection\")\n\niterator = collection.search_iterator(\n    data=query_vectors,\n    anns_field=\"vector\",\n    param={\"metric_type\": \"L2\", \"params\": {\"nprobe\": 16}},\n    # highlight-next-line\n    batch_size=50,\n    output_fields=[\"color\"],\n    # highlight-next-line\n    limit=20000\n)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.orm.iterator.SearchIterator;\nimport io.milvus.v2.common.IndexParam.MetricType;\nimport io.milvus.v2.service.vector.request.data.FloatVec;\n\nimport java.util.*;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n\nFloatVec queryVector = new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f});\nSearchIterator searchIterator = client.searchIterator(SearchIteratorReq.builder()\n        .collectionName(\"iterator_collection\")\n        .vectors(Collections.singletonList(queryVector))\n        .vectorFieldName(\"vector\")\n        .batchSize(500L)\n        .outputFields(Lists.newArrayList(\"color\"))\n        .topK(20000)\n        .metricType(IndexParam.MetricType.COSINE)\n        .build());\n","// go\n","import { MilvusClient } from '@zilliz/milvus2-sdk-node';\n\nconst milvusClient = new MilvusClient({\n  address: 'http://localhost:19530',\n  token: 'root:Milvus',\n});\n\nconst queryVectors = [\n[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],\n];\nconst collectionName = 'iterator_collection';\n\nconst iterator = milvusClient.searchIterator({\n    collection_name: collectionName,\n    vectors: queryVectors,\n    anns_field: 'vector',\n    params: { metric_type: 'L2', params: { nprobe: 16 } },\n    batch_size: 50,\n    output_fields: ['color'],\n    limit: 20000,\n});\n\n","# restful\n","results = []\n\nwhile True:\n    # highlight-next-line\n    result = iterator.next()\n    if not result:\n        # highlight-next-line\n        iterator.close()\n        break\n    \n    for hit in result:\n        results.append(hit.to_dict())\n","import io.milvus.response.QueryResultsWrapper;\n\nwhile (true) {\n    List<QueryResultsWrapper.RowRecord> res = searchIterator.next();\n    if (res.isEmpty()) {\n        searchIterator.close();\n        break;\n    }\n\n    for (QueryResultsWrapper.RowRecord record : res) {\n        System.out.println(record);\n    }\n}\n","// go\n","for await (const result of iterator) {\n    console.log(result);\n}\n","# restful\n"],"headingContent":"Search Iterator","anchorList":[{"label":"Such-Iterator","href":"Search-Iterator","type":1,"isActive":false},{"label":"Ãœberblick","href":"Overview","type":2,"isActive":false},{"label":"SearchIterator erstellen","href":"Create-SearchIterator","type":2,"isActive":false},{"label":"SearchIterator verwenden","href":"Use-SearchIterator","type":2,"isActive":false}]}