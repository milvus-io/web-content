{"codeList":["from pymilvus import MilvusClient, DataType\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\nschema = client.create_schema()\n\n# Define primary field with AutoID enabled\n# highlight-start\nschema.add_field(\n    field_name=\"id\", # Primary field name\n    is_primary=True,\n    auto_id=True,  # Milvus generates IDs automatically; Defaults to False\n    datatype=DataType.INT64\n)\n# highlight-end\n\n# Define the other fields\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=4) # Vector field\nschema.add_field(field_name=\"category\", datatype=DataType.VARCHAR, max_length=1000) # Scalar field of the VARCHAR type\n\n# Create the collection\nif client.has_collection(\"demo_autoid\"):\n    client.drop_collection(\"demo_autoid\")\nclient.create_collection(collection_name=\"demo_autoid\", schema=schema)\n","// java\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst client = new MilvusClient({\n  address: \"localhost:19530\",\n});\n\n// Define schema fields\nconst schema = [\n  {\n    name: \"id\",\n    description: \"Primary field\",\n    data_type: DataType.Int64,\n    is_primary_key: true,\n    autoID: true, // Milvus generates IDs automatically\n  },\n  {\n    name: \"embedding\",\n    description: \"Vector field\",\n    data_type: DataType.FloatVector,\n    dim: 4,\n  },\n  {\n    name: \"category\",\n    description: \"Scalar field\",\n    data_type: DataType.VarChar,\n    max_length: 1000,\n  },\n];\n\n// Create the collection\nawait client.createCollection({\n  collection_name: \"demo_autoid\",\n  fields: schema,\n});\n\n","// go\n","# restful\n","data = [\n    {\"embedding\": [0.1, 0.2, 0.3, 0.4], \"category\": \"book\"},\n    {\"embedding\": [0.2, 0.3, 0.4, 0.5], \"category\": \"toy\"},\n]\n\nres = client.insert(collection_name=\"demo_autoid\", data=data)\nprint(\"Generated IDs:\", res.get(\"ids\"))\n\n# Output example:\n# Generated IDs: [461526052788333649, 461526052788333650]\n","// java\n","const data = [\n    {\"embedding\": [0.1, 0.2, 0.3, 0.4], \"category\": \"book\"},\n    {\"embedding\": [0.2, 0.3, 0.4, 0.5], \"category\": \"toy\"},\n];\n\nconst res = await client.insert({\n    collection_name: \"demo_autoid\",\n    fields_data: data,\n});\n\nconsole.log(res);\n","// go\n","# restful\n","from pymilvus import MilvusClient, DataType\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\nschema = client.create_schema()\n\n# Define the primary field without AutoID\n# highlight-start\nschema.add_field(\n    field_name=\"product_id\",\n    is_primary=True,\n    auto_id=False,  # You'll provide IDs manually at data ingestion\n    datatype=DataType.VARCHAR,\n    max_length=100 # Required when datatype is VARCHAR\n)\n# highlight-end\n\n# Define the other fields\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=4) # Vector field\nschema.add_field(field_name=\"category\", datatype=DataType.VARCHAR, max_length=1000) # Scalar field of the VARCHAR type\n\n# Create the collection\nif client.has_collection(\"demo_manual_ids\"):\n    client.drop_collection(\"demo_manual_ids\")\nclient.create_collection(collection_name=\"demo_manual_ids\", schema=schema)\n","// java\n","\nimport { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst client = new MilvusClient({\n  address: \"localhost:19530\",\n  username: \"username\",\n  password: \"Aa12345!!\",\n});\n\nconst schema = [\n  {\n    name: \"product_id\",\n    data_type: DataType.VARCHAR,\n    is_primary_key: true,\n    autoID: false,\n  },\n  {\n    name: \"embedding\",\n    data_type: DataType.FLOAT_VECTOR,\n    dim: 4,\n  },\n  {\n    name: \"category\",\n    data_type: DataType.VARCHAR,\n    max_length: 1000,\n  },\n];\n\nconst res = await client.createCollection({\n  collection_name: \"demo_autoid\",\n  schema: schema,\n});\n\n","// go\n","# restful\n","# Each entity must contain the primary field `product_id`\ndata = [\n    {\"product_id\": \"PROD-001\", \"embedding\": [0.1, 0.2, 0.3, 0.4], \"category\": \"book\"},\n    {\"product_id\": \"PROD-002\", \"embedding\": [0.2, 0.3, 0.4, 0.5], \"category\": \"toy\"},\n]\n\nres = client.insert(collection_name=\"demo_manual_ids\", data=data)\nprint(\"Generated IDs:\", res.get(\"ids\"))\n\n# Output example:\n# Generated IDs: ['PROD-001', 'PROD-002']\n","// java\n","\nconst data = [\n    {\"product_id\": \"PROD-001\", \"embedding\": [0.1, 0.2, 0.3, 0.4], \"category\": \"book\"},\n    {\"product_id\": \"PROD-002\", \"embedding\": [0.2, 0.3, 0.4, 0.5], \"category\": \"toy\"},\n];\n\nconst insert = await client.insert({\n    collection_name: \"demo_autoid\",\n    fields_data: data,\n});\n\nconsole.log(insert);\n","// go\n","# restful\n","common:\n  clusterID: 3   # Must be unique across all clusters (Range: 0-7)\n","[sign_bit][cluster_id][physical_ts][logical_ts]\n"],"headingContent":"Primary Field & AutoID","anchorList":[{"label":"Primärfeld und AutoID","href":"Primary-Field--AutoID","type":1,"isActive":false},{"label":"Was ist ein Primärfeld?","href":"What-is-a-primary-field","type":2,"isActive":false},{"label":"Unterstützte Datentypen","href":"Supported-data-types","type":2,"isActive":false},{"label":"Wählen Sie zwischen AutoID und manuellen IDs","href":"Choose-between-AutoID-and-Manual-IDs","type":2,"isActive":false},{"label":"Schnellstart: AutoID verwenden","href":"Quickstart-Use-AutoID","type":2,"isActive":false},{"label":"Schritt 1: Erstellen Sie eine Sammlung mit AutoID","href":"Step-1-Create-a-collection-with-AutoID","type":3,"isActive":false},{"label":"Schritt 2: Daten einfügen","href":"Step-2-Insert-Data","type":3,"isActive":false},{"label":"Manuelle IDs verwenden","href":"Use-manual-IDs","type":2,"isActive":false},{"label":"Schritt 1: Erstellen Sie eine Sammlung ohne AutoID","href":"Step-1-Create-a-collection-without-AutoID","type":3,"isActive":false},{"label":"Schritt 2: Fügen Sie Daten mit Ihren IDs ein","href":"Step-2-Insert-data-with-your-IDs","type":3,"isActive":false},{"label":"Erweiterte Nutzung","href":"Advanced-usage","type":2,"isActive":false},{"label":"Migrieren Sie Daten mit vorhandenen AutoIDs","href":"Migrate-data-with-existing-AutoIDs","type":3,"isActive":false},{"label":"Globale AutoID Eindeutigkeit über Cluster hinweg sicherstellen","href":"Ensure-global-AutoID-uniqueness-across-clusters","type":3,"isActive":false},{"label":"Referenz: Wie AutoID funktioniert","href":"Reference-How-AutoID-works","type":2,"isActive":false}]}