{"codeList":["analyzer_params = {\n    \"tokenizer\": \"standard\",\n    \"filter\": [\"asciifolding\"],\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"tokenizer\", \"standard\");\nanalyzerParams.put(\"filter\", Collections.singletonList(\"asciifolding\"));\n","const analyzer_params = {\n    \"tokenizer\": \"standard\",\n    \"filter\": [\"asciifolding\"],\n};\n","analyzerParams = map[string]any{\"tokenizer\": \"standard\", \"filter\": []any{\"asciifolding\"}}\n","# restful\nanalyzerParams='{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    \"asciifolding\"\n  ]\n}'\n\n","analyzer_params = {\n    \"tokenizer\": \"standard\",\n    \"filter\": [\"asciifolding\"],\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"tokenizer\", \"standard\");\nanalyzerParams.put(\"filter\", Collections.singletonList(\"asciifolding\"));\n","// javascript\n","analyzerParams = map[string]any{\"tokenizer\": \"standard\", \"filter\": []any{\"asciifolding\"}}\n","# restful\n","from pymilvus import (\n    MilvusClient,\n)\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\n# Sample text to analyze\nsample_text = \"Café Möller serves crème brûlée and piñatas.\"\n\n# Run the standard analyzer with the defined configuration\nresult = client.run_analyzer(sample_text, analyzer_params)\nprint(\"Standard analyzer output:\", result)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.RunAnalyzerReq;\nimport io.milvus.v2.service.vector.response.RunAnalyzerResp;\n\nConnectConfig config = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build();\nMilvusClientV2 client = new MilvusClientV2(config);\n\nList<String> texts = new ArrayList<>();\ntexts.add(\"Café Möller serves crème brûlée and piñatas.\");\n\nRunAnalyzerResp resp = client.runAnalyzer(RunAnalyzerReq.builder()\n        .texts(texts)\n        .analyzerParams(analyzerParams)\n        .build());\nList<RunAnalyzerResp.AnalyzerResult> results = resp.getResults();\n","// javascript\n","// go\n","# restful\n","['Cafe', 'Moller', 'serves', 'creme', 'brulee', 'and', 'pinatas']\n"],"headingContent":"ASCII folding","anchorList":[{"label":"ASCII-Faltung","href":"ASCII-folding","type":1,"isActive":false},{"label":"Konfiguration","href":"Configuration","type":2,"isActive":false},{"label":"Beispiele","href":"Examples","type":2,"isActive":false}]}