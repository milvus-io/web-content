{"codeList":["analyzer_params = {\n    \"tokenizer\": \"standard\",\n    \"filter\": [\"lowercase\"]\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"tokenizer\", \"standard\");\nanalyzerParams.put(\"filter\", Collections.singletonList(\"lowercase\"));\n","const analyzer_params = {\n    \"tokenizer\": \"standard\",\n    \"filter\": [\"lowercase\"]\n};\n","analyzerParams := map[string]any{\"tokenizer\": \"standard\", \"filter\": []any{\"lowercase\"}}\n","# restful\nanalyzerParams='{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    \"lowercase\"\n  ]\n}'\n","analyzer_params = {\n    \"type\": \"standard\", # Specifies the standard analyzer type\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"type\", \"standard\");\n","const analyzer_params = {\n    \"type\": \"standard\", // Specifies the standard analyzer type\n}\n","analyzerParams = map[string]any{\"type\": \"standard\"}\n","# restful\nanalyzerParams='{\n  \"type\": \"standard\"\n}'\n","analyzer_params = {\n    \"type\": \"standard\", # Specifies the standard analyzer type\n    \"stop_words\", [\"of\"] # Optional: List of words to exclude from tokenization\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"type\", \"standard\");\nanalyzerParams.put(\"stop_words\", Collections.singletonList(\"of\"));\n","analyzer_params = {\n    \"type\": \"standard\", // Specifies the standard analyzer type\n    \"stop_words\", [\"of\"] // Optional: List of words to exclude from tokenization\n}\n","analyzerParams = map[string]any{\"type\": \"standard\", \"stop_words\": []string{\"of\"}}\n","# restful\n","analyzer_params = {\n    \"type\": \"standard\",  # Standard analyzer configuration\n    \"stop_words\": [\"for\"] # Optional: Custom stop words parameter\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"type\", \"standard\");\nanalyzerParams.put(\"stop_words\", Collections.singletonList(\"for\"));\n","// javascript\n","analyzerParams = map[string]any{\"type\": \"standard\", \"stop_words\": []string{\"for\"}}\n","# restful\nanalyzerParams='{\n  \"type\": \"standard\",\n  \"stop_words\": [\n    \"of\"\n  ]\n}'\n","from pymilvus import (\n    MilvusClient,\n)\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\n# Sample text to analyze\nsample_text = \"The Milvus vector database is built for scale!\"\n\n# Run the standard analyzer with the defined configuration\nresult = client.run_analyzer(sample_text, analyzer_params)\nprint(\"Standard analyzer output:\", result)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.RunAnalyzerReq;\nimport io.milvus.v2.service.vector.response.RunAnalyzerResp;\n\nConnectConfig config = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build();\nMilvusClientV2 client = new MilvusClientV2(config);\n\nList<String> texts = new ArrayList<>();\ntexts.add(\"The Milvus vector database is built for scale!\");\n\nRunAnalyzerResp resp = client.runAnalyzer(RunAnalyzerReq.builder()\n        .texts(texts)\n        .analyzerParams(analyzerParams)\n        .build());\nList<RunAnalyzerResp.AnalyzerResult> results = resp.getResults();\n","// javascript\n","// go\n","# restful\n","Standard analyzer output: ['the', 'milvus', 'vector', 'database', 'is', 'built', 'scale']\n"],"headingContent":"Standard Analyzer","anchorList":[{"label":"Standard-Analysator","href":"Standard-Analyzer","type":1,"isActive":false},{"label":"Definition","href":"Definition","type":2,"isActive":false},{"label":"Konfiguration","href":"Configuration","type":2,"isActive":false},{"label":"Beispiele","href":"Examples","type":2,"isActive":false}]}