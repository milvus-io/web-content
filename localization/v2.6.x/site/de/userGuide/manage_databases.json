{"codeList":["from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nclient.create_database(\n    db_name=\"my_database_1\"\n)\n","import io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.service.database.request.*;\n\nConnectConfig config = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build();\nMilvusClientV2 client = new MilvusClientV2(config);\n\nCreateDatabaseReq createDatabaseReq = CreateDatabaseReq.builder()\n        .databaseName(\"my_database_1\")\n        .build();\nclient.createDatabase(createDatabaseReq);\n","import {MilvusClient} from '@zilliz/milvus2-sdk-node';\nconst client = new MilvusClient({ \n    address: \"http://localhost:19530\",\n    token: 'root:Milvus' \n});\n\nawait client.createDatabase({\n    db_name: \"my_database_1\"\n });\n","cli, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: \"localhost:19530\",\n    Username: \"Milvus\",\n    Password: \"root\",\n})\nif err != nil {\n    // handle err\n}\n\nerr = cli.CreateDatabase(ctx, milvusclient.NewCreateDatabaseOption(\"my_database_1\"))\nif err != nil {\n    // handle err\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/databases/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"dbName\": \"my_database_1\"\n}'\n","client.create_database(\n    db_name=\"my_database_2\",\n    properties={\n        \"database.replica.number\": 3\n    }\n)\n","Map<String, String> properties = new HashMap<>();\nproperties.put(\"database.replica.number\", \"3\");\nCreateDatabaseReq createDatabaseReq = CreateDatabaseReq.builder()\n        .databaseName(\"my_database_2\")\n        .properties(properties)\n        .build();\nclient.createDatabase(createDatabaseReq);\n","await client.createDatabase({\n    db_name: \"my_database_2\",\n    properties: {\n        \"database.replica.number\": 3\n    }\n});\n","err := cli.CreateDatabase(ctx, milvusclient.NewCreateDatabaseOption(\"my_database_2\").WithProperty(\"database.replica.number\", 3))\nif err != nil {\n    // handle err\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/databases/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"dbName\": \"my_database_2\",\n    \"properties\": {\n        \"database.replica.number\": 3\n    }\n}'\n","# List all existing databases\nclient.list_databases()\n\n# Output\n# ['default', 'my_database_1', 'my_database_2']\n\n# Check database details\nclient.describe_database(\n    db_name=\"default\"\n)\n\n# Output\n# {\"name\": \"default\"}\n","import io.milvus.v2.service.database.response.*;\n\nListDatabasesResp listDatabasesResp = client.listDatabases();\n\nDescribeDatabaseResp descDBResp = client.describeDatabase(DescribeDatabaseReq.builder()\n        .databaseName(\"default\")\n        .build());\n","await client.describeDatabase({ \n    db_name: 'default'\n});\n","// List all existing databases\ndatabases, err := cli.ListDatabase(ctx, milvusclient.NewListDatabaseOption())\nif err != nil {\n    // handle err\n}\nlog.Println(databases)\n\ndb, err := cli.DescribeDatabase(ctx, milvusclient.NewDescribeDatabaseOption(\"default\"))\nif err != nil {\n    // handle err\n}\nlog.Println(db)\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/databases/describe\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"dbName\": \"default\"\n}'\n","client.alter_database_properties(\n    db_name: \"my_database_1\",\n    properties: {\n        \"database.max.collections\": 10\n    }\n)\n","client.alterDatabaseProperties(AlterDatabasePropertiesReq.builder()\n        .databaseName(\"my_database_1\")\n        .property(\"database.max.collections\", \"10\")\n        .build());\n","await milvusClient.alterDatabaseProperties({\n  db_name: \"my_database_1\",\n  properties: {\"database.max.collections\", \"10\" },\n})\n","err := cli.AlterDatabaseProperties(ctx, milvusclient.NewAlterDatabasePropertiesOption(\"my_database_1\").\n    WithProperty(\"database.max.collections\", 1))\nif err != nil {\n    // handle err\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/databases/alter\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"dbName\": \"my_database\",\n    \"properties\": {\n        \"database.max.collections\": 10\n    }\n}'\n","client.drop_database_properties(\n    db_name: \"my_database_1\",\n    property_keys: [\n        \"database.max.collections\"\n    ]\n)\n","client.dropDatabaseProperties(DropDatabasePropertiesReq.builder()\n        .databaseName(\"my_database_1\")\n        .propertyKeys(Collections.singletonList(\"database.max.collections\"))\n        .build());\n","await milvusClient.dropDatabaseProperties({\n  db_name: my_database_1,\n  properties: [\"database.max.collections\"],\n});\n","err := cli.DropDatabaseProperties(ctx, milvusclient.NewDropDatabasePropertiesOption(\"my_database_1\", \"database.max.collections\"))\nif err != nil {\n    // handle err\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/databases/alter\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"dbName\": \"my_database\",\n    \"propertyKeys\": [\n        \"database.max.collections\"\n    ]\n}'\n","client.use_database(\n    db_name=\"my_database_2\"\n)\n","client.useDatabase(\"my_database_2\");\n","await milvusClient.useDatabase({\n  db_name: \"my_database_2\",\n});\n","err = cli.UseDatabase(ctx, milvusclient.NewUseDatabaseOption(\"my_database_2\"))\nif err != nil {\n    // handle err\n}\n","# This operation is unsupported because RESTful does not provide a persistent connection.\n# As a workaround, initiate the required request again with the target database.\n","client.drop_database(\n    db_name=\"my_database_2\"\n)\n","client.dropDatabase(DropDatabaseReq.builder()\n        .databaseName(\"my_database_2\")\n        .build());\n","await milvusClient.dropDatabase({\n  db_name: \"my_database_2\",\n});\n","err = cli.DropDatabase(ctx, milvusclient.NewDropDatabaseOption(\"my_database_2\"))\nif err != nil {\n    // handle err\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/databases/drop\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"dbName\": \"my_database\"\n}'\n"],"headingContent":"Database","anchorList":[{"label":"Datenbank","href":"Database","type":1,"isActive":false},{"label":"Was ist eine Datenbank?","href":"What-is-a-database","type":2,"isActive":false},{"label":"Datenbank erstellen","href":"Create-database","type":2,"isActive":false},{"label":"Datenbanken anzeigen","href":"View-databases","type":2,"isActive":false},{"label":"Verwalten von Datenbankeigenschaften","href":"Manage-database-properties","type":2,"isActive":false},{"label":"Datenbank verwenden","href":"Use-database","type":2,"isActive":false},{"label":"Datenbank l√∂schen","href":"Drop-database","type":2,"isActive":false}]}