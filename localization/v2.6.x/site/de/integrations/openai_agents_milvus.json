{"codeList":["$ pip install openai pymilvus pydantic nest_asyncio\n","import asyncio\nimport nest_asyncio\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nnest_asyncio.apply()\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","from pymilvus import DataType, FunctionType, MilvusClient\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\nschema = client.create_schema()\n\n# Simple schema that handles both text and vectors\nschema.add_field(\n    field_name=\"id\", datatype=DataType.INT64, is_primary=True, auto_id=True\n)\nschema.add_field(\n    field_name=\"text\", datatype=DataType.VARCHAR, max_length=1000, enable_analyzer=True\n)\nschema.add_field(field_name=\"sparse\", datatype=DataType.SPARSE_FLOAT_VECTOR)\n","from pymilvus import Function\n\n# Milvus handles tokenization and BM25 conversion\nbm25_function = Function(\n    name=\"text_bm25_emb\",  # Function name\n    input_field_names=[\"text\"],  # Name of the VARCHAR field containing raw text data\n    output_field_names=[\n        \"sparse\"\n    ],  # Name of the SPARSE_FLOAT_VECTOR field reserved to store generated embeddings\n    function_type=FunctionType.BM25,\n)\n\nschema.add_function(bm25_function)\n","index_params = client.prepare_index_params()\n\nindex_params.add_index(field_name=\"sparse\", index_type=\"AUTOINDEX\", metric_type=\"BM25\")\n\nif client.has_collection(\"demo\"):\n    client.drop_collection(\"demo\")\n\nclient.create_collection(\n    collection_name=\"demo\",\n    schema=schema,\n    index_params=index_params,\n)\n\n## 3. Loading Test Data\nclient.insert(\n    \"demo\",\n    [\n        {\n            \"text\": \"Information retrieval helps users find relevant documents in large datasets.\"\n        },\n        {\n            \"text\": \"Search engines use information retrieval techniques to index and rank web pages.\"\n        },\n        {\n            \"text\": \"The core of IR is matching user queries with the most relevant content.\"\n        },\n        {\n            \"text\": \"Vector search is revolutionising modern information retrieval systems.\"\n        },\n        {\n            \"text\": \"Machine learning improves ranking algorithms in information retrieval.\"\n        },\n        {\n            \"text\": \"IR techniques include keyword-based search, semantic search, and vector search.\"\n        },\n        {\n            \"text\": \"Boolean retrieval is one of the earliest information retrieval methods.\"\n        },\n        {\"text\": \"TF-IDF is a classic method used to score document relevance in IR.\"},\n        {\n            \"text\": \"Modern IR systems integrate deep learning for better contextual understanding.\"\n        },\n        {\n            \"text\": \"Milvus is an open-source vector database designed for AI-powered search.\"\n        },\n        {\n            \"text\": \"Milvus enables fast and scalable similarity search on high-dimensional data.\"\n        },\n        {\n            \"text\": \"With Milvus, developers can build applications that support image, text, and video retrieval.\"\n        },\n        {\n            \"text\": \"Milvus integrates well with deep learning frameworks like PyTorch and TensorFlow.\"\n        },\n        {\n            \"text\": \"The core of Milvus is optimised for approximate nearest neighbour (ANN) search.\"\n        },\n        {\n            \"text\": \"Milvus supports hybrid search combining structured and unstructured data.\"\n        },\n        {\n            \"text\": \"Large-scale AI applications rely on Milvus for efficient vector retrieval.\"\n        },\n        {\"text\": \"Milvus makes it easy to perform high-speed similarity searches.\"},\n        {\"text\": \"Cloud-native by design, Milvus scales effortlessly with demand.\"},\n        {\n            \"text\": \"Milvus powers applications in recommendation systems, fraud detection, and genomics.\"\n        },\n        {\n            \"text\": \"The latest version of Milvus introduces faster indexing and lower latency.\"\n        },\n        {\"text\": \"Milvus supports HNSW, IVF_FLAT, and other popular ANN algorithms.\"},\n        {\n            \"text\": \"Vector embeddings from models like OpenAI’s CLIP can be indexed in Milvus.\"\n        },\n        {\n            \"text\": \"Milvus has built-in support for multi-tenancy in enterprise use cases.\"\n        },\n        {\n            \"text\": \"The Milvus community actively contributes to improving its performance.\"\n        },\n        {\n            \"text\": \"Milvus integrates with data pipelines like Apache Kafka for real-time updates.\"\n        },\n        {\n            \"text\": \"Using Milvus, companies can enhance search experiences with vector search.\"\n        },\n        {\n            \"text\": \"Milvus plays a crucial role in powering AI search in medical research.\"\n        },\n        {\"text\": \"Milvus integrates with LangChain for advanced RAG pipelines.\"},\n        {\n            \"text\": \"Open-source contributors continue to enhance Milvus’ search performance.\"\n        },\n        {\n            \"text\": \"Multi-modal search in Milvus enables applications beyond text and images.\"\n        },\n        {\"text\": \"Milvus has an intuitive REST API for easy integration.\"},\n        {\"text\": \"Milvus’ FAISS and HNSW backends provide flexibility in indexing.\"},\n        {\n            \"text\": \"The architecture of Milvus ensures fault tolerance and high availability.\"\n        },\n        {\"text\": \"Milvus integrates seamlessly with LLM-based applications.\"},\n        {\"text\": \"Startups leverage Milvus to build next-gen AI-powered products.\"},\n        {\"text\": \"Milvus Cloud offers a managed solution for vector search at scale.\"},\n        {\n            \"text\": \"The future of AI search is being shaped by Milvus and similar vector databases.\"\n        },\n    ],\n)\n","from pydantic import BaseModel\n\n\n# Simplified output model for search results\nclass MilvusSearchResult(BaseModel):\n    id: int\n    text: str\n\n\nclass MilvusSearchResults(BaseModel):\n    results: list[MilvusSearchResult]\n    query: str\n","import json\nfrom typing import Any\nfrom pymilvus import MilvusClient\nfrom agents import function_tool, RunContextWrapper\n\n\n@function_tool\nasync def search_milvus_text(\n    ctx: RunContextWrapper[Any], collection_name: str, query_text: str, limit: int\n) -> str:\n    \"\"\"Search for text documents in a Milvus collection using full text search.\n\n    Args:\n        collection_name: Name of the Milvus collection to search.\n        query_text: The text query to search for.\n        limit: Maximum number of results to return.\n    \"\"\"\n    try:\n        # Initialize Milvus client\n        client = MilvusClient()\n\n        # Prepare search parameters for BM25\n        search_params = {\"metric_type\": \"BM25\", \"params\": {\"drop_ratio_search\": 0.2}}\n\n        # Execute search with text query\n        results = client.search(\n            collection_name=collection_name,\n            data=[query_text],\n            anns_field=\"sparse\",\n            limit=limit,\n            search_params=search_params,\n            output_fields=[\"text\"],\n        )\n        return json.dumps(\n            {\"results\": results, \"query\": query_text, \"collection\": collection_name}\n        )\n\n    except Exception as e:\n        print(f\"Exception is: {e}\")\n        return f\"Error searching Milvus: {str(e)}\"\n","from agents import Agent, Runner, WebSearchTool, trace\n\n\nasync def main():\n    agent = Agent(\n        name=\"Milvus Searcher\",\n        instructions=\"\"\"\n        You are a helpful agent that can search through Milvus vector database using full text search. Return the results in a structured format.\n        \"\"\",\n        tools=[\n            WebSearchTool(user_location={\"type\": \"approximate\", \"city\": \"New York\"}),\n            search_milvus_text,\n        ],\n        output_type=MilvusSearchResults,\n    )\n\n    with trace(\"Milvus search example\"):\n        result = await Runner.run(\n            agent,\n            \"Find documents in the 'demo' collection that are similar to this concept: 'information retrieval'\",\n        )\n        # print(result.final_output.results)\n        formatted_results = \"\\n\".join(\n            f\"{i+1}. ID: {res.id}, Text: {res.text}\"\n            for i, res in enumerate(result.final_output.results)\n        )\n        print(f\"Search results:\\n{formatted_results}\")\n","asyncio.run(main())\n"],"headingContent":"Milvus Integration with OpenAI Agents: A Step-by-Step Guide","anchorList":[{"label":"Milvus-Integration mit OpenAI-Agenten: Eine Schritt-für-Schritt-Anleitung","href":"Milvus-Integration-with-OpenAI-Agents-A-Step-by-Step-Guide","type":1,"isActive":false},{"label":"OpenAI-Agenten","href":"OpenAI-Agents","type":2,"isActive":false},{"label":"Milvus","href":"Milvus","type":2,"isActive":false},{"label":"Einrichtung und Abhängigkeiten","href":"Setup-and-Dependencies","type":2,"isActive":false},{"label":"Verbindung zu Milvus herstellen und ein Schema erstellen","href":"Connecting-to-Milvus-and-Creating-a-Schema","type":2,"isActive":false},{"label":"Milvus mit Docker installieren","href":"Install-Milvus-with-Docker","type":2,"isActive":false},{"label":"BM25 für die Volltextsuche einrichten","href":"Setting-Up-BM25-for-Full-Text-Search","type":2,"isActive":false},{"label":"Erstellen der Sammlung und Laden von Beispieldaten","href":"Creating-the-Collection-and-Loading-Sample-Data","type":2,"isActive":false},{"label":"Definition von Ausgabetypen für strukturierte Ergebnisse","href":"Defining-Output-Types-for-Structured-Results","type":2,"isActive":false},{"label":"Erstellen eines benutzerdefinierten Suchwerkzeugs","href":"Creating-a-Custom-Search-Tool","type":2,"isActive":false},{"label":"Erstellen des Agenten","href":"Building-the-Agent","type":2,"isActive":false}]}