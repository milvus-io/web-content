{"codeList":["from pymilvus import MilvusClient, Function, FunctionType\n\n# Connect to your Milvus server\nclient = MilvusClient(\n    uri=\"http://localhost:19530\"  # Replace with your Milvus server URI\n)\n\n# Configure Cohere Ranker\ncohere_ranker = Function(\n    name=\"cohere_semantic_ranker\",          # Unique identifier for your ranker\n    input_field_names=[\"document\"],         # VARCHAR field containing text to rerank\n    function_type=FunctionType.RERANK,      # Must be RERANK for reranking functions\n    params={\n        \"reranker\": \"model\",                # Enables model-based reranking\n        \"provider\": \"cohere\",               # Specifies Cohere as the service provider\n        \"model_name\": \"rerank-english-v3.0\", # Cohere rerank model to use\n        \"queries\": [\"renewable energy developments\"], # Query text for relevance evaluation\n        \"max_client_batch_size\": 128,       # Optional: batch size for model service requests (default: 128)\n        \"max_tokens_per_doc\": 4096,         # Optional: max tokens per document (default: 4096)\n        # \"credential\": \"your-cohere-api-key\" # Optional: authentication credential for Cohere API\n    }\n)\n","// java\n","// nodejs\n","// go\n","# restful\n","# Execute search with Cohere reranking\nresults = client.search(\n    collection_name=\"your_collection\",\n    data=[\"AI Research Progress\", \"What is AI\"],  # Search queries\n    anns_field=\"dense_vector\",                   # Vector field to search\n    limit=5,                                     # Number of results to return\n    output_fields=[\"document\"],                  # Include text field for reranking\n    #  highlight-next-line\n    ranker=cohere_ranker,                       # Apply Cohere reranking\n    consistency_level=\"Bounded\"\n)\n","// java\n","// nodejs\n","// go\n","# restful\n","from pymilvus import AnnSearchRequest\n\n# Configure dense vector search\ndense_search = AnnSearchRequest(\n    data=[\"AI Research Progress\", \"What is AI\"],\n    anns_field=\"dense_vector\",\n    param={},\n    limit=5\n)\n\n# Configure sparse vector search  \nsparse_search = AnnSearchRequest(\n    data=[\"AI Research Progress\", \"What is AI\"],\n    anns_field=\"sparse_vector\", \n    param={},\n    limit=5\n)\n\n# Execute hybrid search with Cohere reranking\nhybrid_results = client.hybrid_search(\n    collection_name=\"your_collection\",\n    [dense_search, sparse_search],              # Multiple search requests\n    #  highlight-next-line\n    ranker=cohere_ranker,                      # Apply Cohere reranking to combined results\n    limit=5,                                   # Final number of results\n    output_fields=[\"document\"]\n)\n","// java\n","// nodejs\n","// go\n","# restful\n"],"headingContent":"Cohere Ranker","anchorList":[{"label":"Classificatore CohereCompatible with Milvus 2.6.x","href":"Cohere-Ranker","type":1,"isActive":false},{"label":"Prerequisiti","href":"Prerequisites","type":2,"isActive":false},{"label":"Creare una funzione ranker di Cohere","href":"Create-a-Cohere-ranker-function","type":2,"isActive":false},{"label":"Parametri specifici di Cohere ranker","href":"Cohere-ranker-specific-parameters","type":3,"isActive":false},{"label":"Applicare alla ricerca vettoriale standard","href":"Apply-to-standard-vector-search","type":2,"isActive":false},{"label":"Applicare alla ricerca ibrida","href":"Apply-to-hybrid-search","type":2,"isActive":false}]}