{"codeList":["from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nres = client.list_partitions(\n    collection_name=\"my_collection\"\n)\n\nprint(res)\n\n# Output\n#\n# [\"_default\"]\n","import io.milvus.v2.service.partition.request.ListPartitionsReq;\nimport io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\n\nimport java.util.*;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\nString TOKEN = \"root:Milvus\";\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n        .uri(CLUSTER_ENDPOINT)\n        .token(TOKEN)\n        .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\nListPartitionsReq listPartitionsReq = ListPartitionsReq.builder()\n        .collectionName(\"my_collection\")\n        .build();\n\nList<String> partitionNames = client.listPartitions(listPartitionsReq);\nSystem.out.println(partitionNames);\n\n// Output:\n// [_default]\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nlet res = await client.listPartitions({\n    collection_name: \"my_collection\"\n})\n\nconsole.log(res);\n\n// Output\n// [\"_default\"]\n","import (\n    \"context\"\n    \n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\npartitionNames, err := client.ListPartitions(ctx, milvusclient.NewListPartitionOption(\"my_collection\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(partitionNames)\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/partitions/list\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": [\n#         \"_default\"\n#     ]\n# }\n","client.create_partition(\n    collection_name=\"my_collection\",\n    partition_name=\"partitionA\"\n)\n\nres = client.list_partitions(\n    collection_name=\"my_collection\"\n)\n\nprint(res)\n\n# Output\n#\n# [\"_default\", \"partitionA\"]\n","import io.milvus.v2.service.partition.request.CreatePartitionReq;\n\nCreatePartitionReq createPartitionReq = CreatePartitionReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionName(\"partitionA\")\n        .build();\n\nclient.createPartition(createPartitionReq);\n\nListPartitionsReq listPartitionsReq = ListPartitionsReq.builder()\n        .collectionName(\"my_collection\")\n        .build();\n\nList<String> partitionNames = client.listPartitions(listPartitionsReq);\nSystem.out.println(partitionNames);\n\n// Output:\n// [_default, partitionA]\n","await client.createPartition({\n    collection_name: \"my_collection\",\n    partition_name: \"partitionA\"\n})\n\nres = await client.listPartitions({\n    collection_name: \"my_collection\"\n})\n\nconsole.log(res)\n\n// Output\n// [\"_default\", \"partitionA\"]\n","import (\n    \"fmt\"\n    \n    client \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nerr = client.CreatePartition(ctx, milvusclient.NewCreatePartitionOption(\"my_collection\", \"partitionA\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\npartitionNames, err := client.ListPartitions(ctx, milvusclient.NewListPartitionOption(\"my_collection\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(partitionNames)\n// Output\n// [\"_default\", \"partitionA\"]\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/partitions/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionName\": \"partitionA\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {}\n# }\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/partitions/list\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": [\n#         \"_default\",\n#         \"partitionA\"\n#     ]\n# }\n","res = client.has_partition(\n    collection_name=\"my_collection\",\n    partition_name=\"partitionA\"\n)\n\nprint(res)\n\n# Output\n#\n# True\n","import io.milvus.v2.service.partition.request.HasPartitionReq;\n\nHasPartitionReq hasPartitionReq = HasPartitionReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionName(\"partitionA\")\n        .build();\n\nBoolean hasPartitionRes = client.hasPartition(hasPartitionReq);\nSystem.out.println(hasPartitionRes);\n\n// Output:\n// true\n","res = await client.hasPartition({\n    collection_name: \"my_collection\",\n    partition_name: \"partitionA\"\n})\n\nconsole.log(res.value)\n\n// Output\n// true\n","result, err := client.HasPartition(ctx, milvusclient.NewHasPartitionOption(\"my_collection\", \"partitionA\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(result)\n\n// Output:\n// true\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/partitions/has\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionName\": \"partitionA\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {\n#        \"has\": true\n#     }\n# }\n","client.load_partitions(\n    collection_name=\"my_collection\",\n    partition_names=[\"partitionA\"]\n)\n\nres = client.get_load_state(\n    collection_name=\"my_collection\",\n    partition_name=\"partitionA\"\n)\n\nprint(res)\n# Output\n#\n# {\n#     \"state\": \"<LoadState: Loaded>\"\n# }\n","import io.milvus.v2.service.partition.request.LoadPartitionsReq;\nimport io.milvus.v2.service.collection.request.GetLoadStateReq;\n\nLoadPartitionsReq loadPartitionsReq = LoadPartitionsReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionNames(Collections.singletonList(\"partitionA\"))\n        .build();\n\nclient.loadPartitions(loadPartitionsReq);\n\nGetLoadStateReq getLoadStateReq = GetLoadStateReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionName(\"partitionA\")\n        .build();\n\nBoolean getLoadStateRes = client.getLoadState(getLoadStateReq);\nSystem.out.println(getLoadStateRes);\n\n// True\n","await client.loadPartitions({\n    collection_name: \"my_collection\",\n    partition_names: [\"partitionA\"]\n})\n\nres = await client.getLoadState({\n    collection_name: \"my_collection\",\n    partition_name: \"partitionA\"\n})\n\nconsole.log(res)\n\n// Output\n// \n// LoadStateLoaded\n// \n","task, err := client.LoadPartitions(ctx, milvusclient.NewLoadPartitionsOption(\"my_collection\", \"partitionA\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\n// sync wait collection to be loaded\nerr = task.Await(ctx)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nstate, err := client.GetLoadState(ctx, milvusclient.NewGetLoadStateOption(\"my_collection\", \"partitionA\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(state)\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/partitions/load\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionNames\": [\"partitionA\"]\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {}\n# }\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/get_load_state\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionNames\": [\"partitionA\"]\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {\n#         \"loadProgress\": 100,\n#         \"loadState\": \"LoadStateLoaded\",\n#         \"message\": \"\"\n#     }\n# }\n","client.release_partitions(\n    collection_name=\"my_collection\",\n    partition_names=[\"partitionA\"]\n)\n\nres = client.get_load_state(\n    collection_name=\"my_collection\",\n    partition_name=\"partitionA\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: NotLoaded>\"\n# }\n","import io.milvus.v2.service.partition.request.ReleasePartitionsReq;\n\nReleasePartitionsReq releasePartitionsReq = ReleasePartitionsReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionNames(Collections.singletonList(\"partitionA\"))\n        .build();\n\nclient.releasePartitions(releasePartitionsReq);\n\nGetLoadStateReq getLoadStateReq = GetLoadStateReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionName(\"partitionA\")\n        .build();\n\nBoolean getLoadStateRes = client.getLoadState(getLoadStateReq);\nSystem.out.println(getLoadStateRes);\n\n// False\n","await client.releasePartitions({\n    collection_name: \"my_collection\",\n    partition_names: [\"partitionA\"]\n})\n\nres = await client.getLoadState({\n    collection_name: \"my_collection\",\n    partition_name: \"partitionA\"\n})\n\nconsole.log(res)\n\n// Output\n// \n// LoadStateNotLoaded\n// \n","err = client.ReleasePartitions(ctx, milvusclient.NewReleasePartitionsOptions(\"my_collection\", \"partitionA\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nstate, err := client.GetLoadState(ctx, milvusclient.NewGetLoadStateOption(\"my_collection\", \"partitionA\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(state)\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/partitions/release\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionNames\": [\"partitionA\"]\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {}\n# }\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/get_load_state\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionNames\": [\"partitionA\"]\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {\n#         \"loadProgress\": 0,\n#         \"loadState\": \"LoadStateNotLoaded\",\n#         \"message\": \"\"\n#     }\n# }\n","client.release_partitions(\n    collection_name=\"my_collection\",\n    partition_names=[\"partitionA\"]\n)\n\nclient.drop_partition(\n    collection_name=\"my_collection\",\n    partition_name=\"partitionA\"\n)\n\nres = client.list_partitions(\n    collection_name=\"my_collection\"\n)\n\nprint(res)\n\n# [\"_default\"]\n","import io.milvus.v2.service.partition.request.DropPartitionReq;\nimport io.milvus.v2.service.partition.request.ReleasePartitionsReq;\nimport io.milvus.v2.service.partition.request.ListPartitionsReq;\n\nReleasePartitionsReq releasePartitionsReq = ReleasePartitionsReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionNames(Collections.singletonList(\"partitionA\"))\n        .build();\n\nclient.releasePartitions(releasePartitionsReq);\n\nDropPartitionReq dropPartitionReq = DropPartitionReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionName(\"partitionA\")\n        .build();\n\nclient.dropPartition(dropPartitionReq);\n\nListPartitionsReq listPartitionsReq = ListPartitionsReq.builder()\n        .collectionName(\"my_collection\")\n        .build();\n\nList<String> partitionNames = client.listPartitions(listPartitionsReq);\nSystem.out.println(partitionNames);\n\n// Output:\n// [_default]\n","await client.releasePartitions({\n    collection_name: \"my_collection\",\n    partition_names: [\"partitionA\"]\n})\n\nawait client.dropPartition({\n    collection_name: \"my_collection\",\n    partition_name: \"partitionA\"\n})\n\nres = await client.listPartitions({\n    collection_name: \"my_collection\"\n})\n\nconsole.log(res)\n\n// Output\n// [\"_default\"]\n","err = client.ReleasePartitions(ctx, milvusclient.NewReleasePartitionsOptions(\"my_collection\", \"partitionA\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nerr = client.DropPartition(ctx, milvusclient.NewDropPartitionOption(\"my_collection\", \"partitionA\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\npartitionNames, err := client.ListPartitions(ctx, milvusclient.NewListPartitionOption(\"my_collection\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(partitionNames)\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/partitions/release\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionNames\": [\"partitionA\"]\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {}\n# }\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/partitions/drop\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionName\": \"partitionA\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {}\n# }\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/partitions/list\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": [\n#         \"_default\"\n#     ]\n# }\n"],"headingContent":"Manage Partitions","anchorList":[{"label":"Gestire le partizioni","href":"Manage-Partitions","type":1,"isActive":false},{"label":"Panoramica","href":"Overview","type":2,"isActive":false},{"label":"Elenco delle partizioni","href":"List-Partitions","type":2,"isActive":false},{"label":"Creare una partizione","href":"Create-Partition","type":2,"isActive":false},{"label":"Controllare una partizione specifica","href":"Check-for-a-Specific-Partition","type":2,"isActive":false},{"label":"Caricare e rilasciare partizioni","href":"Load-and-Release-Partitions","type":2,"isActive":false},{"label":"Operazioni sui dati all'interno delle partizioni","href":"Data-Operations-Within-Partitions","type":2,"isActive":false},{"label":"Eliminazione di partizioni","href":"Drop-Partition","type":2,"isActive":false}]}