{"codeList":["# Import necessary libraries\nfrom pymilvus import MilvusClient, DataType\n\n# Define server address\nSERVER_ADDR = \"http://localhost:19530\"\n\n# Create a MilvusClient instance\nclient = MilvusClient(uri=SERVER_ADDR)\n\n# Define the collection schema\nschema = client.create_schema(\n    auto_id=False,\n    enable_dynamic_fields=True,\n)\n\n# Add an INT64 field `age` that supports null values with default value 18\nschema.add_field(field_name=\"age\", datatype=DataType.INT64, nullable=True, default_value=18)\n# Add a FLOAT field `price` that supports null values without default value\nschema.add_field(field_name=\"price\", datatype=DataType.FLOAT, nullable=True)\nschema.add_field(field_name=\"pk\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=3)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\n\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build());\n        \nCreateCollectionReq.CollectionSchema schema = client.createSchema();\nschema.setEnableDynamicField(true);\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"age\")\n        .dataType(DataType.Int64)\n        .isNullable(true)\n        .defaultValue(18)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"price\")\n        .dataType(DataType.Float)\n        .isNullable(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"pk\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"embedding\")\n        .dataType(DataType.FloatVector)\n        .dimension(3)\n        .build());\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\nconst schema = [\n  {\n    name: \"age\",\n    data_type: DataType.Int64,\n  },\n  {\n    name: \"price\",\n    data_type: DataType.Float,\n  },\n  {\n    name: \"pk\",\n    data_type: DataType.Int64,\n    is_primary_key: true,\n  },\n  {\n    name: \"embedding\",\n    data_type: DataType.FloatVector,\n    dim: 3,\n  },\n];\n\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nschema := entity.NewSchema()\nschema.WithField(entity.NewField().\n    WithName(\"pk\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"embedding\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(3),\n).WithField(entity.NewField().\n    WithName(\"price\").\n    WithDataType(entity.FieldTypeFloat).\n    WithNullable(true),\n).WithField(entity.NewField().\n    WithName(\"age\").\n    WithDataType(entity.FieldTypeInt64).\n    WithNullable(true).\n    WithDefaultValueLong(18),\n)\n","export int64Field='{\n    \"fieldName\": \"age\",\n    \"dataType\": \"Int64\"\n}'\n\nexport floatField='{\n    \"fieldName\": \"price\",\n    \"dataType\": \"Float\"\n}'\n\nexport pkField='{\n    \"fieldName\": \"pk\",\n    \"dataType\": \"Int64\",\n    \"isPrimary\": true\n}'\n\nexport vectorField='{\n    \"fieldName\": \"embedding\",\n    \"dataType\": \"FloatVector\",\n    \"elementTypeParams\": {\n        \"dim\": 3\n    }\n}'\n\nexport schema=\"{\n    \\\"autoID\\\": false,\n    \\\"fields\\\": [\n        $int64Field,\n        $floatField,\n        $pkField,\n        $vectorField\n    ]\n}\"\n","# Set index params\n\nindex_params = client.prepare_index_params()\n\n# Index `age` with AUTOINDEX\nindex_params.add_index(\n    field_name=\"age\",\n    index_type=\"AUTOINDEX\",\n    index_name=\"age_index\"\n)\n\n# Index `embedding` with AUTOINDEX and specify similarity metric type\nindex_params.add_index(\n    field_name=\"embedding\",\n    index_type=\"AUTOINDEX\",  # Use automatic indexing to simplify complex index settings\n    metric_type=\"COSINE\"  # Specify similarity metric type, options include L2, COSINE, or IP\n)\n","import io.milvus.v2.common.IndexParam;\nimport java.util.*;\n\nList<IndexParam> indexes = new ArrayList<>();\nindexes.add(IndexParam.builder()\n        .fieldName(\"age\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .build());\n        \nindexes.add(IndexParam.builder()\n        .fieldName(\"embedding\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.COSINE)\n        .build());\n","import { IndexType } from \"@zilliz/milvus2-sdk-node\";\nconst indexParams = [\n  {\n    field_name: \"age\",\n    index_name: \"inverted_index\",\n    index_type: IndexType.AUTOINDEX,\n  },\n  {\n    field_name: \"embedding\",\n    metric_type: \"COSINE\",\n    index_type: IndexType.AUTOINDEX,\n  },\n];\n","indexOption1 := milvusclient.NewCreateIndexOption(\"my_collection\", \"embedding\",\n    index.NewAutoIndex(index.MetricType(entity.IP)))\nindexOption2 := milvusclient.NewCreateIndexOption(\"my_collection\", \"age\",\n    index.NewInvertedIndex())\n","export indexParams='[\n        {\n            \"fieldName\": \"age\",\n            \"indexName\": \"inverted_index\",\n            \"indexType\": \"AUTOINDEX\"\n        },\n        {\n            \"fieldName\": \"embedding\",\n            \"metricType\": \"COSINE\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n","# Create Collection\nclient.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema,\n    index_params=index_params\n)\n","CreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexes)\n        .build();\nclient.createCollection(requestCreate);\n","client.create_collection({\n    collection_name: \"my_collection\",\n    schema: schema,\n    index_params: indexParams\n})\n","err = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithIndexOptions(indexOption1, indexOption2))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n","# Sample data\ndata = [\n    {\"age\": 25, \"price\": 99.99, \"pk\": 1, \"embedding\": [0.1, 0.2, 0.3]},\n    {\"age\": 30, \"pk\": 2, \"embedding\": [0.4, 0.5, 0.6]}, # `price` field is missing, which should be null\n    {\"age\": None, \"price\": None, \"pk\": 3, \"embedding\": [0.2, 0.3, 0.1]},  # `age` should default to 18, `price` is null\n    {\"age\": 45, \"price\": None, \"pk\": 4, \"embedding\": [0.9, 0.1, 0.4]},  # `price` is null\n    {\"age\": None, \"price\": 59.99, \"pk\": 5, \"embedding\": [0.8, 0.5, 0.3]},  # `age` should default to 18\n    {\"age\": 60, \"price\": None, \"pk\": 6, \"embedding\": [0.1, 0.6, 0.9]}  # `price` is null\n]\n\nclient.insert(\n    collection_name=\"my_collection\",\n    data=data\n)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.InsertResp;\n\nList<JsonObject> rows = new ArrayList<>();\nGson gson = new Gson();\nrows.add(gson.fromJson(\"{\\\"age\\\": 25, \\\"price\\\": 99.99, \\\"pk\\\": 1, \\\"embedding\\\": [0.1, 0.2, 0.3]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"age\\\": 30, \\\"pk\\\": 2, \\\"embedding\\\": [0.4, 0.5, 0.6]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"age\\\": null, \\\"price\\\": null, \\\"pk\\\": 3, \\\"embedding\\\": [0.2, 0.3, 0.1]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"age\\\": 45, \\\"price\\\": null, \\\"pk\\\": 4, \\\"embedding\\\": [0.9, 0.1, 0.4]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"age\\\": null, \\\"price\\\": 59.99, \\\"pk\\\": 5, \\\"embedding\\\": [0.8, 0.5, 0.3]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"age\\\": 60, \\\"price\\\": null, \\\"pk\\\": 6, \\\"embedding\\\": [0.1, 0.6, 0.9]}\", JsonObject.class));\n\nInsertResp insertR = client.insert(InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(rows)\n        .build());\n","const data = [\n  { age: 25, price: 99.99, pk: 1, embedding: [0.1, 0.2, 0.3] },\n  { age: 30, price: 149.5, pk: 2, embedding: [0.4, 0.5, 0.6] },\n  { age: 35, price: 199.99, pk: 3, embedding: [0.7, 0.8, 0.9] },\n];\n\nclient.insert({\n  collection_name: \"my_collection\",\n  data: data,\n});\n\n","column1, _ := column.NewNullableColumnFloat(\"price\",\n    []float32{99.99, 59.99},\n    []bool{true, false, false, false, true, false})\ncolumn2, _ := column.NewNullableColumnInt64(\"age\",\n    []int64{25, 30, 45, 60},\n    []bool{true, true, false, true, false, true})\n\n_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"pk\", []int64{1, 2, 3, 4, 5, 6}).\n    WithFloatVectorColumn(\"embedding\", 3, [][]float32{\n        {0.1, 0.2, 0.3},\n        {0.4, 0.5, 0.6},\n        {0.2, 0.3, 0.1},\n        {0.9, 0.1, 0.4},\n        {0.8, 0.5, 0.3},\n        {0.1, 0.6, 0.9},\n    }).\n    WithColumns(column1, column2),\n)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"age\": 25, \"price\": 99.99, \"pk\": 1, \"embedding\": [0.1, 0.2, 0.3]},\n        {\"age\": 30, \"price\": 149.50, \"pk\": 2, \"embedding\": [0.4, 0.5, 0.6]},\n        {\"age\": 35, \"price\": 199.99, \"pk\": 3, \"embedding\": [0.7, 0.8, 0.9]}       \n    ],\n    \"collectionName\": \"my_collection\"\n}'\n","filter = 'age > 30'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"age\", \"price\", \"pk\"]\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"{'age': 45, 'price': None, 'pk': 4}\",\n#     \"{'age': 60, 'price': None, 'pk': 6}\"\n# ]\n","import io.milvus.v2.service.vector.request.QueryReq;\nimport io.milvus.v2.service.vector.response.QueryResp;\n\nString filter = \"age > 30\";\n\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"age\", \"price\", \"pk\"))\n        .build());\nSystem.out.println(resp.getQueryResults());\n\n// Output\n//\n// [\n//    QueryResp.QueryResult(entity={price=null, pk=4, age=45}), \n//    QueryResp.QueryResult(entity={price=null, pk=6, age=60})\n// ]\n","client.query({\n    collection_name: 'my_collection',\n    filter: 'age > 30',\n    output_fields: ['age', 'price', 'pk']\n});\n","filter := \"age > 30\"\nqueryResult, err := client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"pk\", \"age\", \"price\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"pk\", queryResult.GetColumn(\"pk\").FieldData().GetScalars())\nfmt.Println(\"age\", queryResult.GetColumn(\"age\").FieldData().GetScalars())\nfmt.Println(\"price\", queryResult.GetColumn(\"price\").FieldData().GetScalars())\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"age > 30\",\n    \"outputFields\": [\"age\",\"price\", \"pk\"]\n}'\n\n## {\"code\":0,\"cost\":0,\"data\":[{\"age\":30,\"pk\":2,\"price\":149.5},{\"age\":35,\"pk\":3,\"price\":199.99}]}\n","filter = 'price is null'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"age\", \"price\", \"pk\"]\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"{'age': 30, 'price': None, 'pk': 2}\",\n#     \"{'age': 18, 'price': None, 'pk': 3}\",\n#     \"{'age': 45, 'price': None, 'pk': 4}\",\n#     \"{'age': 60, 'price': None, 'pk': 6}\"\n# ]\n","String filter = \"price is null\";\n\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"age\", \"price\", \"pk\"))\n        .build());\nSystem.out.println(resp.getQueryResults());\n\n// Output\n// [\n//    QueryResp.QueryResult(entity={price=null, pk=2, age=30}), \n//    QueryResp.QueryResult(entity={price=null, pk=3, age=18}), \n//    QueryResp.QueryResult(entity={price=null, pk=4, age=45}), \n//    QueryResp.QueryResult(entity={price=null, pk=6, age=60})\n// ]\n","// node\nconst filter = 'price is null';\n\nconst res = await client.query({\n    collection_name:\"my_collection\",\n    filter:filter,\n    output_fields=[\"age\", \"price\", \"pk\"]\n});\n\nconsole.log(res);\n\n// Example output:\n// data: [\n//     \"{'age': 18, 'price': None, 'pk': 3}\",\n//     \"{'age': 18, 'price': 59.99, 'pk': 5}\"\n// ]\n","filter = \"price is null\"\nqueryResult, err = client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"pk\", \"age\", \"price\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"pk\", queryResult.GetColumn(\"pk\"))\nfmt.Println(\"age\", queryResult.GetColumn(\"age\"))\nfmt.Println(\"price\", queryResult.GetColumn(\"price\"))\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n  \"collectionName\": \"my_collection\",\n  \"filter\": \"price is null\",\n  \"outputFields\": [\"age\", \"price\", \"pk\"]\n}'\n","filter = 'age == 18'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"age\", \"price\", \"pk\"]\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"{'age': 18, 'price': None, 'pk': 3}\",\n#     \"{'age': 18, 'price': 59.99, 'pk': 5}\"\n# ]\n","String filter = \"age == 18\";\n\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"age\", \"price\", \"pk\"))\n        .build());\nSystem.out.println(resp.getQueryResults());\n\n// Output\n// [\n//    QueryResp.QueryResult(entity={price=null, pk=3, age=18}), \n//    QueryResp.QueryResult(entity={price=59.99, pk=5, age=18})\n// ]\n","// node\nconst filter = 'age == 18';\n\nconst res = await client.query({\n    collection_name:\"my_collection\",\n    filter:filter,\n    output_fields=[\"age\", \"price\", \"pk\"]\n});\n\nconsole.log(res);\n\n// Example output:\n// data: [\n//     \"{'age': 18, 'price': None, 'pk': 3}\",\n//     \"{'age': 18, 'price': 59.99, 'pk': 5}\"\n// ]\n","filter = \"age == 18\"\nqueryResult, err = client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"pk\", \"age\", \"price\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"pk\", queryResult.GetColumn(\"pk\"))\nfmt.Println(\"age\", queryResult.GetColumn(\"age\"))\nfmt.Println(\"price\", queryResult.GetColumn(\"price\"))\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n  \"collectionName\": \"my_collection\",\n  \"filter\": \"age == 18\",\n  \"outputFields\": [\"age\", \"price\", \"pk\"]\n}'\n","filter = \"25 <= age <= 35\"\n\nres = client.search(\n    collection_name=\"my_collection\",\n    data=[[0.3, -0.6, 0.1]],\n    limit=5,\n    search_params={\"params\": {\"nprobe\": 10}},\n    output_fields=[\"age\",\"price\"],\n    filter=filter\n)\n\nprint(res)\n\n# Example output:\n# data: [\n#     \"[{'id': 2, 'distance': -0.2016308456659317, 'entity': {'age': 30, 'price': None}}, {'id': 1, 'distance': -0.23643313348293304, 'entity': {'age': 25, 'price': 99.98999786376953}}]\"\n# ]\n","import io.milvus.v2.service.vector.request.SearchReq;\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nString filter = \"25 <= age <= 35\";\n\nSearchResp resp = client.search(SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .annsField(\"embedding\")\n        .data(Collections.singletonList(new FloatVec(new float[]{0.3f, -0.6f, 0.1f})))\n        .topK(5)\n        .outputFields(Arrays.asList(\"age\", \"price\"))\n        .filter(filter)\n        .build());\n\nSystem.out.println(resp.getSearchResults());\n\n// Output\n//\n// [\n//   [\n//     SearchResp.SearchResult(entity={price=null, age=30}, score=-0.20163085, id=2),\n//     SearchResp.SearchResult(entity={price=99.99, age=25}, score=-0.23643313, id=1)\n//   ]\n// ]\n","await client.search({\n    collection_name: 'my_collection',\n    data: [0.3, -0.6, 0.1],\n    limit: 5,\n    output_fields: ['age', 'price'],\n    filter: '25 <= age <= 35'\n});\n","queryVector := []float32{0.3, -0.6, 0.1}\nfilter = \"25 <= age <= 35\"\n\nannParam := index.NewCustomAnnParam()\nannParam.WithExtraParam(\"nprobe\", 10)\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    5,               // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithANNSField(\"embedding\").\n    WithFilter(filter).\n    WithAnnParam(annParam).\n    WithOutputFields(\"age\", \"price\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"age: \", resultSet.GetColumn(\"age\"))\n    fmt.Println(\"price: \", resultSet.GetColumn(\"price\"))\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.3, -0.6, 0.1]\n    ],\n    \"annsField\": \"embedding\",\n    \"limit\": 5,\n    \"outputFields\": [\"age\", \"price\"]\n}'\n\n## {\"code\":0,\"cost\":0,\"data\":[{\"age\":35,\"distance\":-0.19054288,\"id\":3,\"price\":199.99},{\"age\":30,\"distance\":-0.20163085,\"id\":2,\"price\":149.5},{\"age\":25,\"distance\":-0.2364331,\"id\":1,\"price\":99.99}]}\n"],"headingContent":"Number Field","anchorList":[{"label":"Campo numerico","href":"Number-Field","type":1,"isActive":false},{"label":"Aggiungere un campo numerico","href":"Add-number-field","type":2,"isActive":false},{"label":"Impostare i parametri dell'indice","href":"Set-index-params","type":2,"isActive":false},{"label":"Creare la collezione","href":"Create-collection","type":2,"isActive":false},{"label":"Inserire i dati","href":"Insert-data","type":2,"isActive":false},{"label":"Interrogazione con espressioni di filtro","href":"Query-with-filter-expressions","type":2,"isActive":false},{"label":"Ricerca vettoriale con espressioni di filtro","href":"Vector-search-with-filter-expressions","type":2,"isActive":false}]}