{"codeList":["$ pip install \"pymilvus[model]\"\n$ pip install hdbscan\n$ pip install plotly\n$ pip install umap-learn\n","%%bash\ncurl -L -o ~/Downloads/news-headlines-2024.zip\\\n  https://www.kaggle.com/api/v1/datasets/download/dylanjcastillo/news-headlines-2024\n","import pandas as pd\nfrom dotenv import load_dotenv\nfrom pymilvus.model.hybrid import BGEM3EmbeddingFunction\nfrom pymilvus import FieldSchema, Collection, connections, CollectionSchema, DataType\n\nload_dotenv()\n\ndf = pd.read_csv(\"news_data_dedup.csv\")\n\n\ndocs = [\n    f\"{title}\\n{description}\" for title, description in zip(df.title, df.description)\n]\nef = BGEM3EmbeddingFunction()\n\nembeddings = ef(docs)[\"dense\"]\n\nconnections.connect(uri=\"milvus.db\")\n","fields = [\n    FieldSchema(\n        name=\"id\", dtype=DataType.INT64, is_primary=True, auto_id=True\n    ),  # Primary ID field\n    FieldSchema(\n        name=\"embedding\", dtype=DataType.FLOAT_VECTOR, dim=1024\n    ),  # Float vector field (embedding)\n    FieldSchema(\n        name=\"text\", dtype=DataType.VARCHAR, max_length=65535\n    ),  # Float vector field (embedding)\n]\n\nschema = CollectionSchema(fields=fields, description=\"Embedding collection\")\n\ncollection = Collection(name=\"news_data\", schema=schema)\n\nfor doc, embedding in zip(docs, embeddings):\n    collection.insert({\"text\": doc, \"embedding\": embedding})\n    print(doc)\n\nindex_params = {\"index_type\": \"FLAT\", \"metric_type\": \"L2\", \"params\": {}}\n\ncollection.create_index(field_name=\"embedding\", index_params=index_params)\n\ncollection.flush()\n","import hdbscan\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom umap import UMAP\nfrom pymilvus import Collection\n\ncollection = Collection(name=\"news_data\")\ncollection.load()\n\niterator = collection.query_iterator(\n    batch_size=10, expr=\"id > 0\", output_fields=[\"id\", \"embedding\"]\n)\n\nsearch_params = {\n    \"metric_type\": \"L2\",\n    \"params\": {\"nprobe\": 10},\n}  # L2 is Euclidean distance\n\nids = []\ndist = {}\n\nembeddings = []\n","while True:\n    batch = iterator.next()\n    batch_ids = [data[\"id\"] for data in batch]\n    ids.extend(batch_ids)\n\n    query_vectors = [data[\"embedding\"] for data in batch]\n    embeddings.extend(query_vectors)\n\n    results = collection.search(\n        data=query_vectors,\n        limit=50,\n        anns_field=\"embedding\",\n        param=search_params,\n        output_fields=[\"id\"],\n    )\n    for i, batch_id in enumerate(batch_ids):\n        dist[batch_id] = []\n        for result in results[i]:\n            dist[batch_id].append((result.id, result.distance))\n\n    if len(batch) == 0:\n        break\n\nids2index = {}\n\nfor id in dist:\n    ids2index[id] = len(ids2index)\n\ndist_metric = np.full((len(ids), len(ids)), np.inf, dtype=np.float64)\n\nfor id in dist:\n    for result in dist[id]:\n        dist_metric[ids2index[id]][ids2index[result[0]]] = result[1]\n\nh = hdbscan.HDBSCAN(min_samples=3, min_cluster_size=3, metric=\"precomputed\")\nhdb = h.fit(dist_metric)\n","import plotly.io as pio\n\npio.renderers.default = \"notebook\"\n\numap = UMAP(n_components=2, random_state=42, n_neighbors=80, min_dist=0.1)\n\ndf_umap = (\n    pd.DataFrame(umap.fit_transform(np.array(embeddings)), columns=[\"x\", \"y\"])\n    .assign(cluster=lambda df: hdb.labels_.astype(str))\n    .query('cluster != \"-1\"')\n    .sort_values(by=\"cluster\")\n)\niterator = collection.query_iterator(\n    batch_size=10, expr=\"id > 0\", output_fields=[\"id\", \"text\"]\n)\n\nids = []\ntexts = []\n\nwhile True:\n    batch = iterator.next()\n    if len(batch) == 0:\n        break\n    batch_ids = [data[\"id\"] for data in batch]\n    batch_texts = [data[\"text\"] for data in batch]\n    ids.extend(batch_ids)\n    texts.extend(batch_texts)\n\nshow_texts = [texts[i] for i in df_umap.index]\n\ndf_umap[\"hover_text\"] = show_texts\nfig = px.scatter(\n    df_umap, x=\"x\", y=\"y\", color=\"cluster\", hover_data={\"hover_text\": True}\n)\nfig.show()\n"],"headingContent":"HDBSCAN Clustering with Milvus","anchorList":[{"label":"Raggruppamento HDBSCAN con Milvus","href":"HDBSCAN-Clustering-with-Milvus","type":1,"isActive":false},{"label":"Preparazione","href":"Preparation","type":2,"isActive":false},{"label":"Scaricare i dati","href":"Download-Data","type":2,"isActive":false},{"label":"Estrarre gli embeddings in Milvus","href":"Extract-Embeddings-to-Milvus","type":2,"isActive":false},{"label":"Costruire la matrice di distanza per HDBSCAN","href":"Construct-the-Distance-Matrix-for-HDBSCAN","type":2,"isActive":false},{"label":"Visualizzazione dei cluster con UMAP","href":"Clusters-Visualization-using-UMAP","type":2,"isActive":false}]}