{"codeList":["from pymilvus import (\n    MilvusClient, DataType\n)\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nschema = client.create_schema()\n\nschema.add_field(field_name=\"id\",\n    datatype=DataType.INT64,\n    is_primary=True)\n    \nschema.add_field(field_name=\"vector\",\n    datatype=DataType.FLOAT_VECTOR,\n    dim=5)\n\n# Add the partition key\nschema.add_field(\n    field_name=\"my_varchar\", \n    datatype=DataType.VARCHAR, \n    max_length=512,\n    # highlight-next-line\n    is_partition_key=True,\n)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n\n// Create schema\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\n        \n// Add the partition key\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"my_varchar\")\n        .dataType(DataType.VarChar)\n        .maxLength(512)\n        // highlight-next-line\n        .isPartitionKey(true)\n        .build());\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nschema := entity.NewSchema().WithDynamicFieldEnabled(false)\nschema.WithField(entity.NewField().\n    WithName(\"id\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"my_varchar\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithIsPartitionKey(true).\n    WithMaxLength(512),\n).WithField(entity.NewField().\n    WithName(\"vector\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(5),\n)\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\n// 3. Create a collection in customized setup mode\n// 3.1 Define fields\nconst fields = [\n    {\n        name: \"my_varchar\",\n        data_type: DataType.VarChar,\n        max_length: 512,\n        // highlight-next-line\n        is_partition_key: true\n    }\n]\n","export schema='{\n        \"autoId\": true,\n        \"enabledDynamicField\": false,\n        \"fields\": [\n            {\n                \"fieldName\": \"id\",\n                \"dataType\": \"Int64\",\n                \"isPrimary\": true\n            },\n            {\n                \"fieldName\": \"vector\",\n                \"dataType\": \"FloatVector\",\n                \"elementTypeParams\": {\n                    \"dim\": \"5\"\n                }\n            },\n            {\n                \"fieldName\": \"my_varchar\",\n                \"dataType\": \"VarChar\",\n                \"isPartitionKey\": true,\n                \"elementTypeParams\": {\n                    \"max_length\": 512\n                }\n            }\n        ]\n    }'\n","client.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema,\n    # highlight-next-line\n    num_partitions=128\n)\n","import io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nCreateCollectionReq createCollectionReq = CreateCollectionReq.builder()\n                .collectionName(\"my_collection\")\n                .collectionSchema(schema)\n                .numPartitions(128)\n                .build();\n        client.createCollection(createCollectionReq);\n","err = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithNumPartitions(128))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","await client.create_collection({\n    collection_name: \"my_collection\",\n    schema: schema,\n    num_partitions: 128\n})\n","export params='{\n    \"partitionsNum\": 128\n}'\n\nexport CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"params\\\": $params\n}\"\n","# Filter based on a single partition key value, or\nfilter='partition_key == \"x\" && <other conditions>'\n\n# Filter based on multiple partition key values\nfilter='partition_key in [\"x\", \"y\", \"z\"] && <other conditions>'\n","// Filter based on a single partition key value, or\nString filter = \"partition_key == 'x' && <other conditions>\";\n\n// Filter based on multiple partition key values\nString filter = \"partition_key in ['x', 'y', 'z'] && <other conditions>\";\n","// Filter based on a single partition key value, or\nfilter = \"partition_key == 'x' && <other conditions>\"\n\n// Filter based on multiple partition key values\nfilter = \"partition_key in ['x', 'y', 'z'] && <other conditions>\"\n","// Filter based on a single partition key value, or\nconst filter = 'partition_key == \"x\" && <other conditions>'\n\n// Filter based on multiple partition key values\nconst filter = 'partition_key in [\"x\", \"y\", \"z\"] && <other conditions>'\n","# Filter based on a single partition key value, or\nexport filter='partition_key == \"x\" && <other conditions>'\n\n# Filter based on multiple partition key values\nexport filter='partition_key in [\"x\", \"y\", \"z\"] && <other conditions>'\n","client.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema,\n    # highlight-next-line\n    properties={\"partitionkey.isolation\": True}\n)\n","import io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMap<String, String> properties = new HashMap<>();\nproperties.put(\"partitionkey.isolation\", \"true\");\n\nCreateCollectionReq createCollectionReq = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .properties(properties)\n        .build();\nclient.createCollection(createCollectionReq);\n","err = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithProperty(\"partitionkey.isolation\", true))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","res = await client.alterCollection({\n    collection_name: \"my_collection\",\n    properties: {\n        \"partitionkey.isolation\": true\n    }\n})\n","export params='{\n    \"partitionKeyIsolation\": true\n}'\n\nexport CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"params\\\": $params\n}\"\n"],"headingContent":"Use Partition Key","anchorList":[{"label":"使用分区密钥","href":"Use-Partition-Key","type":1,"isActive":false},{"label":"概述","href":"Overview","type":2,"isActive":false},{"label":"使用分区密钥","href":"Use-Partition-Key","type":2,"isActive":false},{"label":"使用 Partition Key 隔离","href":"Use-Partition-Key-Isolation","type":2,"isActive":false}]}