{"codeList":["$ pip install \"dspy-ai[milvus]\"\n$ pip install -U pymilvus\n","from dspy.datasets import HotPotQA\n\n# Load the dataset.\ndataset = HotPotQA(\n    train_seed=1, train_size=20, eval_seed=2023, dev_size=50, test_size=0\n)\n\n# Tell DSPy that the 'question' field is the input. Any other fields are labels and/or metadata.\ntrainset = [x.with_inputs(\"question\") for x in dataset.train]\ndevset = [x.with_inputs(\"question\") for x in dataset.dev]\n","import requests\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"<YOUR_OPENAI_API_KEY>\"\nMILVUS_URI = \"example.db\"\nMILVUS_TOKEN = \"\"\n\nfrom pymilvus import MilvusClient, DataType, Collection\nfrom dspy.retrieve.milvus_rm import openai_embedding_function\n\nclient = MilvusClient(uri=MILVUS_URI, token=MILVUS_TOKEN)\n\nif \"dspy_example\" not in client.list_collections():\n    client.create_collection(\n        collection_name=\"dspy_example\",\n        overwrite=True,\n        dimension=1536,\n        primary_field_name=\"id\",\n        vector_field_name=\"embedding\",\n        id_type=\"int\",\n        metric_type=\"IP\",\n        max_length=65535,\n        enable_dynamic=True,\n    )\ntext = requests.get(\n    \"https://raw.githubusercontent.com/wxywb/dspy_dataset_sample/master/sample_data.txt\"\n).text\n\nfor idx, passage in enumerate(text.split(\"\\n\")):\n    if len(passage) == 0:\n        continue\n    client.insert(\n        collection_name=\"dspy_example\",\n        data=[\n            {\n                \"id\": idx,\n                \"embedding\": openai_embedding_function(passage)[0],\n                \"text\": passage,\n            }\n        ],\n    )\n","from dspy.retrieve.milvus_rm import MilvusRM\nimport dspy\n\nretriever_model = MilvusRM(\n    collection_name=\"dspy_example\",\n    uri=MILVUS_URI,\n    token=MILVUS_TOKEN,  # ignore this if no token is required for Milvus connection\n    embedding_function=openai_embedding_function,\n)\nturbo = dspy.OpenAI(model=\"gpt-3.5-turbo\")\ndspy.settings.configure(lm=turbo)\n","class GenerateAnswer(dspy.Signature):\n    \"\"\"Answer questions with short factoid answers.\"\"\"\n\n    context = dspy.InputField(desc=\"may contain relevant facts\")\n    question = dspy.InputField()\n    answer = dspy.OutputField(desc=\"often between 1 and 5 words\")\n","class RAG(dspy.Module):\n    def __init__(self, rm):\n        super().__init__()\n        self.retrieve = rm\n\n        # This signature indicates the task imposed on the COT module.\n        self.generate_answer = dspy.ChainOfThought(GenerateAnswer)\n\n    def forward(self, question):\n        # Use milvus_rm to retrieve context for the question.\n        context = self.retrieve(question).passages\n        # COT module takes \"context, query\" and output \"answer\".\n        prediction = self.generate_answer(context=context, question=question)\n        return dspy.Prediction(\n            context=[item.long_text for item in context], answer=prediction.answer\n        )\n","rag = RAG(retriever_model)\nprint(rag(\"who write At My Window\").answer)\n","from dspy.evaluate.evaluate import Evaluate\nfrom dspy.datasets import HotPotQA\n\nevaluate_on_hotpotqa = Evaluate(\n    devset=devset, num_threads=1, display_progress=False, display_table=5\n)\n\nmetric = dspy.evaluate.answer_exact_match\nscore = evaluate_on_hotpotqa(rag, metric=metric)\nprint(\"rag:\", score)\n","from dspy.teleprompt import BootstrapFewShot\n\n# Validation logic: check that the predicted answer is correct.# Also check that the retrieved context does contain that answer.\n\n\ndef validate_context_and_answer(example, pred, trace=None):\n    answer_EM = dspy.evaluate.answer_exact_match(example, pred)\n    answer_PM = dspy.evaluate.answer_passage_match(example, pred)\n    return answer_EM and answer_PM\n\n\n# Set up a basic teleprompter, which will compile our RAG program.\nteleprompter = BootstrapFewShot(metric=validate_context_and_answer)\n\n# Compile!\ncompiled_rag = teleprompter.compile(rag, trainset=trainset)\n\n# Now compiled_rag is optimized and ready to answer your new question!\n# Now, letâ€™s evaluate the compiled RAG program.\nscore = evaluate_on_hotpotqa(compiled_rag, metric=metric)\nprint(score)\nprint(\"compile_rag:\", score)\n"],"headingContent":"Integrate Milvus with DSPy","anchorList":[{"label":"Integrate Milvus with DSPy","href":"Integrate-Milvus-with-DSPy","type":1,"isActive":false},{"label":"What is DSPy","href":"What-is-DSPy","type":2,"isActive":false},{"label":"Benefits of using DSPy","href":"Benefits-of-using-DSPy","type":2,"isActive":false},{"label":"Modules","href":"Modules","type":2,"isActive":false},{"label":"Why Milvus in DSPy","href":"Why-Milvus-in-DSPy","type":2,"isActive":false},{"label":"Examples","href":"Examples","type":2,"isActive":false},{"label":"Summary","href":"Summary","type":2,"isActive":false}]}