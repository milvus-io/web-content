{"codeList":["$ pip install dynamiq pymilvus\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","# Importing necessary libraries for the workflow\nfrom io import BytesIO\nfrom dynamiq import Workflow\nfrom dynamiq.nodes import InputTransformer\nfrom dynamiq.connections import (\n    OpenAI as OpenAIConnection,\n    Milvus as MilvusConnection,\n    MilvusDeploymentType,\n)\nfrom dynamiq.nodes.converters import PyPDFConverter\nfrom dynamiq.nodes.splitters.document import DocumentSplitter\nfrom dynamiq.nodes.embedders import OpenAIDocumentEmbedder\nfrom dynamiq.nodes.writers import MilvusDocumentWriter\n\n# Initialize the workflow\nrag_wf = Workflow()\n","converter = PyPDFConverter(document_creation_mode=\"one-doc-per-page\")\nconverter_added = rag_wf.flow.add_nodes(\n    converter\n)  # Add node to the DAG (Directed Acyclic Graph)\n","document_splitter = DocumentSplitter(\n    split_by=\"sentence\",  # Splits documents into sentences\n    split_length=10,\n    split_overlap=1,\n    input_transformer=InputTransformer(\n        selector={\n            \"documents\": f\"${[converter.id]}.output.documents\",\n        },\n    ),\n).depends_on(\n    converter\n)  # Set dependency on the PDF converter\nsplitter_added = rag_wf.flow.add_nodes(document_splitter)  # Add to the DAG\n","embedder = OpenAIDocumentEmbedder(\n    connection=OpenAIConnection(api_key=os.environ[\"OPENAI_API_KEY\"]),\n    input_transformer=InputTransformer(\n        selector={\n            \"documents\": f\"${[document_splitter.id]}.output.documents\",\n        },\n    ),\n).depends_on(\n    document_splitter\n)  # Set dependency on the splitter\ndocument_embedder_added = rag_wf.flow.add_nodes(embedder)  # Add to the DAG\n","vector_store = (\n    MilvusDocumentWriter(\n        connection=MilvusConnection(\n            deployment_type=MilvusDeploymentType.FILE, uri=\"./milvus.db\"\n        ),\n        index_name=\"my_milvus_collection\",\n        dimension=1536,\n        create_if_not_exist=True,\n        metric_type=\"COSINE\",\n    )\n    .inputs(documents=embedder.outputs.documents)  # Connect to embedder output\n    .depends_on(embedder)  # Set dependency on the embedder\n)\nmilvus_writer_added = rag_wf.flow.add_nodes(vector_store)  # Add to the DAG\n","file_paths = [\"./pdf_files/WhatisMilvus.pdf\"]\ninput_data = {\n    \"files\": [BytesIO(open(path, \"rb\").read()) for path in file_paths],\n    \"metadata\": [{\"filename\": path} for path in file_paths],\n}\n\n# Run the workflow with the prepared input data\ninserted_data = rag_wf.run(input_data=input_data)\n","from dynamiq import Workflow\nfrom dynamiq.connections import (\n    OpenAI as OpenAIConnection,\n    Milvus as MilvusConnection,\n    MilvusDeploymentType,\n)\nfrom dynamiq.nodes.embedders import OpenAITextEmbedder\nfrom dynamiq.nodes.retrievers import MilvusDocumentRetriever\nfrom dynamiq.nodes.llms import OpenAI\nfrom dynamiq.prompts import Message, Prompt\n\n# Initialize the workflow\nretrieval_wf = Workflow()\n","# Establish OpenAI connection\nopenai_connection = OpenAIConnection(api_key=os.environ[\"OPENAI_API_KEY\"])\n\n# Define the text embedder node\nembedder = OpenAITextEmbedder(\n    connection=openai_connection,\n    model=\"text-embedding-3-small\",\n)\n\n# Add the embedder node to the workflow\nembedder_added = retrieval_wf.flow.add_nodes(embedder)\n","document_retriever = (\n    MilvusDocumentRetriever(\n        connection=MilvusConnection(\n            deployment_type=MilvusDeploymentType.FILE, uri=\"./milvus.db\"\n        ),\n        index_name=\"my_milvus_collection\",\n        dimension=1536,\n        top_k=5,\n    )\n    .inputs(embedding=embedder.outputs.embedding)  # Connect to embedder output\n    .depends_on(embedder)  # Dependency on the embedder node\n)\n\n# Add the retriever node to the workflow\nmilvus_retriever_added = retrieval_wf.flow.add_nodes(document_retriever)\n","# Define the prompt template for the LLM\nprompt_template = \"\"\"\nPlease answer the question based on the provided context.\n\nQuestion: {{ query }}\n\nContext:\n{% for document in documents %}\n- {{ document.content }}\n{% endfor %}\n\"\"\"\n\n# Create the prompt object\nprompt = Prompt(messages=[Message(content=prompt_template, role=\"user\")])\n","answer_generator = (\n    OpenAI(\n        connection=openai_connection,\n        model=\"gpt-4o\",\n        prompt=prompt,\n    )\n    .inputs(\n        documents=document_retriever.outputs.documents,\n        query=embedder.outputs.query,\n    )\n    .depends_on(\n        [document_retriever, embedder]\n    )  # Dependencies on retriever and embedder\n)\n\n# Add the answer generator node to the workflow\nanswer_generator_added = retrieval_wf.flow.add_nodes(answer_generator)\n","# Run the workflow with a sample query\nsample_query = \"What is the Advanced Search Algorithms in Milvus?\"\n\nresult = retrieval_wf.run(input_data={\"query\": sample_query})\n\nanswer = result.output.get(answer_generator.id).get(\"output\", {}).get(\"content\")\nprint(answer)\n"],"headingContent":"Getting Started with Dynamiq and Milvus","anchorList":[{"label":"开始使用 Dynamiq 和 Milvus","href":"Getting-Started-with-Dynamiq-and-Milvus","type":1,"isActive":false},{"label":"准备工作","href":"Preparation","type":2,"isActive":false},{"label":"RAG - 文档索引流程","href":"RAG---Document-Indexing-Flow","type":2,"isActive":false},{"label":"RAG 文档检索流程","href":"RAG-Document-Retrieval-Flow","type":2,"isActive":false}]}