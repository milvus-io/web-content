{"codeList":["$ pip install --upgrade voyageai pymilvus\n","import voyageai\nfrom pymilvus import MilvusClient\n\nMODEL_NAME = \"voyage-law-2\"  # Which model to use, please check https://docs.voyageai.com/docs/embeddings for available models\nDIMENSION = 1024  # Dimension of vector embedding\n\n# Connect to VoyageAI with API Key.\nvoyage_client = voyageai.Client(api_key=\"<YOUR_VOYAGEAI_API_KEY>\")\n\ndocs = [\n    \"Artificial intelligence was founded as an academic discipline in 1956.\",\n    \"Alan Turing was the first person to conduct substantial research in AI.\",\n    \"Born in Maida Vale, London, Turing was raised in southern England.\",\n]\n\nvectors = voyage_client.embed(texts=docs, model=MODEL_NAME, truncation=False).embeddings\n\n# Prepare data to be stored in Milvus vector database.\n# We can store the id, vector representation, raw text and labels such as \"subject\" in this case in Milvus.\ndata = [\n    {\"id\": i, \"vector\": vectors[i], \"text\": docs[i], \"subject\": \"history\"}\n    for i in range(len(docs))\n]\n\n\n# Connect to Milvus, all data is stored in a local file named \"milvus_voyage_demo.db\"\n# in current directory. You can also connect to a remote Milvus server following this\n# instruction: https://milvus.io/docs/install_standalone-docker.md.\nmilvus_client = MilvusClient(uri=\"milvus_voyage_demo.db\")\nCOLLECTION_NAME = \"demo_collection\"  # Milvus collection name\n# Create a collection to store the vectors and text.\nif milvus_client.has_collection(collection_name=COLLECTION_NAME):\n    milvus_client.drop_collection(collection_name=COLLECTION_NAME)\nmilvus_client.create_collection(collection_name=COLLECTION_NAME, dimension=DIMENSION)\n\n# Insert all data into Milvus vector database.\nres = milvus_client.insert(collection_name=\"demo_collection\", data=data)\n\nprint(res[\"insert_count\"])\n","queries = [\"When was artificial intelligence founded?\"]\n\nquery_vectors = voyage_client.embed(\n    texts=queries, model=MODEL_NAME, truncation=False\n).embeddings\n\nres = milvus_client.search(\n    collection_name=COLLECTION_NAME,  # target collection\n    data=query_vectors,  # query vectors\n    limit=2,  # number of returned entities\n    output_fields=[\"text\", \"subject\"],  # specifies fields to be returned\n)\n\nfor q in queries:\n    print(\"Query:\", q)\n    for result in res:\n        print(result)\n    print(\"\\n\")\n","import base64\nimport voyageai\nfrom pymilvus import MilvusClient\nimport urllib.request\nimport matplotlib.pyplot as plt\nfrom io import BytesIO\nimport urllib.request\nimport fitz  # PyMuPDF\nfrom PIL import Image\n","def pdf_url_to_screenshots(url: str, zoom: float = 1.0) -> list[Image]:\n\n    # Ensure that the URL is valid\n    if not url.startswith(\"http\") and url.endswith(\".pdf\"):\n        raise ValueError(\"Invalid URL\")\n\n    # Read the PDF from the specified URL\n    with urllib.request.urlopen(url) as response:\n        pdf_data = response.read()\n    pdf_stream = BytesIO(pdf_data)\n    pdf = fitz.open(stream=pdf_stream, filetype=\"pdf\")\n\n    images = []\n\n    # Loop through each page, render as pixmap, and convert to PIL Image\n    mat = fitz.Matrix(zoom, zoom)\n    for n in range(pdf.page_count):\n        pix = pdf[n].get_pixmap(matrix=mat)\n\n        # Convert pixmap to PIL Image\n        img = Image.frombytes(\"RGB\", [pix.width, pix.height], pix.samples)\n        images.append(img)\n\n    # Close the document\n    pdf.close()\n\n    return images\n\n\ndef image_to_base64(image):\n    buffered = BytesIO()\n    image.save(buffered, format=\"JPEG\")\n    img_str = base64.b64encode(buffered.getvalue())\n    return img_str.decode(\"utf-8\")\n\nDIMENSION = 1024  # Dimension of vector embedding\n","pages = pdf_url_to_screenshots(\"https://www.fdrlibrary.org/documents/356632/390886/readingcopy.pdf\", zoom=3.0)\ninputs = [[img] for img in pages]\n\nvectors = client.multimodal_embed(inputs, model=\"voyage-multimodal-3\")\n\ninputs = [i[0] if isinstance(i[0], str) else image_to_base64(i[0]) for i in inputs]\n# Prepare data to be stored in Milvus vector database.\n# We can store the id, vector representation, raw text and labels such as \"subject\" in this case in Milvus.\ndata = [\n    {\"id\": i, \"vector\": vectors.embeddings[i], \"data\": inputs[i], \"subject\": \"fruits\"}\n    for i in range(len(inputs))\n]\n","milvus_client = MilvusClient(uri=\"milvus_voyage_multi_demo.db\")\nCOLLECTION_NAME = \"demo_collection\"  # Milvus collection name\n# Create a collection to store the vectors and text.\nif milvus_client.has_collection(collection_name=COLLECTION_NAME):\n    milvus_client.drop_collection(collection_name=COLLECTION_NAME)\nmilvus_client.create_collection(collection_name=COLLECTION_NAME, dimension=DIMENSION)\n\n# Insert all data into Milvus vector database.\nres = milvus_client.insert(collection_name=\"demo_collection\", data=data)\n\nprint(res[\"insert_count\"])\n","queries = [[\"The consequences of a dictator's peace\"]]\n\nquery_vectors = client.multimodal_embed(\n    inputs=queries, model=\"voyage-multimodal-3\", truncation=False\n).embeddings\n\nres = milvus_client.search(\n    collection_name=COLLECTION_NAME,  # target collection\n    data=query_vectors,  # query vectors\n    limit=4,  # number of returned entities\n    output_fields=[\"data\", \"subject\"],  # specifies fields to be returned\n)\n\nfor q in queries:\n    print(\"Query:\", q)\n    for result in res:\n        fig, axes = plt.subplots(1, len(result), figsize=(66, 6))\n        for n, page in enumerate(result):\n            page_num = page['id']\n            axes[n].imshow(pages[page_num])\n            axes[n].axis(\"off\")\n\n    plt.tight_layout()\n    plt.show()\n"],"headingContent":"Semantic Search with Milvus and VoyageAI","anchorList":[{"label":"使用Milvus和VoyageAI进行语义搜索","href":"Semantic-Search-with-Milvus-and-VoyageAI","type":1,"isActive":false},{"label":"开始","href":"Getting-started","type":2,"isActive":false},{"label":"使用 VoyageAI 和 Milvus 搜索书名","href":"Searching-book-titles-with-VoyageAI--Milvus","type":2,"isActive":false},{"label":"使用 VoyageAI 和 Milvus 搜索图像","href":"Searching-images-with-VoyageAI--Milvus","type":2,"isActive":false}]}