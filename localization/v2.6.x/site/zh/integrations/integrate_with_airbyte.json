{"codeList":["pip install streamlit pymilvus openai\n","import streamlit as st\n\nwith st.form(\"my_form\"):\n    st.write(\"Submit a support case\")\n    text_val = st.text_area(\"Describe your problem\")\n\n    submitted = st.form_submit_button(\"Submit\")\n    if submitted:\n        # TODO check for related support cases and articles\n        st.write(\"Submitted!\")\n","streamlit run basic_support_form.py\n","import streamlit as st\nimport os\nimport pymilvus\nimport openai\n\n\nwith st.form(\"my_form\"):\n    st.write(\"Submit a support case\")\n    text_val = st.text_area(\"Describe your problem?\")\n\n    submitted = st.form_submit_button(\"Submit\")\n    if submitted:\n        import os\n        import pymilvus\n        import openai\n\n        org_id = 360033549136 # TODO Load from customer login data\n\n        pymilvus.connections.connect(uri=os.environ[\"MILVUS_URL\"], token=os.environ[\"MILVUS_TOKEN\"])\n        collection = pymilvus.Collection(\"zendesk\")\n\n        embedding = openai.Embedding.create(input=text_val, model=\"text-embedding-ada-002\")['data'][0]['embedding']\n\n        results = collection.search(data=[embedding], anns_field=\"vector\", param={}, limit=2, output_fields=[\"_id\", \"subject\", \"description\"], expr=f'status == \"new\" and organization_id == {org_id}')\n\n        st.write(results[0])\n        if len(results[0]) > 0 and results[0].distances[0] < 0.35:\n            matching_ticket = results[0][0].entity\n            st.write(f\"This case seems very similar to {matching_ticket.get('subject')} (id #{matching_ticket.get('_id')}). Make sure it has not been submitted before\")\n        else:\n            st.write(\"Submitted!\")\n            \n","export MILVUS_TOKEN=...\nexport MILVUS_URL=https://...\nexport OPENAI_API_KEY=sk-...\n\nstreamlit run app.py\n","   ......\n   \n        else:\n            # TODO Actually send out the ticket\n            st.write(\"Submitted!\")\n            article_results = collection.search(data=[embedding], anns_field=\"vector\", param={}, limit=5, output_fields=[\"title\", \"html_url\"], expr=f'_ab_stream == \"articles\"')\n            st.write(article_results[0])\n            if len(article_results[0]) > 0:\n                st.write(\"We also found some articles that might help you:\")\n                for hit in article_results[0]:\n                    if hit.distance < 0.362:\n                        st.write(f\"* [{hit.entity.get('title')}]({hit.entity.get('html_url')})\")\n\n"],"headingContent":"Airbyte: Open-Source Data Movement Infrastructure","anchorList":[{"label":"Airbyte: Open-Source Data Movement Infrastructure","href":"Airbyte-Open-Source-Data-Movement-Infrastructure","type":1,"isActive":false},{"label":"Major Components of Airbyte","href":"Major-Components-of-Airbyte","type":2,"isActive":false},{"label":"Before You Begin","href":"Before-You-Begin","type":2,"isActive":false},{"label":"Set Up Milvus Cluster","href":"Set-Up-Milvus-Cluster","type":2,"isActive":false},{"label":"Set Up Connection in Airbyte","href":"Set-Up-Connection-in-Airbyte","type":2,"isActive":false},{"label":"Build Streamlit app querying the collection","href":"Build-Streamlit-app-querying-the-collection","type":2,"isActive":false},{"label":"Conclusion","href":"Conclusion","type":2,"isActive":false}]}