{"codeList":["from pymilvus import MilvusClient\n\nschema = MilvusClient.create_schema()\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\n// 2. Create an empty schema\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\n//Skip this step using JavaScript\n","import \"github.com/milvus-io/milvus/client/v2/entity\"\n\nschema := entity.NewSchema()\n","# Skip this step using cURL\n","from pymilvus import DataType\n\nschema.add_field(field_name=\"article_id\", datatype=DataType.INT64, is_primary=True, auto_id=True, description=\"article id\")\nschema.add_field(field_name=\"title\", datatype=DataType.VARCHAR, enable_analyzer=True, enable_match=True, max_length=200, description=\"article title\")\nschema.add_field(field_name=\"timestamp\", datatype=DataType.INT32, description=\"publish date\")\nschema.add_field(field_name=\"text\", datatype=DataType.VARCHAR, max_length=2000, enable_analyzer=True, description=\"article text content\")\nschema.add_field(field_name=\"text_dense_vector\", datatype=DataType.FLOAT_VECTOR, dim=768, description=\"text dense vector\")\nschema.add_field(field_name=\"text_sparse_vector\", datatype=DataType.SPARSE_FLOAT_VECTOR, description=\"text sparse vector\")\n","import io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"article_id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .autoID(true)\n        .build());\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"title\")\n        .dataType(DataType.VarChar)\n        .maxLength(200)\n        .enableAnalyzer(true)\n        .enableMatch(true)\n        .build());\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"timestamp\")\n        .dataType(DataType.Int32)\n        .build())\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"text\")\n        .dataType(DataType.VarChar)\n        .maxLength(2000)\n        .enableAnalyzer(true)\n        .build());\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"text_dense_vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(768)\n        .build());\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"text_sparse_vector\")\n        .dataType(DataType.SparseFloatVector)\n        .build());\n","const fields = [\n    {\n        name: \"article_id\",\n        data_type: DataType.Int64,\n        is_primary_key: true,\n        auto_id: true\n    },\n    {\n        name: \"title\",\n        data_type: DataType.VarChar,\n        max_length: 200,\n        enable_analyzer: true,\n        enable_match: true\n    },\n    {\n        name: \"timestamp\",\n        data_type: DataType.Int32\n    },\n    {\n        name: \"text\",\n        data_type: DataType.VarChar,\n        max_length: 2000,\n        enable_analyzer: true\n    },\n    {\n        name: \"text_dense_vector\",\n        data_type: DataType.FloatVector,\n        dim: 768\n    },\n    {\n        name: \"text_sparse_vector\",\n        data_type: DataType.SparseFloatVector\n    }\n]\n","schema.WithField(entity.NewField().\n    WithName(\"article_id\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true).\n    WithIsAutoID(true).\n    WithDescription(\"article id\"),\n).WithField(entity.NewField().\n    WithName(\"title\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithMaxLength(200).\n    WithEnableAnalyzer(true).\n    WithEnableMatch(true).\n    WithDescription(\"article title\"),\n).WithField(entity.NewField().\n    WithName(\"timestamp\").\n    WithDataType(entity.FieldTypeInt32).\n    WithDescription(\"publish date\"),\n).WithField(entity.NewField().\n    WithName(\"text\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithMaxLength(2000).\n    WithEnableAnalyzer(true).\n    WithDescription(\"article text content\"),\n).WithField(entity.NewField().\n    WithName(\"text_dense_vector\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(768).\n    WithDescription(\"text dense vector\"),\n).WithField(entity.NewField().\n    WithName(\"text_sparse_vector\").\n    WithDataType(entity.FieldTypeSparseVector).\n    WithDescription(\"text sparse vector\"),\n)\n","export fields='[\n    {\n        \"fieldName\": \"article_id\",\n        \"dataType\": \"Int64\",\n        \"isPrimary\": true\n    },\n    {\n        \"fieldName\": \"title\",\n        \"dataType\": \"VarChar\",\n        \"elementTypeParams\": {\n            \"max_length\": 200,\n            \"enable_analyzer\": true,\n            \"enable_match\": true\n        }\n    },\n    {\n        \"fieldName\": \"timestamp\",\n        \"dataType\": \"Int32\"\n    },\n    {\n       \"fieldName\": \"text\",\n       \"dataType\": \"VarChar\",\n       \"elementTypeParams\": {\n            \"max_length\": 2000,\n            \"enable_analyzer\": true\n        }\n    },\n    {\n       \"fieldName\": \"text_dense_vector\",\n       \"dataType\": \"FloatVector\",\n       \"elementTypeParams\": {\n            \"dim\": 768\n        }\n    },\n    {\n       \"fieldName\": \"text_sparse_vector\",\n       \"dataType\": \"SparseFloatVector\",\n    }\n]'\n\nexport schema=\"{\n    \\\"autoID\\\": true,\n    \\\"fields\\\": $fields\n}\"\n","from pymilvus import Function, FunctionType\n\nbm25_function = Function(\n    name=\"text_bm25\",\n    input_field_names=[\"text\"],\n    output_field_names=[\"text_sparse_vector\"],\n    function_type=FunctionType.BM25,\n)\n\nschema.add_function(bm25_function)\n","import io.milvus.common.clientenum.FunctionType;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq.Function;\n\nimport java.util.*;\n\nschema.addFunction(Function.builder()\n        .functionType(FunctionType.BM25)\n        .name(\"text_bm25\")\n        .inputFieldNames(Collections.singletonList(\"text\"))\n        .outputFieldNames(Collections.singletonList(\"text_sparse_vector\"))\n        .build());\n","import FunctionType from \"@zilliz/milvus2-sdk-node\";\n\nconst functions = [\n    {\n      name: 'text_bm25',\n      description: 'bm25 function',\n      type: FunctionType.BM25,\n      input_field_names: ['text'],\n      output_field_names: ['text_sparse_vector'],\n      params: {},\n    },\n]；\n","function := entity.NewFunction().\n    WithName(\"text_bm25\").\n    WithInputFields(\"text\").\n    WithOutputFields(\"text_sparse_vector\").\n    WithType(entity.FunctionTypeBM25)\nschema.WithFunction(function)\n","export myFunctions='[\n    {\n        \"name\": \"text_bm25\",\n        \"type\": \"BM25\",\n        \"inputFieldNames\": [\"text\"],\n        \"outputFieldNames\": [\"text_sparse_vector\"],\n        \"params\": {}\n    }\n]'\n\nexport schema=\"{\n    \\\"autoID\\\": true,\n    \\\"fields\\\": $fields\n    \\\"functions\\\": $myFunctions\n}\"\n"],"headingContent":"Data Model Design for Search","anchorList":[{"label":"تصميم نموذج البيانات للبحث","href":"Data-Model-Design-for-Search","type":1,"isActive":false},{"label":"نموذج البيانات","href":"Data-Model","type":2,"isActive":false},{"label":"تصميم المخطط","href":"Schema-Design","type":2,"isActive":false},{"label":"الاستفادة من الميزات المتقدمة في تصميم المخطط","href":"Leverage-Advanced-Features-in-Schema-Design","type":2,"isActive":false},{"label":"مثال من العالم الحقيقي","href":"A-Real-World-Example","type":2,"isActive":false},{"label":"الخطوات التالية","href":"Next-Steps","type":2,"isActive":false}]}