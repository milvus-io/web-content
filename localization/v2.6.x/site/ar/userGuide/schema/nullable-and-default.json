{"codeList":["from pymilvus import MilvusClient, DataType\n\nclient = MilvusClient(uri='http://localhost:19530')\n\n# Define collection schema\nschema = client.create_schema(\n    auto_id=False,\n    enable_dynamic_schema=True,\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5)\nschema.add_field(field_name=\"age\", datatype=DataType.INT64, nullable=True) # Nullable field\n\n# Set index params\nindex_params = client.prepare_index_params()\nindex_params.add_index(field_name=\"vector\", index_type=\"AUTOINDEX\", metric_type=\"L2\")\n\n# Create collection\nclient.create_collection(collection_name=\"my_collection\", schema=schema, index_params=index_params)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.common.IndexParam;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nimport java.util.*;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build());\n        \nCreateCollectionReq.CollectionSchema schema = client.createSchema();\nschema.setEnableDynamicField(true);\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"age\")\n        .dataType(DataType.Int64)\n        .isNullable(true)\n        .build());\n\nList<IndexParam> indexes = new ArrayList<>();\nMap<String,Object> extraParams = new HashMap<>();\n\nindexes.add(IndexParam.builder()\n        .fieldName(\"vector\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.L2)\n        .build());\n\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexes)\n        .build();\nclient.createCollection(requestCreate);\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst client = new MilvusClient({\n  address: \"http://localhost:19530\",\n  token: \"root:Milvus\",\n});\n\nawait client.createCollection({\n  collection_name: \"my_collection\",\n  schema: [\n    {\n      name: \"id\",\n      is_primary_key: true,\n      data_type: DataType.int64,\n    },\n    { name: \"vector\", data_type: DataType.Int64, dim: 5 },\n\n    { name: \"age\", data_type: DataType.FloatVector, nullable: true },\n  ],\n\n  index_params: [\n    {\n      index_name: \"vector_inde\",\n      field_name: \"vector\",\n      metric_type: MetricType.L2,\n      index_type: IndexType.AUTOINDEX,\n    },\n  ],\n});\n\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nschema := entity.NewSchema()\nschema.WithField(entity.NewField().\n    WithName(\"id\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"vector\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(5),\n).WithField(entity.NewField().\n    WithName(\"age\").\n    WithDataType(entity.FieldTypeInt64).\n    WithNullable(true),\n)\n\nindexOption := milvusclient.NewCreateIndexOption(\"my_collection\", \"vector\",\n    index.NewAutoIndex(index.MetricType(entity.L2)))\n\nerr = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithIndexOptions(indexOption))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","export pkField='{\n    \"fieldName\": \"id\",\n    \"dataType\": \"Int64\",\n    \"isPrimary\": true\n}'\n\nexport vectorField='{\n    \"fieldName\": \"vector\",\n    \"dataType\": \"FloatVector\",\n    \"elementTypeParams\": {\n        \"dim\": 5\n    }\n}'\n\nexport nullField='{\n    \"fieldName\": \"age\",\n    \"dataType\": \"Int64\",\n    \"nullable\": true\n}'\n\nexport schema=\"{\n    \\\"autoID\\\": false,\n    \\\"fields\\\": [\n        $pkField,\n        $vectorField,\n        $nullField\n    ]\n}\"\n\nexport indexParams='[\n        {\n            \"fieldName\": \"vector\",\n            \"metricType\": \"L2\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n","data = [\n    {\"id\": 1, \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5], \"age\": 30},\n    {\"id\": 2, \"vector\": [0.2, 0.3, 0.4, 0.5, 0.6], \"age\": None},\n    {\"id\": 3, \"vector\": [0.3, 0.4, 0.5, 0.6, 0.7]}\n]\n\nclient.insert(collection_name=\"my_collection\", data=data)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.InsertResp;\n\nList<JsonObject> rows = new ArrayList<>();\nGson gson = new Gson();\nrows.add(gson.fromJson(\"{\\\"id\\\": 1, \\\"vector\\\": [0.1, 0.2, 0.3, 0.4, 0.5], \\\"age\\\": 30}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"id\\\": 2, \\\"vector\\\": [0.2, 0.3, 0.4, 0.5, 0.6], \\\"age\\\": null}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"id\\\": 3, \\\"vector\\\": [0.3, 0.4, 0.5, 0.6, 0.7]}\", JsonObject.class));\n\nInsertResp insertR = client.insert(InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(rows)\n        .build());\n","const data = [\n  { id: 1, vector: [0.1, 0.2, 0.3, 0.4, 0.5], age: 30 },\n  { id: 2, vector: [0.2, 0.3, 0.4, 0.5, 0.6], age: null },\n  { id: 3, vector: [0.3, 0.4, 0.5, 0.6, 0.7] },\n];\n\nclient.insert({\n  collection_name: \"my_collection\",\n  data: data,\n});\n\n","column, _ := column.NewNullableColumnInt64(\"age\",\n    []int64{30},\n    []bool{true, false, false})\n\n_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"id\", []int64{1, 2, 3}).\n    WithFloatVectorColumn(\"vector\", 5, [][]float32{\n        {0.1, 0.2, 0.3, 0.4, 0.5},\n        {0.2, 0.3, 0.4, 0.5, 0.6},\n        {0.3, 0.4, 0.5, 0.6, 0.7},\n    }).\n    WithColumns(column),\n)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"id\": 1, \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5], \"age\": 30},\n        {\"id\": 2, \"vector\": [0.2, 0.3, 0.4, 0.5, 0.6], \"age\": null}, \n        {\"id\": 3, \"vector\": [0.3, 0.4, 0.5, 0.6, 0.7]} \n    ],\n    \"collectionName\": \"my_collection\"\n}'\n","res = client.search(\n    collection_name=\"my_collection\",\n    data=[[0.1, 0.2, 0.4, 0.3, 0.128]],\n    limit=2,\n    search_params={\"params\": {\"nprobe\": 16}},\n    output_fields=[\"id\", \"age\"]\n)\n\nprint(res)\n\n# Output\n# data: [\"[{'id': 1, 'distance': 0.15838398039340973, 'entity': {'age': 30, 'id': 1}}, {'id': 2, 'distance': 0.28278401494026184, 'entity': {'age': None, 'id': 2}}]\"] \n","import io.milvus.v2.service.vector.request.SearchReq;\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nMap<String,Object> params = new HashMap<>();\nparams.put(\"nprobe\", 16);\nSearchResp resp = client.search(SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .annsField(\"vector\")\n        .data(Collections.singletonList(new FloatVec(new float[]{0.1f, 0.2f, 0.3f, 0.4f, 0.5f})))\n        .topK(2)\n        .searchParams(params)\n        .outputFields(Arrays.asList(\"id\", \"age\"))\n        .build());\n\nSystem.out.println(resp.getSearchResults());\n\n// Output\n//\n// [[SearchResp.SearchResult(entity={id=1, age=30}, score=0.0, id=1), SearchResp.SearchResult(entity={id=2, age=null}, score=0.050000004, id=2)]]\n","client.search({\n    collection_name: 'my_collection',\n    data: [0.3, -0.6, 0.1, 0.3, 0.5],\n    limit: 2,\n    output_fields: ['age', 'id'],\n    params: {\n        nprobe: 16\n    }\n});\n","queryVector := []float32{0.1, 0.2, 0.4, 0.3, 0.128}\n\nannParam := index.NewCustomAnnParam()\nannParam.WithExtraParam(\"nprobe\", 16)\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    2,                    // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithANNSField(\"vector\").\n    WithAnnParam(annParam).\n    WithOutputFields(\"id\", \"age\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"age: \", resultSet.GetColumn(\"age\").FieldData().GetScalars())\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.1, -0.2, 0.3, 0.4, 0.5]\n    ],\n    \"annsField\": \"vector\",\n    \"limit\": 2,\n    \"outputFields\": [\"id\", \"age\"]\n}'\n\n#{\"code\":0,\"cost\":0,\"data\":[{\"age\":30,\"distance\":0.16000001,\"id\":1},{\"age\":null,\"distance\":0.28999996,\"id\":2}]}\n","# Reviewing previously inserted data:\n# {\"id\": 1, \"vector\": [0.1, 0.2, ..., 0.128], \"age\": 30}\n# {\"id\": 2, \"vector\": [0.2, 0.3, ..., 0.129], \"age\": None}\n# {\"id\": 3, \"vector\": [0.3, 0.4, ..., 0.130], \"age\": None}  # Omitted age  column is treated as None\n\nresults = client.query(\n    collection_name=\"my_collection\",\n    filter=\"age >= 0\",\n    output_fields=[\"id\", \"age\"]\n)\n\n# Example output:\n# [\n#     {\"id\": 1, \"age\": 30}\n# ]\n# Note: Entities with `age` as `null` (id 2 and 3) will not appear in the result.\n","import io.milvus.v2.service.vector.request.QueryReq;\nimport io.milvus.v2.service.vector.response.QueryResp;\n\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(\"age >= 0\")\n        .outputFields(Arrays.asList(\"id\", \"age\"))\n        .build());\n\nSystem.out.println(resp.getQueryResults());\n\n// Output\n//\n// [QueryResp.QueryResult(entity={id=1, age=30})]\n","const results = await client.query(\n    collection_name: \"my_collection\",\n    filter: \"age >= 0\",\n    output_fields: [\"id\", \"age\"]\n);\n","resultSet, err := client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(\"age >= 0\").\n    WithOutputFields(\"id\", \"age\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"id: \", resultSet.GetColumn(\"id\").FieldData().GetScalars())\nfmt.Println(\"age: \", resultSet.GetColumn(\"age\").FieldData().GetScalars())\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"age >= 0\",\n    \"outputFields\": [\"id\", \"age\"]\n}'\n\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":30,\"id\":1}]}\n","null_results = client.query(\n    collection_name=\"my_collection\",\n    filter=\"\",     # Query without any filtering condition\n    output_fields=[\"id\", \"age\"],\n    limit=10\n)\n\n# Example output:\n# [{\"id\": 2, \"age\": None}, {\"id\": 3, \"age\": None}]\n","QueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(\"\")\n        .outputFields(Arrays.asList(\"id\", \"age\"))\n        .limit(10)\n        .build());\n\nSystem.out.println(resp.getQueryResults());\n","const results = await client.query(\n    collection_name: \"my_collection\",\n    filter: \"\",\n    output_fields: [\"id\", \"age\"],\n    limit: 10\n);\n","resultSet, err = client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(\"\").\n    WithLimit(10).\n    WithOutputFields(\"id\", \"age\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"id: \", resultSet.GetColumn(\"id\"))\nfmt.Println(\"age: \", resultSet.GetColumn(\"age\"))\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"expr\": \"\",\n    \"outputFields\": [\"id\", \"age\"],\n    \"limit\": 10\n}'\n\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":30,\"id\":1},{\"age\":null,\"id\":2},{\"age\":null,\"id\":3}]}\n","schema = client.create_schema(\n    auto_id=False,\n    enable_dynamic_schema=True,\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5)\nschema.add_field(field_name=\"age\", datatype=DataType.INT64, default_value=18)\nschema.add_field(field_name=\"status\", datatype=DataType.VARCHAR, default_value=\"active\", max_length=10)\n\nindex_params = client.prepare_index_params()\nindex_params.add_index(field_name=\"vector\", index_type=\"AUTOINDEX\", metric_type=\"L2\")\n\nclient.create_collection(collection_name=\"my_collection\", schema=schema, index_params=index_params)\n","import io.milvus.v2.common.DataType;\nimport io.milvus.v2.common.IndexParam;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nimport java.util.*;\n\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\nschema.setEnableDynamicField(true);\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"age\")\n        .dataType(DataType.Int64)\n        .defaultValue(18L)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"status\")\n        .dataType(DataType.VarChar)\n        .maxLength(10)\n        .defaultValue(\"active\")\n        .build());\n\nList<IndexParam> indexes = new ArrayList<>();\nMap<String,Object> extraParams = new HashMap<>();\n\nindexes.add(IndexParam.builder()\n        .fieldName(\"vector\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.L2)\n        .build());\n\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexes)\n        .build();\nclient.createCollection(requestCreate);\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst client = new MilvusClient({\n  address: \"http://localhost:19530\",\n  token: \"root:Milvus\",\n});\n\nawait client.createCollection({\n  collection_name: \"my_collection\",\n  schema: [\n    {\n      name: \"id\",\n      is_primary_key: true,\n      data_type: DataType.int64,\n    },\n    { name: \"vector\", data_type: DataType.FloatVector, dim: 5 },\n    { name: \"age\", data_type: DataType.Int64, default_value: 18 },\n    { name: 'status', data_type: DataType.VarChar, max_length: 30, default_value: 'active'},\n  ],\n\n  index_params: [\n    {\n      index_name: \"vector_inde\",\n      field_name: \"vector\",\n      metric_type: MetricType.L2,\n      index_type: IndexType.AUTOINDEX,\n    },\n  ],\n});\n\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nschema := entity.NewSchema()\nschema.WithField(entity.NewField().\n    WithName(\"id\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"vector\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(5),\n).WithField(entity.NewField().\n    WithName(\"age\").\n    WithDataType(entity.FieldTypeInt64).\n    WithDefaultValueLong(18),\n).WithField(entity.NewField().\n    WithName(\"status\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithMaxLength(10).\n    WithDefaultValueString(\"active\"),\n)\n\nindexOption := milvusclient.NewCreateIndexOption(\"my_collection\", \"vector\",\n    index.NewAutoIndex(index.MetricType(entity.L2)))\n\nerr = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithIndexOptions(indexOption))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","export pkField='{\n    \"fieldName\": \"id\",\n    \"dataType\": \"Int64\",\n    \"isPrimary\": true\n}'\n\nexport vectorField='{\n    \"fieldName\": \"vector\",\n    \"dataType\": \"FloatVector\",\n    \"elementTypeParams\": {\n        \"dim\": 5\n    }\n}'\n\nexport defaultValueField1='{\n    \"fieldName\": \"age\",\n    \"dataType\": \"Int64\",\n    \"defaultValue\": 18\n}'\n\nexport defaultValueField2='{\n    \"fieldName\": \"status\",\n    \"dataType\": \"VarChar\",\n    \"defaultValue\": \"active\",\n    \"elementTypeParams\": {\n        \"max_length\": 10\n    }\n}'\n\nexport schema=\"{\n    \\\"autoID\\\": false,\n    \\\"fields\\\": [\n        $pkField,\n        $vectorField,\n        $defaultValueField1,\n        $defaultValueField2\n    ]\n}\"\n\nexport indexParams='[\n        {\n            \"fieldName\": \"vector\",\n            \"metricType\": \"L2\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n","data = [\n    {\"id\": 1, \"vector\": [0.1, 0.2, ..., 0.128], \"age\": 30, \"status\": \"premium\"},\n    {\"id\": 2, \"vector\": [0.2, 0.3, ..., 0.129]},  # `age` and `status` use default values\n    {\"id\": 3, \"vector\": [0.3, 0.4, ..., 0.130], \"age\": 25, \"status\": None},  # `status` uses default value\n    {\"id\": 4, \"vector\": [0.4, 0.5, ..., 0.131], \"age\": None, \"status\": \"inactive\"}  # `age` uses default value\n]\n\nclient.insert(collection_name=\"my_collection\", data=data)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.InsertResp;\n\nList<JsonObject> rows = new ArrayList<>();\nGson gson = new Gson();\nrows.add(gson.fromJson(\"{\\\"id\\\": 1, \\\"vector\\\": [0.1, 0.2, 0.3, 0.4, 0.5], \\\"age\\\": 30, \\\"status\\\": \\\"premium\\\"}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"id\\\": 2, \\\"vector\\\": [0.2, 0.3, 0.4, 0.5, 0.6]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"id\\\": 3, \\\"vector\\\": [0.3, 0.4, 0.5, 0.6, 0.7], \\\"age\\\": 25, \\\"status\\\": null}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"id\\\": 4, \\\"vector\\\": [0.4, 0.5, 0.6, 0.7, 0.8], \\\"age\\\": null, \\\"status\\\": \\\"inactive\\\"}\", JsonObject.class));\n\nInsertResp insertR = client.insert(InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(rows)\n        .build());\n","const data = [\n    {\"id\": 1, \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5], \"age\": 30, \"status\": \"premium\"},\n    {\"id\": 2, \"vector\": [0.2, 0.3, 0.4, 0.5, 0.6]}, \n    {\"id\": 3, \"vector\": [0.3, 0.4, 0.5, 0.6, 0.7], \"age\": 25, \"status\": null}, \n    {\"id\": 4, \"vector\": [0.4, 0.5, 0.6, 0.7, 0.8], \"age\": null, \"status\": \"inactive\"}  \n];\n\nclient.insert({\n  collection_name: \"my_collection\",\n  data: data,\n});\n","column1, _ := column.NewNullableColumnInt64(\"age\",\n    []int64{30, 25},\n    []bool{true, false, true, false})\ncolumn2, _ := column.NewNullableColumnVarChar(\"status\",\n    []string{\"premium\", \"inactive\"},\n    []bool{true, false, false, true})\n\n_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"id\", []int64{1, 2, 3, 4}).\n    WithFloatVectorColumn(\"vector\", 5, [][]float32{\n        {0.1, 0.2, 0.3, 0.4, 0.5},\n        {0.2, 0.3, 0.4, 0.5, 0.6},\n        {0.3, 0.4, 0.5, 0.6, 0.7},\n        {0.4, 0.5, 0.6, 0.7, 0.8},\n    }).\n    WithColumns(column1, column2),\n)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"id\": 1, \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5], \"age\": 30, \"status\": \"premium\"},\n        {\"id\": 2, \"vector\": [0.2, 0.3, 0.4, 0.5, 0.6]},\n        {\"id\": 3, \"vector\": [0.3, 0.4, 0.5, 0.6, 0.7], \"age\": 25, \"status\": null}, \n        {\"id\": 4, \"vector\": [0.4, 0.5, 0.6, 0.7, 0.8], \"age\": null, \"status\": \"inactive\"}      \n    ],\n    \"collectionName\": \"my_collection\"\n}'\n","res = client.search(\n    collection_name=\"my_collection\",\n    data=[[0.1, 0.2, 0.4, 0.3, 0.5]],\n    search_params={\"params\": {\"nprobe\": 16}},\n    filter=\"age == 18\",  # 18 is the default value of the `age` field\n    limit=10,\n    output_fields=[\"id\", \"age\", \"status\"]\n)\n\nprint(res)\n\n# Output\n# data: [\"[{'id': 2, 'distance': 0.050000004, 'entity': {'id': 2, 'age': 18, 'status': 'active'}}, {'id': 4, 'distance': 0.45000002, 'entity': {'id': 4, 'age': 18, 'status': 'inactive'}}]\"] \n\n","import io.milvus.v2.service.vector.request.SearchReq;\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nMap<String,Object> params = new HashMap<>();\nparams.put(\"nprobe\", 16);\nSearchResp resp = client.search(SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .annsField(\"vector\")\n        .data(Collections.singletonList(new FloatVec(new float[]{0.1f, 0.2f, 0.3f, 0.4f, 0.5f})))\n        .searchParams(params)\n        .filter(\"age == 18\")\n        .topK(10)\n        .outputFields(Arrays.asList(\"id\", \"age\", \"status\"))\n        .build());\n\nSystem.out.println(resp.getSearchResults());\n\n// Output\n//\n// [[SearchResp.SearchResult(entity={id=2, age=18, status=active}, score=0.050000004, id=2), SearchResp.SearchResult(entity={id=4, age=18, status=inactive}, score=0.45000002, id=4)]]\n","client.search({\n    collection_name: 'my_collection',\n    data: [0.3, -0.6, 0.1, 0.3, 0.5],\n    limit: 2,\n    output_fields: ['age', 'id', 'status'],\n    filter: 'age == 18',\n    params: {\n        nprobe: 16\n    }\n});\n","queryVector := []float32{0.1, 0.2, 0.4, 0.3, 0.5}\n\nannParam := index.NewCustomAnnParam()\nannParam.WithExtraParam(\"nprobe\", 16)\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    10,              // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithANNSField(\"vector\").\n    WithFilter(\"age == 18\").\n    WithAnnParam(annParam).\n    WithOutputFields(\"id\", \"age\", \"status\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"age: \", resultSet.GetColumn(\"age\").FieldData().GetScalars())\n    fmt.Println(\"status: \", resultSet.GetColumn(\"status\").FieldData().GetScalars())\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.1, 0.2, 0.3, 0.4, 0.5]\n    ],\n    \"annsField\": \"vector\",\n    \"limit\": 10,\n    \"filter\": \"age == 18\",\n    \"outputFields\": [\"id\", \"age\", \"status\"]\n}'\n\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":18,\"distance\":0.050000004,\"id\":2,\"status\":\"active\"},{\"age\":18,\"distance\":0.45000002,\"id\":4,\"status\":\"inactive\"}]}\n","# Query all entities where `age` equals the default value (18)\ndefault_age_results = client.query(\n    collection_name=\"my_collection\",\n    filter=\"age == 18\",\n    output_fields=[\"id\", \"age\", \"status\"]\n)\n\n# Query all entities where `status` equals the default value (\"active\")\ndefault_status_results = client.query(\n    collection_name=\"my_collection\",\n    filter='status == \"active\"',\n    output_fields=[\"id\", \"age\", \"status\"]\n)\n","import io.milvus.v2.service.vector.request.QueryReq;\nimport io.milvus.v2.service.vector.response.QueryResp;\n\nQueryResp ageResp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(\"age == 18\")\n        .outputFields(Arrays.asList(\"id\", \"age\", \"status\"))\n        .build());\n\nSystem.out.println(ageResp.getQueryResults());\n\n// Output\n//\n// [QueryResp.QueryResult(entity={id=2, age=18, status=active}), QueryResp.QueryResult(entity={id=4, age=18, status=inactive})]\n\nQueryResp statusResp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(\"status == \\\"active\\\"\")\n        .outputFields(Arrays.asList(\"id\", \"age\", \"status\"))\n        .build());\n\nSystem.out.println(statusResp.getQueryResults());\n\n// Output\n//\n// [QueryResp.QueryResult(entity={id=2, age=18, status=active}), QueryResp.QueryResult(entity={id=3, age=25, status=active})]\n","// Query all entities where `age` equals the default value (18)\nconst default_age_results = await client.query(\n    collection_name: \"my_collection\",\n    filter: \"age == 18\",\n    output_fields: [\"id\", \"age\", \"status\"]\n);\n// Query all entities where `status` equals the default value (\"active\")\nconst default_status_results = await client.query(\n    collection_name: \"my_collection\",\n    filter: 'status == \"active\"',\n    output_fields: [\"id\", \"age\", \"status\"]\n)\n","resultSet, err := client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(\"age == 18\").\n    WithOutputFields(\"id\", \"age\", \"status\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"id: \", resultSet.GetColumn(\"id\").FieldData().GetScalars())\nfmt.Println(\"age: \", resultSet.GetColumn(\"age\").FieldData().GetScalars())\nfmt.Println(\"status: \", resultSet.GetColumn(\"status\").FieldData().GetScalars())\n\nresultSet, err = client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(\"status == \\\"active\\\"\").\n    WithOutputFields(\"id\", \"age\", \"status\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(\"id: \", resultSet.GetColumn(\"id\").FieldData().GetScalars())\nfmt.Println(\"age: \", resultSet.GetColumn(\"age\").FieldData().GetScalars())\nfmt.Println(\"status: \", resultSet.GetColumn(\"status\").FieldData().GetScalars())\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"age == 18\",\n    \"outputFields\": [\"id\", \"age\", \"status\"]\n}'\n\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":18,\"id\":2,\"status\":\"active\"},{\"age\":18,\"id\":4,\"status\":\"inactive\"}]}\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"status == \\\"active\\\"\",\n    \"outputFields\": [\"id\", \"age\", \"status\"]\n}'\n\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":18,\"id\":2,\"status\":\"active\"},{\"age\":25,\"id\":3,\"status\":\"active\"}]}\n"],"headingContent":"Nullable & Default","anchorList":[{"label":"قابل للإلغاء والافتراضي","href":"Nullable--Default","type":1,"isActive":false},{"label":"الحدود","href":"Limits","type":2,"isActive":false},{"label":"سمة لاغية","href":"Nullable-attribute","type":2,"isActive":false},{"label":"القيم الافتراضية","href":"Default-values","type":2,"isActive":false},{"label":"القواعد المطبقة","href":"Applicable-rules","type":2,"isActive":false}]}