{"codeList":["from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\n# 7. Load the collection\nclient.load_collection(\n    collection_name=\"my_collection\"\n)\n\nres = client.get_load_state(\n    collection_name=\"my_collection\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: Loaded>\"\n# }\n","import io.milvus.v2.service.collection.request.LoadCollectionReq;\nimport io.milvus.v2.service.collection.request.GetLoadStateReq;\nimport io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\nString TOKEN = \"root:Milvus\";\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n        .uri(CLUSTER_ENDPOINT)\n        .token(TOKEN)\n        .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\n// 6. Load the collection\nLoadCollectionReq loadCollectionReq = LoadCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .build();\n\nclient.loadCollection(loadCollectionReq);\n\n// 7. Get load state of the collection\nGetLoadStateReq loadStateReq = GetLoadStateReq.builder()\n        .collectionName(\"my_collection\")\n        .build();\n\nBoolean res = client.getLoadState(loadStateReq);\nSystem.out.println(res);\n\n// Output:\n// true\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\n// 7. Load the collection\nres = await client.loadCollection({\n    collection_name: \"my_collection\"\n})\n\nconsole.log(res.error_code)\n\n// Output\n// \n// Success\n// \n\nres = await client.getLoadState({\n    collection_name: \"my_collection\"\n})\n\nconsole.log(res.state)\n\n// Output\n// \n// LoadStateLoaded\n// \n","import (\n    \"context\"\n    \"fmt\"\n    \n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n    \nloadTask, err := client.LoadCollection(ctx, milvusclient.NewLoadCollectionOption(\"my_collection\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n\n// sync wait collection to be loaded\nerr = loadTask.Await(ctx)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nstate, err := client.GetLoadState(ctx, milvusclient.NewGetLoadStateOption(\"my_collection\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(state)\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/load\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {}\n# }\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/get_load_state\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {\n#         \"loadProgress\": 100,\n#         \"loadState\": \"LoadStateLoaded\",\n#         \"message\": \"\"\n#     }\n# }\n","client.load_collection(\n    collection_name=\"my_collection\",\n    # highlight-next-line\n    load_fields=[\"my_id\", \"my_vector\"] # Load only the specified fields\n    skip_load_dynamic_field=True # Skip loading the dynamic field\n)\n\nres = client.get_load_state(\n    collection_name=\"my_collection\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: Loaded>\"\n# }\n","// 6. Load the collection\nLoadCollectionReq loadCollectionReq = LoadCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .loadFields(Arrays.asList(\"my_id\", \"my_vector\"))\n        .build();\n\nclient.loadCollection(loadCollectionReq);\n\n// 7. Get load state of the collection\nGetLoadStateReq loadStateReq = GetLoadStateReq.builder()\n        .collectionName(\"my_collection\")\n        .build();\n\nBoolean res = client.getLoadState(loadStateReq);\nSystem.out.println(res);\n","await client.load_collection({\n  collection_name: \"my_collection\",\n  load_fields: [\"my_id\", \"my_vector\"], // Load only the specified fields\n  skip_load_dynamic_field: true //Skip loading the dynamic field\n});\n\nconst loadState = client.getCollectionLoadState({\n    collection_name: \"my_collection\",\n})\n\nconsole.log(loadState);\n","loadTask, err := client.LoadCollection(ctx, milvusclient.NewLoadCollectionOption(\"my_collection\").\n        WithLoadFields(\"my_id\", \"my_vector\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\n// sync wait collection to be loaded\nerr = loadTask.Await(ctx)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nstate, err := client.GetLoadState(ctx, milvusclient.NewGetLoadStateOption(\"my_collection\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(state)\n","# REST\nNot support yet\n","# 8. Release the collection\nclient.release_collection(\n    collection_name=\"my_collection\"\n)\n\nres = client.get_load_state(\n    collection_name=\"my_collection\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"state\": \"<LoadState: NotLoad>\"\n# }\n","import io.milvus.v2.service.collection.request.ReleaseCollectionReq;\n\n// 8. Release the collection\nReleaseCollectionReq releaseCollectionReq = ReleaseCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .build();\n\nclient.releaseCollection(releaseCollectionReq);\n\nGetLoadStateReq loadStateReq = GetLoadStateReq.builder()\n        .collectionName(\"my_collection\")\n        .build();\nBoolean res = client.getLoadState(loadStateReq);\nSystem.out.println(res);\n\n// Output:\n// false\n","// 8. Release the collection\nres = await client.releaseCollection({\n    collection_name: \"my_collection\"\n})\n\nconsole.log(res.error_code)\n\n// Output\n// \n// Success\n// \n\nres = await client.getLoadState({\n    collection_name: \"my_collection\"\n})\n\nconsole.log(res.state)\n\n// Output\n// \n// LoadStateNotLoad\n// \n","err = client.ReleaseCollection(ctx, milvusclient.NewReleaseCollectionOption(\"my_collection\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nstate, err := client.GetLoadState(ctx, milvusclient.NewGetLoadStateOption(\"my_collection\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\nfmt.Println(state)\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/release\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {}\n# }\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/get_load_state\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\"\n}'\n\n# {\n#     \"code\": 0,\n#     \"data\": {\n#         \"loadProgress\": 0,\n#         \"loadState\": \"LoadStateNotLoaded\",\n#         \"message\": \"\"\n#     }\n# }\n"],"headingContent":"Load & Release","anchorList":[{"label":"التحميل والتحرير","href":"Load--Release","type":1,"isActive":false},{"label":"تحميل مجموعة","href":"Load-Collection","type":2,"isActive":false},{"label":"تحميل حقول محددة","href":"Load-Specific-Fields","type":2,"isActive":false},{"label":"تحرير المجموعة","href":"Release-Collection","type":2,"isActive":false}]}