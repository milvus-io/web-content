{"codeList":["import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pymilvus import (\n    MilvusClient,\n    DataType,\n    Function,\n    FunctionType,\n    AnnSearchRequest,\n)\n\n# Create connection to Milvus\nmilvus_client = MilvusClient(\"http://localhost:19530\")\n\n# Define collection name\ncollection_name = \"news_articles_tutorial\"\n\n# Clean up any existing collection with the same name\nmilvus_client.drop_collection(collection_name)\n","# Create schema with fields for content and temporal information\nschema = milvus_client.create_schema(enable_dynamic_field=False, auto_id=True)\nschema.add_field(\"id\", DataType.INT64, is_primary=True)\nschema.add_field(\"headline\", DataType.VARCHAR, max_length=200, enable_analyzer=True)\nschema.add_field(\"content\", DataType.VARCHAR, max_length=2000, enable_analyzer=True)\nschema.add_field(\"dense\", DataType.FLOAT_VECTOR, dim=1024)  # For dense embeddings\nschema.add_field(\"sparse_vector\", DataType.SPARSE_FLOAT_VECTOR)  # For sparse (BM25) search\nschema.add_field(\"publish_date\", DataType.INT64)  # Timestamp for decay ranking\n","# Create embedding function for semantic search\ntext_embedding_function = Function(\n    name=\"siliconflow_embedding\",\n    function_type=FunctionType.TEXTEMBEDDING,\n    input_field_names=[\"content\"],\n    output_field_names=[\"dense\"],\n    params={\n        \"provider\": \"siliconflow\",\n        \"model_name\": \"BAAI/bge-large-en-v1.5\",\n        \"credential\": \"your-api-key\"\n    }\n)\nschema.add_function(text_embedding_function)\n\n# Create BM25 function for keyword search\nbm25_function = Function(\n    name=\"bm25\",\n    input_field_names=[\"content\"],\n    output_field_names=[\"sparse_vector\"],\n    function_type=FunctionType.BM25,\n)\nschema.add_function(bm25_function)\n","# Set up indexes for fast search\nindex_params = milvus_client.prepare_index_params()\n\n# Dense vector index\nindex_params.add_index(field_name=\"dense\", index_type=\"AUTOINDEX\", metric_type=\"L2\")\n\n# Sparse vector index\nindex_params.add_index(\n    field_name=\"sparse_vector\",\n    index_name=\"sparse_inverted_index\",\n    index_type=\"AUTOINDEX\",\n    metric_type=\"BM25\",\n)\n\n# Create the collection with our schema and indexes\nmilvus_client.create_collection(\n    collection_name,\n    schema=schema,\n    index_params=index_params,\n    consistency_level=\"Bounded\"\n)\n","# Get current time\ncurrent_time = int(datetime.datetime.now().timestamp())\ncurrent_date = datetime.datetime.fromtimestamp(current_time)\nprint(f\"Current time: {current_date.strftime('%Y-%m-%d %H:%M:%S')}\")\n\n# Sample news articles spanning different dates\narticles = [\n    {\n        \"headline\": \"AI Breakthrough Enables Medical Diagnosis Advancement\",\n        \"content\": \"Researchers announced a major breakthrough in AI-based medical diagnostics, enabling faster and more accurate detection of rare diseases.\",\n        \"publish_date\": int((current_date - datetime.timedelta(days=120)).timestamp())  # ~4 months ago\n    },\n    {\n        \"headline\": \"Tech Giants Compete in New AI Race\",\n        \"content\": \"Major technology companies are investing billions in a new race to develop the most advanced artificial intelligence systems.\",\n        \"publish_date\": int((current_date - datetime.timedelta(days=60)).timestamp())  # ~2 months ago\n    },\n    {\n        \"headline\": \"AI Ethics Guidelines Released by International Body\",\n        \"content\": \"A consortium of international organizations has released new guidelines addressing ethical concerns in artificial intelligence development and deployment.\",\n        \"publish_date\": int((current_date - datetime.timedelta(days=30)).timestamp())  # 1 month ago\n    },\n    {\n        \"headline\": \"Latest Deep Learning Models Show Remarkable Progress\",\n        \"content\": \"The newest generation of deep learning models demonstrates unprecedented capabilities in language understanding and generation.\",\n        \"publish_date\": int((current_date - datetime.timedelta(days=15)).timestamp())  # 15 days ago\n    },\n    # Articles with identical content but different dates\n    {\n        \"headline\": \"AI Research Advancements Published in January\",\n        \"content\": \"Breakthrough research in artificial intelligence shows remarkable advancements in multiple domains.\",\n        \"publish_date\": int((current_date - datetime.timedelta(days=90)).timestamp())  # ~3 months ago\n    },\n    {\n        \"headline\": \"New AI Research Results Released This Week\",\n        \"content\": \"Breakthrough research in artificial intelligence shows remarkable advancements in multiple domains.\",\n        \"publish_date\": int((current_date - datetime.timedelta(days=5)).timestamp())  # Very recent - 5 days ago\n    },\n    {\n        \"headline\": \"AI Development Updates Released Yesterday\",\n        \"content\": \"Recent developments in artificial intelligence research are showing promising results across various applications.\",\n        \"publish_date\": int((current_date - datetime.timedelta(days=1)).timestamp())  # Just yesterday\n    },\n]\n\n# Insert articles into the collection\nmilvus_client.insert(collection_name, articles)\nprint(f\"Inserted {len(articles)} articles into the collection\")\n","# Use current time as reference point\nprint(f\"Using current time as reference point\")\n\n# Create a Gaussian decay ranker\ngaussian_ranker = Function(\n    name=\"time_decay_gaussian\",\n    input_field_names=[\"publish_date\"],\n    function_type=FunctionType.RERANK,\n    params={\n        \"reranker\": \"decay\",\n        \"function\": \"gauss\",           # Gaussian/bell curve decay\n        \"origin\": current_time,        # Current time as reference point\n        \"offset\": 7 * 24 * 60 * 60,    # One week (full relevance)\n        \"decay\": 0.5,                  # Articles from two weeks ago have half relevance \n        \"scale\": 14 * 24 * 60 * 60     # Two weeks scale parameter\n    }\n)\n\n# Create an exponential decay ranker with different parameters\nexponential_ranker = Function(\n    name=\"time_decay_exponential\",\n    input_field_names=[\"publish_date\"],\n    function_type=FunctionType.RERANK,\n    params={\n        \"reranker\": \"decay\",\n        \"function\": \"exp\",             # Exponential decay\n        \"origin\": current_time,        # Current time as reference point\n        \"offset\": 3 * 24 * 60 * 60,    # Shorter offset (3 days vs 7 days)\n        \"decay\": 0.3,                  # Steeper decay (0.3 vs 0.5) \n        \"scale\": 10 * 24 * 60 * 60     # Different scale (10 days vs 14 days)\n    }\n)\n\n# Create a linear decay ranker\nlinear_ranker = Function(\n    name=\"time_decay_linear\",\n    input_field_names=[\"publish_date\"],\n    function_type=FunctionType.RERANK,\n    params={\n        \"reranker\": \"decay\",\n        \"function\": \"linear\",          # Linear decay\n        \"origin\": current_time,        # Current time as reference point\n        \"offset\": 7 * 24 * 60 * 60,    # One week (full relevance)\n        \"decay\": 0.5,                  # Articles from two weeks ago have half relevance\n        \"scale\": 14 * 24 * 60 * 60     # Two weeks scale parameter\n    }\n)\n","# Visualize the decay functions with different parameters\ndays = np.linspace(0, 90, 100)\n# Gaussian: offset=7, scale=14, decay=0.5\ngaussian_values = [1.0 if d <= 7 else (0.5 ** ((d - 7) / 14)) for d in days]\n# Exponential: offset=3, scale=10, decay=0.3\nexponential_values = [1.0 if d <= 3 else (0.3 ** ((d - 3) / 10)) for d in days]\n# Linear: offset=7, scale=14, decay=0.5\nlinear_values = [1.0 if d <= 7 else max(0, 1.0 - ((d - 7) / 14) * 0.5) for d in days]\n\nplt.figure(figsize=(10, 6))\nplt.plot(days, gaussian_values, label='Gaussian (offset=7, scale=14, decay=0.5)')\nplt.plot(days, exponential_values, label='Exponential (offset=3, scale=10, decay=0.3)')\nplt.plot(days, linear_values, label='Linear (offset=7, scale=14, decay=0.5)')\nplt.axhline(y=0.5, color='gray', linestyle='--', alpha=0.5, label='Half relevance')\nplt.xlabel('Days ago')\nplt.ylabel('Relevance factor')\nplt.title('Decay Functions Comparison')\nplt.legend()\nplt.grid(True)\nplt.savefig('decay_functions.png')\nplt.close()\n\n# Print numerical representation\nprint(\"\\n=== TIME DECAY EFFECT VISUALIZATION ===\")\nprint(\"Days ago | Gaussian | Exponential | Linear\")\nprint(\"-----------------------------------------\")\nfor days in [0, 3, 7, 10, 14, 21, 30, 60, 90]:\n    # Calculate decay factors based on the parameters in our rankers\n    gaussian_decay = 1.0 if days <= 7 else (0.5 ** ((days - 7) / 14))\n    exponential_decay = 1.0 if days <= 3 else (0.3 ** ((days - 3) / 10))\n    linear_decay = 1.0 if days <= 7 else max(0, 1.0 - ((days - 7) / 14) * 0.5)\n    \n    print(f\"{days:2d} days | {gaussian_decay:.4f}   | {exponential_decay:.4f}     | {linear_decay:.4f}\")\n","=== TIME DECAY EFFECT VISUALIZATION ===\nDays ago | Gaussian | Exponential | Linear\n-----------------------------------------\n 0 days | 1.0000   | 1.0000     | 1.0000\n 3 days | 1.0000   | 1.0000     | 1.0000\n 7 days | 1.0000   | 0.6178     | 1.0000\n10 days | 0.8620   | 0.4305     | 0.8929\n14 days | 0.7071   | 0.2660     | 0.7500\n21 days | 0.5000   | 0.1145     | 0.5000\n30 days | 0.3202   | 0.0387     | 0.1786\n60 days | 0.0725   | 0.0010     | 0.0000\n90 days | 0.0164   | 0.0000     | 0.0000\n","# Helper function to format search results with dates and scores\ndef print_search_results(results, title):\n    print(f\"\\n=== {title} ===\")\n    for i, hit in enumerate(results[0]):\n        publish_date = datetime.datetime.fromtimestamp(hit.get('publish_date'))\n        days_from_now = (current_time - hit.get('publish_date')) / (24 * 60 * 60)\n        \n        print(f\"{i+1}. {hit.get('headline')}\")\n        print(f\"   Published: {publish_date.strftime('%Y-%m-%d')} ({int(days_from_now)} days ago)\")\n        print(f\"   Score: {hit.score:.4f}\")\n        print()\n","# Define our search query\nquery = \"artificial intelligence advancements\"\n\n# 1. Search without decay ranking (purely based on semantic relevance)\nstandard_results = milvus_client.search(\n    collection_name,\n    data=[query],\n    anns_field=\"dense\",\n    limit=7,  # Get all our articles\n    output_fields=[\"headline\", \"content\", \"publish_date\"],\n    consistency_level=\"Bounded\"\n)\nprint_search_results(standard_results, \"SEARCH RESULTS WITHOUT DECAY RANKING\")\n\n# Store original scores for later comparison\noriginal_scores = {}\nfor hit in standard_results[0]:\n    original_scores[hit.get('headline')] = hit.score\n\n# 2. Search with each decay function\n# Gaussian decay\ngaussian_results = milvus_client.search(\n    collection_name,\n    data=[query],\n    anns_field=\"dense\",\n    limit=7,\n    output_fields=[\"headline\", \"content\", \"publish_date\"],\n    ranker=gaussian_ranker,\n    consistency_level=\"Bounded\"\n)\nprint_search_results(gaussian_results, \"SEARCH RESULTS WITH GAUSSIAN DECAY RANKING\")\n\n# Exponential decay\nexponential_results = milvus_client.search(\n    collection_name,\n    data=[query],\n    anns_field=\"dense\",\n    limit=7,\n    output_fields=[\"headline\", \"content\", \"publish_date\"],\n    ranker=exponential_ranker,\n    consistency_level=\"Bounded\"\n)\nprint_search_results(exponential_results, \"SEARCH RESULTS WITH EXPONENTIAL DECAY RANKING\")\n\n# Linear decay\nlinear_results = milvus_client.search(\n    collection_name,\n    data=[query],\n    anns_field=\"dense\",\n    limit=7,\n    output_fields=[\"headline\", \"content\", \"publish_date\"],\n    ranker=linear_ranker,\n    consistency_level=\"Bounded\"\n)\nprint_search_results(linear_results, \"SEARCH RESULTS WITH LINEAR DECAY RANKING\")\n","=== SEARCH RESULTS WITHOUT DECAY RANKING ===\n1. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.3670\n\n2. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.4315\n\n3. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.4316\n\n4. Tech Giants Compete in New AI Race\n   Published: 2025-03-16 (60 days ago)\n   Score: 0.6671\n\n5. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.6674\n\n6. AI Breakthrough Enables Medical Diagnosis Advancement\n   Published: 2025-01-15 (120 days ago)\n   Score: 0.7279\n\n7. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.7661\n\n=== SEARCH RESULTS WITH GAUSSIAN DECAY RANKING ===\n1. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.5322\n\n2. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.4316\n\n3. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.3670\n\n4. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.1180\n\n5. Tech Giants Compete in New AI Race\n   Published: 2025-03-16 (60 days ago)\n   Score: 0.0000\n\n6. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0000\n\n7. AI Breakthrough Enables Medical Diagnosis Advancement\n   Published: 2025-01-15 (120 days ago)\n   Score: 0.0000\n\n=== SEARCH RESULTS WITH EXPONENTIAL DECAY RANKING ===\n1. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.3670\n\n2. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.3392\n\n3. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.1574\n\n4. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.0297\n\n5. Tech Giants Compete in New AI Race\n   Published: 2025-03-16 (60 days ago)\n   Score: 0.0007\n\n6. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0000\n\n7. AI Breakthrough Enables Medical Diagnosis Advancement\n   Published: 2025-01-15 (120 days ago)\n   Score: 0.0000\n\n=== SEARCH RESULTS WITH LINEAR DECAY RANKING ===\n1. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.4767\n\n2. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.4316\n\n3. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.3831\n\n4. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.3670\n\n5. AI Breakthrough Enables Medical Diagnosis Advancement\n   Published: 2025-01-15 (120 days ago)\n   Score: 0.3640\n\n6. Tech Giants Compete in New AI Race\n   Published: 2025-03-16 (60 days ago)\n   Score: 0.3335\n\n7. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.2158\n","# Add a detailed breakdown for the first 3 results from Gaussian decay\nprint(\"\\n=== SCORE CALCULATION BREAKDOWN (GAUSSIAN DECAY) ===\")\nfor item in gaussian_results[0][:3]:\n    headline = item.get('headline')\n    publish_date = datetime.datetime.fromtimestamp(item.get('publish_date'))\n    days_ago = (current_time - item.get('publish_date')) / (24 * 60 * 60)\n    \n    # Get the original score\n    original_score = original_scores.get(headline, 0)\n    \n    # Calculate decay factor\n    decay_factor = 1.0 if days_ago <= 7 else (0.5 ** ((days_ago - 7) / 14))\n    \n    # Show breakdown\n    print(f\"Item: {headline}\")\n    print(f\"  Published: {publish_date.strftime('%Y-%m-%d')} ({int(days_ago)} days ago)\")\n    print(f\"  Original relevance score: {original_score:.4f}\")\n    print(f\"  Decay factor (Gaussian): {decay_factor:.4f}\")\n    print(f\"  Expected final score = Original × Decay: {original_score * decay_factor:.4f}\")\n    print(f\"  Actual final score: {item.score:.4f}\")\n    print()\n","=== SCORE CALCULATION BREAKDOWN (GAUSSIAN DECAY) ===\nItem: Latest Deep Learning Models Show Remarkable Progress\n  Published: 2025-04-30 (15 days ago)\n  Original relevance score: 0.6674\n  Decay factor (Gaussian): 0.6730\n  Expected final score = Original × Decay: 0.4491\n  Actual final score: 0.5322\n\nItem: New AI Research Results Released This Week\n  Published: 2025-05-10 (5 days ago)\n  Original relevance score: 0.4316\n  Decay factor (Gaussian): 1.0000\n  Expected final score = Original × Decay: 0.4316\n  Actual final score: 0.4316\n\nItem: AI Development Updates Released Yesterday\n  Published: 2025-05-14 (1 days ago)\n  Original relevance score: 0.3670\n  Decay factor (Gaussian): 1.0000\n  Expected final score = Original × Decay: 0.3670\n  Actual final score: 0.3670\n","# Set up hybrid search (combining dense and sparse vectors)\ndense_search = AnnSearchRequest(\n    data=[query],\n    anns_field=\"dense\",  # Search dense vectors\n    param={},\n    limit=7\n)\n\nsparse_search = AnnSearchRequest(\n    data=[query],\n    anns_field=\"sparse_vector\",  # Search sparse vectors (BM25)\n    param={},\n    limit=7\n)\n\n# Execute hybrid search with each decay function\n# Gaussian decay\nhybrid_gaussian_results = milvus_client.hybrid_search(\n    collection_name,\n    [dense_search, sparse_search],\n    ranker=gaussian_ranker,\n    limit=7,\n    output_fields=[\"headline\", \"content\", \"publish_date\"]\n)\nprint_search_results(hybrid_gaussian_results, \"HYBRID SEARCH RESULTS WITH GAUSSIAN DECAY RANKING\")\n\n# Exponential decay\nhybrid_exponential_results = milvus_client.hybrid_search(\n    collection_name,\n    [dense_search, sparse_search],\n    ranker=exponential_ranker,\n    limit=7,\n    output_fields=[\"headline\", \"content\", \"publish_date\"]\n)\nprint_search_results(hybrid_exponential_results, \"HYBRID SEARCH RESULTS WITH EXPONENTIAL DECAY RANKING\")\n","=== HYBRID SEARCH RESULTS WITH GAUSSIAN DECAY RANKING ===\n1. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 2.1467\n\n2. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.7926\n\n3. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.5322\n\n4. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.1180\n\n5. Tech Giants Compete in New AI Race\n   Published: 2025-03-16 (60 days ago)\n   Score: 0.0000\n\n6. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0000\n\n7. AI Breakthrough Enables Medical Diagnosis Advancement\n   Published: 2025-01-15 (120 days ago)\n   Score: 0.0000\n\n=== HYBRID SEARCH RESULTS WITH EXPONENTIAL DECAY RANKING ===\n1. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 1.6873\n\n2. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.7926\n\n3. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.1574\n\n4. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.0297\n\n5. Tech Giants Compete in New AI Race\n   Published: 2025-03-16 (60 days ago)\n   Score: 0.0007\n\n6. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0001\n\n7. AI Breakthrough Enables Medical Diagnosis Advancement\n   Published: 2025-01-15 (120 days ago)\n   Score: 0.0000\n","# Create variations of the Gaussian decay function with different scale parameters\nprint(\"\\n=== PARAMETER VARIATION EXPERIMENT: SCALE ===\")\nfor scale_days in [7, 14, 30]:\n    scaled_ranker = Function(\n        name=f\"time_decay_gaussian_{scale_days}\",\n        input_field_names=[\"publish_date\"],\n        function_type=FunctionType.RERANK,\n        params={\n            \"reranker\": \"decay\",\n            \"function\": \"gauss\",\n            \"origin\": current_time,\n            \"offset\": 7 * 24 * 60 * 60,  # Fixed offset of 7 days\n            \"decay\": 0.5,                # Fixed decay of 0.5\n            \"scale\": scale_days * 24 * 60 * 60  # Variable scale\n        }\n    )\n    \n    # Get results\n    scale_results = milvus_client.search(\n        collection_name,\n        data=[query],\n        anns_field=\"dense\",\n        limit=7,\n        output_fields=[\"headline\", \"content\", \"publish_date\"],\n        ranker=scaled_ranker,\n        consistency_level=\"Bounded\"\n    )\n    \n    print_search_results(scale_results, f\"SEARCH WITH GAUSSIAN DECAY (SCALE = {scale_days} DAYS)\")\n","=== PARAMETER VARIATION EXPERIMENT: SCALE ===\n\n=== SEARCH WITH GAUSSIAN DECAY (SCALE = 7 DAYS) ===\n1. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.4316\n\n2. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.3670\n\n3. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.2699\n\n4. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.0004\n\n5. Tech Giants Compete in New AI Race\n   Published: 2025-03-16 (60 days ago)\n   Score: 0.0000\n\n6. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0000\n\n7. AI Breakthrough Enables Medical Diagnosis Advancement\n   Published: 2025-01-15 (120 days ago)\n   Score: 0.0000\n\n=== SEARCH WITH GAUSSIAN DECAY (SCALE = 14 DAYS) ===\n1. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.5322\n\n2. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.4316\n\n3. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.3670\n\n4. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.1180\n\n5. Tech Giants Compete in New AI Race\n   Published: 2025-03-16 (60 days ago)\n   Score: 0.0000\n\n6. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0000\n\n7. AI Breakthrough Enables Medical Diagnosis Advancement\n   Published: 2025-01-15 (120 days ago)\n   Score: 0.0000\n\n=== SEARCH WITH GAUSSIAN DECAY (SCALE = 30 DAYS) ===\n1. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.6353\n\n2. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.5097\n\n3. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.4316\n\n4. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.3670\n\n5. Tech Giants Compete in New AI Race\n   Published: 2025-03-16 (60 days ago)\n   Score: 0.0767\n\n6. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0021\n\n7. AI Breakthrough Enables Medical Diagnosis Advancement\n   Published: 2025-01-15 (120 days ago)\n   Score: 0.0000\n","# Try different queries with Gaussian decay\nfor test_query in [\"machine learning\", \"neural networks\", \"ethics in AI\"]:\n    print(f\"\\n=== TESTING QUERY: '{test_query}' WITH GAUSSIAN DECAY ===\")\n    test_results = milvus_client.search(\n        collection_name,\n        data=[test_query],\n        anns_field=\"dense\",\n        limit=4,\n        output_fields=[\"headline\", \"content\", \"publish_date\"],\n        ranker=gaussian_ranker,\n        consistency_level=\"Bounded\"\n    )\n    print_search_results(test_results, f\"TOP 4 RESULTS FOR '{test_query}'\")\n","=== TESTING QUERY: 'machine learning' WITH GAUSSIAN DECAY ===\n\n=== TOP 4 RESULTS FOR 'machine learning' ===\n1. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.8208\n\n2. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.7287\n\n3. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.6633\n\n4. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0000\n\n=== TESTING QUERY: 'neural networks' WITH GAUSSIAN DECAY ===\n\n=== TOP 4 RESULTS FOR 'neural networks' ===\n1. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.8509\n\n2. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.7574\n\n3. Latest Deep Learning Models Show Remarkable Progress\n   Published: 2025-04-30 (15 days ago)\n   Score: 0.6364\n\n4. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0000\n\n=== TESTING QUERY: 'ethics in AI' WITH GAUSSIAN DECAY ===\n\n=== TOP 4 RESULTS FOR 'ethics in AI' ===\n1. New AI Research Results Released This Week\n   Published: 2025-05-10 (5 days ago)\n   Score: 0.7977\n\n2. AI Development Updates Released Yesterday\n   Published: 2025-05-14 (1 days ago)\n   Score: 0.7322\n\n3. AI Ethics Guidelines Released by International Body\n   Published: 2025-04-15 (30 days ago)\n   Score: 0.0814\n\n4. AI Research Advancements Published in January\n   Published: 2025-02-14 (90 days ago)\n   Score: 0.0000\n"],"headingContent":"Tutorial: Implement Time-based Ranking in Milvus","anchorList":[{"label":"برنامج تعليمي: تنفيذ الترتيب المستند إلى الوقت في ميلفوسCompatible with Milvus 2.6.x","href":"Tutorial-Implement-Time-based-Ranking-in-Milvus","type":1,"isActive":false},{"label":"فهم مصنفات التضاؤل في ميلفوس","href":"Understand-decay-rankers-in-Milvus","type":2,"isActive":false},{"label":"بناء نظام بحث مدرك للوقت","href":"Build-a-time-aware-search-system","type":2,"isActive":false},{"label":"الخطوة 1: تصميم المخطط","href":"Step-1-Design-the-schema","type":2,"isActive":false},{"label":"الخطوة 2: إعداد وظائف التضمين","href":"Step-2-Set-up-embedding-functions","type":2,"isActive":false},{"label":"الخطوة 3: تكوين معلمات الفهرس","href":"Step-3-Configure-index-parameters","type":2,"isActive":false},{"label":"الخطوة 4: إعداد عينة من البيانات","href":"Step-4-Prepare-sample-data","type":2,"isActive":false},{"label":"الخطوة 5: تكوين مصنفات اضمحلال مختلفة","href":"Step-5-Configure-different-decay-rankers","type":2,"isActive":false},{"label":"الخطوة 6: تصور مصنفات التضاؤل","href":"Step-6-Visualize-the-decay-rankers","type":2,"isActive":false},{"label":"الخطوة 7: الدالة المساعدة لعرض النتائج","href":"Step-7-Helper-function-for-results-display","type":2,"isActive":false},{"label":"الخطوة 8: مقارنة البحث القياسي مقابل البحث القائم على التضاؤل","href":"Step-8-Compare-standard-vs-decay-based-search","type":2,"isActive":false},{"label":"الخطوة 9: فهم حساب الدرجات","href":"Step-9-Understand-score-calculation","type":2,"isActive":false},{"label":"الخطوة 10: البحث الهجين مع التضاؤل الزمني","href":"Step-10-Hybrid-search-with-time-decay","type":2,"isActive":false},{"label":"الخطوة 11: جرّب قيم بارامترات مختلفة","href":"Step-11-Experiment-with-different-parameter-values","type":2,"isActive":false},{"label":"الخطوة 12: الاختبار باستخدام استعلامات مختلفة","href":"Step-12-Testing-with-different-queries","type":2,"isActive":false},{"label":"الخاتمة","href":"Conclusion","type":2,"isActive":false}]}