{"codeList":["$ pip install mistralai pymilvus python-dotenv\n","import json\nimport os\nimport re\n\nfrom dotenv import load_dotenv\nfrom mistralai import Mistral\nfrom pymilvus import CollectionSchema, DataType, FieldSchema, MilvusClient\nfrom pymilvus.client.types import LoadState\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Initialize clients\napi_key = os.getenv(\"MISTRAL_API_KEY\")\nif not api_key:\n    api_key = input(\"Enter your Mistral API key: \")\n    os.environ[\"MISTRAL_API_KEY\"] = api_key\n\nclient = Mistral(api_key=api_key)\n\n# Define models\ntext_model = \"mistral-small-latest\"  # For chat interactions\nocr_model = \"mistral-ocr-latest\"  # For OCR processing\nembedding_model = \"mistral-embed\"  # For generating embeddings\n\n# Connect to Milvus (default: localhost)\nmilvus_uri = os.getenv(\"MILVUS_URI\", \"http://localhost:19530\")\nmilvus_client = MilvusClient(uri=milvus_uri)\n\n# Milvus collection name\nCOLLECTION_NAME = \"document_ocr\"\n\nprint(f\"Connected to Mistral API and Milvus at {milvus_uri}\")\n","def setup_milvus_collection():\n    \"\"\"Create Milvus collection if it doesn't exist.\"\"\"\n    # Check if collection already exists\n    if milvus_client.has_collection(COLLECTION_NAME):\n        print(f\"Collection '{COLLECTION_NAME}' already exists.\")\n        return\n\n    # Define collection schema\n    fields = [\n        FieldSchema(name=\"id\", dtype=DataType.INT64, is_primary=True, auto_id=True),\n        FieldSchema(name=\"url\", dtype=DataType.VARCHAR, max_length=500),\n        FieldSchema(name=\"page_num\", dtype=DataType.INT64),\n        FieldSchema(name=\"content\", dtype=DataType.VARCHAR, max_length=65535),\n        FieldSchema(name=\"embedding\", dtype=DataType.FLOAT_VECTOR, dim=1024),\n    ]\n\n    schema = CollectionSchema(fields=fields)\n\n    # Create collection\n    milvus_client.create_collection(\n        collection_name=COLLECTION_NAME,\n        schema=schema,\n    )\n\n    # Create index for vector search\n    index_params = milvus_client.prepare_index_params()\n    index_params.add_index(\n        field_name=\"embedding\",\n        index_type=\"IVF_FLAT\",  # Index type for approximate nearest neighbor search\n        metric_type=\"COSINE\",  # Similarity metric\n        params={\"nlist\": 128},  # Number of clusters\n    )\n\n    milvus_client.create_index(\n        collection_name=COLLECTION_NAME, index_params=index_params\n    )\n\n    print(f\"Collection '{COLLECTION_NAME}' created successfully with index.\")\n\n\nsetup_milvus_collection()\n","# Generate embeddings using Mistral\ndef generate_embedding(text):\n    \"\"\"Generate embedding for text using Mistral embedding model.\"\"\"\n    response = client.embeddings.create(model=embedding_model, inputs=[text])\n    return response.data[0].embedding\n\n\n# Store OCR results in Milvus\ndef store_ocr_in_milvus(url, ocr_result):\n    \"\"\"Process OCR results and store in Milvus.\"\"\"\n    # Extract pages from OCR result\n    pages = []\n    current_page = \"\"\n    page_num = 0\n\n    for line in ocr_result.split(\"\\n\"):\n        if line.startswith(\"### Page \"):\n            if current_page:\n                pages.append((page_num, current_page.strip()))\n            page_num = int(line.replace(\"### Page \", \"\"))\n            current_page = \"\"\n        else:\n            current_page += line + \"\\n\"\n\n    # Add the last page\n    if current_page:\n        pages.append((page_num, current_page.strip()))\n\n    # Prepare data for Milvus\n    entities = []\n    for page_num, content in pages:\n        # Generate embedding for the page content\n        embedding = generate_embedding(content)\n\n        # Create entity\n        entity = {\n            \"url\": url,\n            \"page_num\": page_num,\n            \"content\": content,\n            \"embedding\": embedding,\n        }\n        entities.append(entity)\n\n    # Insert into Milvus\n    if entities:\n        milvus_client.insert(collection_name=COLLECTION_NAME, data=entities)\n        print(f\"Stored {len(entities)} pages from {url} in Milvus.\")\n\n    return len(entities)\n\n\n# Define OCR function\ndef perform_ocr(url):\n    \"\"\"Apply OCR to a URL (PDF or image).\"\"\"\n    try:\n        # Try PDF OCR first\n        response = client.ocr.process(\n            model=ocr_model, document={\"type\": \"document_url\", \"document_url\": url}\n        )\n    except Exception:\n        try:\n            # If PDF OCR fails, try Image OCR\n            response = client.ocr.process(\n                model=ocr_model, document={\"type\": \"image_url\", \"image_url\": url}\n            )\n        except Exception as e:\n            return str(e)  # Return error message\n\n    # Format the OCR results\n    ocr_result = \"\\n\\n\".join(\n        [\n            f\"### Page {i + 1}\\n{response.pages[i].markdown}\"\n            for i in range(len(response.pages))\n        ]\n    )\n\n    # Store in Milvus\n    store_ocr_in_milvus(url, ocr_result)\n\n    return ocr_result\n\n\n# Process URLs\ndef process_document(url):\n    \"\"\"Process a document URL and return its contents.\"\"\"\n    print(f\"Processing document: {url}\")\n    ocr_result = perform_ocr(url)\n    return ocr_result\n","def search_documents(query, limit=5):\n    \"\"\"Search Milvus for similar content to the query.\"\"\"\n    # Check if collection exists\n    if not milvus_client.has_collection(COLLECTION_NAME):\n        return \"No documents have been processed yet.\"\n\n    # Load collection if not already loaded\n    if milvus_client.get_load_state(COLLECTION_NAME) != LoadState.Loaded:\n        milvus_client.load_collection(COLLECTION_NAME)\n\n    print(f\"Searching for: {query}\")\n    query_embedding = generate_embedding(query)\n\n    search_params = {\"metric_type\": \"COSINE\", \"params\": {\"nprobe\": 10}}\n\n    search_results = milvus_client.search(\n        collection_name=COLLECTION_NAME,\n        data=[query_embedding],\n        anns_field=\"embedding\",\n        search_params=search_params,\n        limit=limit,\n        output_fields=[\"url\", \"page_num\", \"content\"],\n    )\n\n    results = []\n\n    if not search_results or not search_results[0]:\n        return \"No matching documents found.\"\n\n    for i, hit in enumerate(search_results[0]):\n        url = hit[\"entity\"][\"url\"]\n        page_num = hit[\"entity\"][\"page_num\"]\n        content = hit[\"entity\"][\"content\"]\n        score = hit[\"distance\"]\n\n        results.append(\n            {\n                \"rank\": i + 1,\n                \"score\": score,\n                \"url\": url,\n                \"page\": page_num,\n                \"content\": content[:500] + \"...\" if len(content) > 500 else content,\n            }\n        )\n\n    return results\n\n\n# Get statistics about stored documents\ndef get_document_stats():\n    \"\"\"Get statistics about documents stored in Milvus.\"\"\"\n    if not milvus_client.has_collection(COLLECTION_NAME):\n        return \"No documents have been processed yet.\"\n\n    # Get collection stats\n    stats = milvus_client.get_collection_stats(COLLECTION_NAME)\n    row_count = stats[\"row_count\"]\n\n    # Get unique URLs\n    results = milvus_client.query(\n        collection_name=COLLECTION_NAME, filter=\"\", output_fields=[\"url\"], limit=10000\n    )\n\n    unique_urls = set()\n    for result in results:\n        unique_urls.add(result[\"url\"])\n\n    return {\n        \"total_pages\": row_count,\n        \"unique_documents\": len(unique_urls),\n        \"documents\": list(unique_urls),\n    }\n","# Example PDF URL (Mistral AI paper)\npdf_url = \"https://arxiv.org/pdf/2310.06825.pdf\"\n\n# Process the document\nocr_result = process_document(pdf_url)\n\n# Display a preview of the OCR result\nprint(\"\\nOCR Result Preview:\")\nprint(\"====================\")\nprint(ocr_result[:1000] + \"...\")\n","# Example image URL (replace with your own)\nimage_url = \"https://s3.eu-central-1.amazonaws.com/readcoop.cis.public-assets.prod/hero/old-german-scripts.png\"\n\n# Process the image\ntry:\n    ocr_result = process_document(image_url)\n    print(\"\\nImage OCR Result:\")\n    print(\"=================\")\n    print(ocr_result)\nexcept Exception as e:\n    print(f\"Error processing image: {e}\")\n","# Get document statistics\nstats = get_document_stats()\nprint(f\"Total pages stored: {stats['total_pages']}\")\nprint(f\"Unique documents: {stats['unique_documents']}\")\nprint(\"\\nProcessed documents:\")\nfor i, url in enumerate(stats[\"documents\"]):\n    print(f\"{i + 1}. {url}\")\n","# Search for information\nquery = \"What is Mistral 7B?\"\nresults = search_documents(query, limit=3)\n\nprint(f\"Search results for: '{query}'\\n\")\n\nif isinstance(results, str):\n    print(results)\nelse:\n    for result in results:\n        print(f\"Result {result['rank']} (Score: {result['score']:.2f})\")\n        print(f\"Source: {result['url']} (Page {result['page']})\")\n        print(f\"Content: {result['content']}\\n\")\n","# Search for more specific information\nquery = \"What are the capabilities of Mistral's language models?\"\nresults = search_documents(query, limit=3)\n\nprint(f\"Search results for: '{query}'\\n\")\n\nif isinstance(results, str):\n    print(results)\nelse:\n    for result in results:\n        print(f\"Result {result['rank']} (Score: {result['score']:.2f})\")\n        print(f\"Source: {result['url']} (Page {result['page']})\")\n        print(f\"Content: {result['content']}\\n\")\n"],"headingContent":"Document Understanding with Mistral OCR and Milvus","anchorList":[{"label":"فهم المستندات باستخدام Mistral OCR و Milvus","href":"Document-Understanding-with-Mistral-OCR-and-Milvus","type":1,"isActive":false},{"label":"Mistral OCR","href":"Mistral-OCR","type":2,"isActive":false},{"label":"تضمينات ميسترال","href":"Mistral-Embeddings","type":2,"isActive":false},{"label":"قاعدة بيانات متجهات ميلفوس","href":"Milvus-Vector-Database","type":2,"isActive":false},{"label":"الإعداد والتبعيات","href":"Setup-and-Dependencies","type":2,"isActive":false},{"label":"إعداد البيئة","href":"Environment-Setup","type":2,"isActive":false},{"label":"إعداد مجموعة ميلفوس","href":"Setting-Up-Milvus-Collection","type":2,"isActive":false},{"label":"الوظائف الأساسية","href":"Core-Functionality","type":2,"isActive":false},{"label":"وظيفة البحث","href":"Search-Functionality","type":2,"isActive":false},{"label":"عرض توضيحي: معالجة المستندات","href":"Demo-Processing-Documents","type":2,"isActive":false},{"label":"عرض توضيحي: البحث في المستندات","href":"Demo-Searching-Documents","type":2,"isActive":false},{"label":"خاتمة","href":"Conclusion","type":2,"isActive":false}]}