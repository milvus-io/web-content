{"codeList":["! pip install -U pymilvus langchain-milvus langchain langchain-core langchain-openai langchain-text-splitters nest-asyncio\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","import nest_asyncio\n\nnest_asyncio.apply()\n","import asyncio\nimport random\nimport time\nfrom langchain_core.documents import Document\nfrom langchain_openai import OpenAIEmbeddings\nfrom langchain_milvus import Milvus\n\n# Define the Milvus URI\nURI = \"http://localhost:19530\"\n","def random_id():\n    \"\"\"Generate a random string ID\"\"\"\n    random_num_str = \"\"\n    for _ in range(16):\n        random_digit = str(random.randint(0, 9))\n        random_num_str += random_digit\n    return random_num_str\n\n\ndef generate_test_documents(num_docs):\n    \"\"\"Generate test documents for performance testing\"\"\"\n    docs = []\n    for i in range(num_docs):\n        content = (\n            f\"This is test document {i} with some random content: {random.random()}\"\n        )\n        metadata = {\n            \"id\": f\"doc_{i}\",\n            \"score\": random.random(),\n            \"category\": f\"cat_{i % 5}\",\n        }\n        doc = Document(page_content=content, metadata=metadata)\n        docs.append(doc)\n    return docs\n","def init_vector_store():\n    \"\"\"Initialize and return a fresh vector store for testing\"\"\"\n    return Milvus(\n        embedding_function=OpenAIEmbeddings(),\n        collection_name=\"langchain_perf_test\",\n        connection_args={\"uri\": URI},\n        auto_id=True,\n        drop_old=True,  # Always start with a fresh collection\n    )\n","async def async_add(milvus_store, num_adding):\n    \"\"\"Add documents asynchronously and measure the time\"\"\"\n    docs = generate_test_documents(num_adding)\n    start_time = time.time()\n    tasks = []\n    for doc in docs:\n        # Create tasks for each document addition\n        task = milvus_store.aadd_documents([doc])\n        tasks.append(task)\n    results = await asyncio.gather(*tasks)\n    end_time = time.time()\n    return end_time - start_time\n\n\ndef sync_add(milvus_store, num_adding):\n    \"\"\"Add documents synchronously and measure the time\"\"\"\n    docs = generate_test_documents(num_adding)\n    start_time = time.time()\n    for doc in docs:\n        result = milvus_store.add_documents([doc])\n    end_time = time.time()\n    return end_time - start_time\n","add_counts = [10, 100]\n\n# Get the event loop\nloop = asyncio.get_event_loop()\n\n# Create a new vector store for testing\nmilvus_store = init_vector_store()\n\n# Test async document addition\nfor count in add_counts:\n\n    async def measure_async_add():\n        async_time = await async_add(milvus_store, count)\n        print(f\"Async add for {count} documents took {async_time:.2f} seconds\")\n        return async_time\n\n    loop.run_until_complete(measure_async_add())\n\n# Reset vector store for sync tests\nmilvus_store = init_vector_store()\n\n# Test sync document addition\nfor count in add_counts:\n    sync_time = sync_add(milvus_store, count)\n    print(f\"Sync add for {count} documents took {sync_time:.2f} seconds\")\n","def populate_vector_store(milvus_store, num_docs=1000):\n    \"\"\"Populate the vector store with test documents\"\"\"\n    docs = generate_test_documents(num_docs)\n    milvus_store.add_documents(docs)\n    return docs\n\n\nasync def async_search(milvus_store, num_queries):\n    \"\"\"Perform async searches and measure the time\"\"\"\n    start_time = time.time()\n    tasks = []\n    for i in range(num_queries):\n        query = f\"test document {i % 50}\"\n        task = milvus_store.asimilarity_search(query=query, k=3)\n        tasks.append(task)\n    results = await asyncio.gather(*tasks)\n    end_time = time.time()\n    return end_time - start_time\n\n\ndef sync_search(milvus_store, num_queries):\n    \"\"\"Perform sync searches and measure the time\"\"\"\n    start_time = time.time()\n    for i in range(num_queries):\n        query = f\"test document {i % 50}\"\n        result = milvus_store.similarity_search(query=query, k=3)\n    end_time = time.time()\n    return end_time - start_time\n","# Initialize and populate the vector store\nmilvus_store = init_vector_store()\npopulate_vector_store(milvus_store, 1000)\n\nquery_counts = [10, 100]\n\n# Test async search\nfor count in query_counts:\n\n    async def measure_async_search():\n        async_time = await async_search(milvus_store, count)\n        print(f\"Async search for {count} queries took {async_time:.2f} seconds\")\n        return async_time\n\n    loop.run_until_complete(measure_async_search())\n\n# Test sync search\nfor count in query_counts:\n    sync_time = sync_search(milvus_store, count)\n    print(f\"Sync search for {count} queries took {sync_time:.2f} seconds\")\n","async def async_delete(milvus_store, num_deleting):\n    \"\"\"Delete documents asynchronously and measure the time\"\"\"\n    start_time = time.time()\n    tasks = []\n    for i in range(num_deleting):\n        expr = f\"id == 'doc_{i}'\"\n        task = milvus_store.adelete(expr=expr)\n        tasks.append(task)\n    results = await asyncio.gather(*tasks)\n    end_time = time.time()\n    return end_time - start_time\n\n\ndef sync_delete(milvus_store, num_deleting):\n    \"\"\"Delete documents synchronously and measure the time\"\"\"\n    start_time = time.time()\n    for i in range(num_deleting):\n        expr = f\"id == 'doc_{i}'\"\n        result = milvus_store.delete(expr=expr)\n    end_time = time.time()\n    return end_time - start_time\n","delete_counts = [10, 100]\n\n# Initialize and populate the vector store\nmilvus_store = init_vector_store()\npopulate_vector_store(milvus_store, 1000)\n\n# Test async delete\nfor count in delete_counts:\n\n    async def measure_async_delete():\n        async_time = await async_delete(milvus_store, count)\n        print(f\"Async delete for {count} operations took {async_time:.2f} seconds\")\n        return async_time\n\n    loop.run_until_complete(measure_async_delete())\n\n# Reset and repopulate the vector store for sync tests\nmilvus_store = init_vector_store()\npopulate_vector_store(milvus_store, 1000)\n\n# Test sync delete\nfor count in delete_counts:\n    sync_time = sync_delete(milvus_store, count)\n    print(f\"Sync delete for {count} operations took {sync_time:.2f} seconds\")\n"],"headingContent":"Asynchronous Functions in LangChain Milvus Integration","anchorList":[{"label":"الدوال غير المتزامنة في تكامل لانغتشين ميلفوس","href":"Asynchronous-Functions-in-LangChain-Milvus-Integration","type":1,"isActive":false},{"label":"نظرة عامة على واجهة برمجة التطبيقات غير المتزامنة","href":"Async-API-Overview","type":2,"isActive":false},{"label":"قبل أن تبدأ","href":"Before-you-begin","type":2,"isActive":false},{"label":"استكشاف واجهات برمجة التطبيقات غير المتزامنة ومقارنة الأداء","href":"Exploring-Async-APIs-and-Performance-Comparison","type":2,"isActive":false},{"label":"الخاتمة","href":"Conclusion","type":2,"isActive":false}]}