{"codeList":["from pymilvus import MilvusClient, DataType, Function, FunctionType\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nschema = MilvusClient.create_schema()\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True, auto_id=True)\nschema.add_field(field_name=\"text\", datatype=DataType.VARCHAR, max_length=1000, enable_analyzer=True)\nschema.add_field(field_name=\"sparse\", datatype=DataType.SPARSE_FLOAT_VECTOR)\n","import io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nCreateCollectionReq.CollectionSchema schema = CreateCollectionReq.CollectionSchema.builder()\n        .build();\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .autoID(true)\n        .build());\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"text\")\n        .dataType(DataType.VarChar)\n        .maxLength(1000)\n        .enableAnalyzer(true)\n        .build());\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"sparse\")\n        .dataType(DataType.SparseFloatVector)\n        .build());\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nschema := entity.NewSchema()\nschema.WithField(entity.NewField().\n    WithName(\"id\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true).\n    WithIsAutoID(true),\n).WithField(entity.NewField().\n    WithName(\"text\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithEnableAnalyzer(true).\n    WithMaxLength(1000),\n).WithField(entity.NewField().\n    WithName(\"sparse\").\n    WithDataType(entity.FieldTypeSparseVector),\n)\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\nconst schema = [\n  {\n    name: \"id\",\n    data_type: DataType.Int64,\n    is_primary_key: true,\n  },\n  {\n    name: \"text\",\n    data_type: \"VarChar\",\n    enable_analyzer: true,\n    enable_match: true,\n    max_length: 1000,\n  },\n  {\n    name: \"sparse\",\n    data_type: DataType.SparseFloatVector,\n  },\n];\n\nconsole.log(res.results)\n","export schema='{\n        \"autoId\": true,\n        \"enabledDynamicField\": false,\n        \"fields\": [\n            {\n                \"fieldName\": \"id\",\n                \"dataType\": \"Int64\",\n                \"isPrimary\": true\n            },\n            {\n                \"fieldName\": \"text\",\n                \"dataType\": \"VarChar\",\n                \"elementTypeParams\": {\n                    \"max_length\": 1000,\n                    \"enable_analyzer\": true\n                }\n            },\n            {\n                \"fieldName\": \"sparse\",\n                \"dataType\": \"SparseFloatVector\"\n            }\n        ]\n    }'\n","bm25_function = Function(\n    name=\"text_bm25_emb\", # Function name\n    input_field_names=[\"text\"], # Name of the VARCHAR field containing raw text data\n    output_field_names=[\"sparse\"], # Name of the SPARSE_FLOAT_VECTOR field reserved to store generated embeddings\n    function_type=FunctionType.BM25, # Set to `BM25`\n)\n\nschema.add_function(bm25_function)\n","import io.milvus.common.clientenum.FunctionType;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq.Function;\n\nimport java.util.*;\n\nschema.addFunction(Function.builder()\n        .functionType(FunctionType.BM25)\n        .name(\"text_bm25_emb\")\n        .inputFieldNames(Collections.singletonList(\"text\"))\n        .outputFieldNames(Collections.singletonList(\"sparse\"))\n        .build());\n","function := entity.NewFunction().\n    WithName(\"text_bm25_emb\").\n    WithInputFields(\"text\").\n    WithOutputFields(\"sparse\").\n    WithType(entity.FunctionTypeBM25)\nschema.WithFunction(function)\n","const functions = [\n    {\n      name: 'text_bm25_emb',\n      description: 'bm25 function',\n      type: FunctionType.BM25,\n      input_field_names: ['text'],\n      output_field_names: ['sparse'],\n      params: {},\n    },\n]；\n","export schema='{\n        \"autoId\": true,\n        \"enabledDynamicField\": false,\n        \"fields\": [\n            {\n                \"fieldName\": \"id\",\n                \"dataType\": \"Int64\",\n                \"isPrimary\": true\n            },\n            {\n                \"fieldName\": \"text\",\n                \"dataType\": \"VarChar\",\n                \"elementTypeParams\": {\n                    \"max_length\": 1000,\n                    \"enable_analyzer\": true\n                }\n            },\n            {\n                \"fieldName\": \"sparse\",\n                \"dataType\": \"SparseFloatVector\"\n            }\n        ],\n        \"functions\": [\n            {\n                \"name\": \"text_bm25_emb\",\n                \"type\": \"BM25\",\n                \"inputFieldNames\": [\"text\"],\n                \"outputFieldNames\": [\"sparse\"],\n                \"params\": {}\n            }\n        ]\n    }'\n","index_params = MilvusClient.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"sparse\",\n\n    index_type=\"SPARSE_INVERTED_INDEX\",\n    metric_type=\"BM25\",\n    params={\n        \"inverted_index_algo\": \"DAAT_MAXSCORE\",\n        \"bm25_k1\": 1.2,\n        \"bm25_b\": 0.75\n    }\n\n)\n","import io.milvus.v2.common.IndexParam;\n\nList<IndexParam> indexes = new ArrayList<>();\nindexes.add(IndexParam.builder()\n        .fieldName(\"sparse\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.BM25)\n        .build());    \n","indexOption := milvusclient.NewCreateIndexOption(\"my_collection\", \"sparse\",\n    index.NewAutoIndex(entity.MetricType(entity.BM25)))\n","const index_params = [\n  {\n    field_name: \"sparse\",\n    metric_type: \"BM25\",\n    index_type: \"AUTOINDEX\",\n  },\n];\n","export indexParams='[\n        {\n            \"fieldName\": \"sparse\",\n            \"metricType\": \"BM25\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n","client.create_collection(\n    collection_name='my_collection', \n    schema=schema, \n    index_params=index_params\n)\n","import io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexes)\n        .build();\nclient.createCollection(requestCreate);\n","err = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithIndexOptions(indexOption))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","await client.create_collection(\n    collection_name: 'my_collection', \n    schema: schema, \n    index_params: index_params,\n    functions: functions\n);\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n","client.insert('my_collection', [\n    {'text': 'information retrieval is a field of study.'},\n    {'text': 'information retrieval focuses on finding relevant information in large datasets.'},\n    {'text': 'data mining and information retrieval overlap in research.'},\n])\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport io.milvus.v2.service.vector.request.InsertReq;\n\nGson gson = new Gson();\nList<JsonObject> rows = Arrays.asList(\n        gson.fromJson(\"{\\\"text\\\": \\\"information retrieval is a field of study.\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"text\\\": \\\"information retrieval focuses on finding relevant information in large datasets.\\\"}\", JsonObject.class),\n        gson.fromJson(\"{\\\"text\\\": \\\"data mining and information retrieval overlap in research.\\\"}\", JsonObject.class)\n);\n\nclient.insert(InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(rows)\n        .build());\n","// go\n","await client.insert({\ncollection_name: 'my_collection', \ndata: [\n    {'text': 'information retrieval is a field of study.'},\n    {'text': 'information retrieval focuses on finding relevant information in large datasets.'},\n    {'text': 'data mining and information retrieval overlap in research.'},\n]);\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"text\": \"information retrieval is a field of study.\"},\n        {\"text\": \"information retrieval focuses on finding relevant information in large datasets.\"},\n        {\"text\": \"data mining and information retrieval overlap in research.\"}       \n    ],\n    \"collectionName\": \"my_collection\"\n}'\n\n","search_params = {\n    'params': {'drop_ratio_search': 0.2},\n}\n\nclient.search(\n    collection_name='my_collection', \n    data=['whats the focus of information retrieval?'],\n    anns_field='sparse',\n    limit=3,\n    search_params=search_params\n)\n","import io.milvus.v2.service.vector.request.SearchReq;\nimport io.milvus.v2.service.vector.request.data.EmbeddedText;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nMap<String,Object> searchParams = new HashMap<>();\nsearchParams.put(\"drop_ratio_search\", 0.2);\nSearchResp searchResp = client.search(SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .data(Collections.singletonList(new EmbeddedText(\"whats the focus of information retrieval?\")))\n        .annsField(\"sparse\")\n        .topK(3)\n        .searchParams(searchParams)\n        .outputFields(Collections.singletonList(\"text\"))\n        .build());\n","annSearchParams := index.NewCustomAnnParam()\nannSearchParams.WithExtraParam(\"drop_ratio_search\", 0.2)\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    3,               // limit\n    []entity.Vector{entity.Text(\"whats the focus of information retrieval?\")},\n).WithConsistencyLevel(entity.ClStrong).\n    WithANNSField(\"sparse\").\n    WithAnnParam(annSearchParams).\n    WithOutputFields(\"text\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"text: \", resultSet.GetColumn(\"text\").FieldData().GetScalars())\n}\n","await client.search(\n    collection_name: 'my_collection', \n    data: ['whats the focus of information retrieval?'],\n    anns_field: 'sparse',\n    limit: 3,\n    params: {'drop_ratio_search': 0.2},\n)\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n--data-raw '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        \"whats the focus of information retrieval?\"\n    ],\n    \"annsField\": \"sparse\",\n    \"limit\": 3,\n    \"outputFields\": [\n        \"text\"\n    ],\n    \"searchParams\":{\n        \"params\":{\n            \"drop_ratio_search\":0.2\n        }\n    }\n}'\n"],"headingContent":"Full Text Search","anchorList":[{"label":"Полнотекстовый поиск","href":"Full-Text-Search","type":1,"isActive":false},{"label":"Обзор","href":"Overview","type":2,"isActive":false},{"label":"Создание коллекции для полнотекстового поиска","href":"Create-a-collection-for-full-text-search","type":2,"isActive":false},{"label":"Вставка текстовых данных","href":"Insert-text-data","type":2,"isActive":false},{"label":"Выполнение полнотекстового поиска","href":"Perform-full-text-search","type":2,"isActive":false}]}