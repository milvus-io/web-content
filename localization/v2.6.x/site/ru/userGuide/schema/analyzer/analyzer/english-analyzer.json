{"codeList":["analyzer_params = {\n        \"tokenizer\": \"standard\",\n        \"filter\": [\n                \"lowercase\",\n                {\n                        \"type\": \"stemmer\",\n                        \"language\": \"english\"\n                }, {\n                        \"type\": \"stop\",\n                        \"stop_words\": \"_english_\"\n                }\n        ]\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"tokenizer\", \"standard\");\nanalyzerParams.put(\"filter\",\n        Arrays.asList(\"lowercase\",\n                new HashMap<String, Object>() {{\n                    put(\"type\", \"stemmer\");\n                    put(\"language\", \"english\");\n                }},\n                new HashMap<String, Object>() {{\n                    put(\"type\", \"stop\");\n                    put(\"stop_words\", Collections.singletonList(\"_english_\"));\n                }}\n        )\n);\n","const analyzer_params = {\n    \"type\": \"standard\", // Specifies the standard analyzer type\n    \"stop_words\", [\"of\"] // Optional: List of words to exclude from tokenization\n}\n","analyzerParams = map[string]any{\"tokenizer\": \"standard\",\n        \"filter\": []any{\"lowercase\", map[string]any{\n            \"type\":     \"stemmer\",\n            \"language\": \"english\",\n        }, map[string]any{\n            \"type\":       \"stop\",\n            \"stop_words\": \"_english_\",\n        }}}\n","# restful\nanalyzerParams='{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    \"lowercase\",\n    {\n      \"type\": \"stemmer\",\n      \"language\": \"english\"\n    },\n    {\n      \"type\": \"stop\",\n      \"stop_words\": \"_english_\"\n    }\n  ]\n}'\n\n","analyzer_params = {\n    \"type\": \"english\",\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"type\", \"english\");\n","const analyzer_params = {\n    \"type\": \"english\",\n}\n","analyzerParams = map[string]any{\"type\": \"english\"}\n","# restful\nanalyzerParams='{\n  \"type\": \"english\"\n}'\n","analyzer_params = {\n    \"type\": \"english\",\n    \"stop_words\": [\"a\", \"an\", \"the\"]\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"type\", \"english\");\nanalyzerParams.put(\"stop_words\", Arrays.asList(\"a\", \"an\", \"the\"));\n","const analyzer_params = {\n    \"type\": \"english\",\n    \"stop_words\": [\"a\", \"an\", \"the\"]\n}\n","analyzerParams = map[string]any{\"type\": \"english\", \"stop_words\": []string{\"a\", \"an\", \"the\"}}\n","# restful\nanalyzerParams='{\n  \"type\": \"english\",\n  \"stop_words\": [\n    \"a\",\n    \"an\",\n    \"the\"\n  ]\n}'\n\n","analyzer_params = {\n    \"type\": \"english\",\n    \"stop_words\": [\"a\", \"an\", \"the\"]\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"type\", \"english\");\nanalyzerParams.put(\"stop_words\", Arrays.asList(\"a\", \"an\", \"the\"));\n","// javascript\n","analyzerParams = map[string]any{\"type\": \"english\", \"stop_words\": []string{\"a\", \"an\", \"the\"}}\n","# restful\nanalyzerParams='{\n  \"type\": \"english\",\n  \"stop_words\": [\n    \"a\",\n    \"an\",\n    \"the\"\n  ]\n}'\n\n","from pymilvus import (\n    MilvusClient,\n)\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\n# Sample text to analyze\nsample_text = \"Milvus is a vector database built for scale!\"\n\n# Run the standard analyzer with the defined configuration\nresult = client.run_analyzer(sample_text, analyzer_params)\nprint(\"English analyzer output:\", result)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.RunAnalyzerReq;\nimport io.milvus.v2.service.vector.response.RunAnalyzerResp;\n\nConnectConfig config = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build();\nMilvusClientV2 client = new MilvusClientV2(config);\n\nList<String> texts = new ArrayList<>();\ntexts.add(\"Milvus is a vector database built for scale!\");\n\nRunAnalyzerResp resp = client.runAnalyzer(RunAnalyzerReq.builder()\n        .texts(texts)\n        .analyzerParams(analyzerParams)\n        .build());\nList<RunAnalyzerResp.AnalyzerResult> results = resp.getResults();\n","// javascript\n","// go\n","# restful\n","English analyzer output: ['milvus', 'vector', 'databas', 'built', 'scale']\n"],"headingContent":"English","anchorList":[{"label":"Английский","href":"English","type":1,"isActive":false},{"label":"Определение","href":"Definition","type":2,"isActive":false},{"label":"Конфигурация","href":"Configuration","type":2,"isActive":false},{"label":"Примеры","href":"Examples","type":2,"isActive":false}]}