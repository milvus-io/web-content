{"codeList":["$ pip install --upgrade --quiet  langchain langchain-core langchain-community langchain-text-splitters langchain-milvus langchain-openai bs4 pymilvus[model] #langchain-voyageai\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","URI = \"http://localhost:19530\"\n# TOKEN = ...\n","from langchain_core.documents import Document\n\ndocs = [\n    Document(\n        page_content=\"In 'The Whispering Walls' by Ava Moreno, a young journalist named Sophia uncovers a decades-old conspiracy hidden within the crumbling walls of an ancient mansion, where the whispers of the past threaten to destroy her own sanity.\",\n        metadata={\"category\": \"Mystery\"},\n    ),\n    Document(\n        page_content=\"In 'The Last Refuge' by Ethan Blackwood, a group of survivors must band together to escape a post-apocalyptic wasteland, where the last remnants of humanity cling to life in a desperate bid for survival.\",\n        metadata={\"category\": \"Post-Apocalyptic\"},\n    ),\n    Document(\n        page_content=\"In 'The Memory Thief' by Lila Rose, a charismatic thief with the ability to steal and manipulate memories is hired by a mysterious client to pull off a daring heist, but soon finds themselves trapped in a web of deceit and betrayal.\",\n        metadata={\"category\": \"Heist/Thriller\"},\n    ),\n    Document(\n        page_content=\"In 'The City of Echoes' by Julian Saint Clair, a brilliant detective must navigate a labyrinthine metropolis where time is currency, and the rich can live forever, but at a terrible cost to the poor.\",\n        metadata={\"category\": \"Science Fiction\"},\n    ),\n    Document(\n        page_content=\"In 'The Starlight Serenade' by Ruby Flynn, a shy astronomer discovers a mysterious melody emanating from a distant star, which leads her on a journey to uncover the secrets of the universe and her own heart.\",\n        metadata={\"category\": \"Science Fiction/Romance\"},\n    ),\n    Document(\n        page_content=\"In 'The Shadow Weaver' by Piper Redding, a young orphan discovers she has the ability to weave powerful illusions, but soon finds herself at the center of a deadly game of cat and mouse between rival factions vying for control of the mystical arts.\",\n        metadata={\"category\": \"Fantasy\"},\n    ),\n    Document(\n        page_content=\"In 'The Lost Expedition' by Caspian Grey, a team of explorers ventures into the heart of the Amazon rainforest in search of a lost city, but soon finds themselves hunted by a ruthless treasure hunter and the treacherous jungle itself.\",\n        metadata={\"category\": \"Adventure\"},\n    ),\n    Document(\n        page_content=\"In 'The Clockwork Kingdom' by Augusta Wynter, a brilliant inventor discovers a hidden world of clockwork machines and ancient magic, where a rebellion is brewing against the tyrannical ruler of the land.\",\n        metadata={\"category\": \"Steampunk/Fantasy\"},\n    ),\n    Document(\n        page_content=\"In 'The Phantom Pilgrim' by Rowan Welles, a charismatic smuggler is hired by a mysterious organization to transport a valuable artifact across a war-torn continent, but soon finds themselves pursued by deadly assassins and rival factions.\",\n        metadata={\"category\": \"Adventure/Thriller\"},\n    ),\n    Document(\n        page_content=\"In 'The Dreamwalker's Journey' by Lyra Snow, a young dreamwalker discovers she has the ability to enter people's dreams, but soon finds herself trapped in a surreal world of nightmares and illusions, where the boundaries between reality and fantasy blur.\",\n        metadata={\"category\": \"Fantasy\"},\n    ),\n]\n","from langchain_milvus import Milvus, BM25BuiltInFunction\nfrom langchain_openai import OpenAIEmbeddings\n\n\nvectorstore = Milvus.from_documents(\n    documents=docs,\n    embedding=OpenAIEmbeddings(),\n    builtin_function=BM25BuiltInFunction(),  # output_field_names=\"sparse\"),\n    vector_field=[\"dense\", \"sparse\"],\n    connection_args={\n        \"uri\": URI,\n    },\n    consistency_level=\"Strong\",  # Supported values are (`\"Strong\"`, `\"Session\"`, `\"Bounded\"`, `\"Eventually\"`). See https://milvus.io/docs/consistency.md#Consistency-Level for more details.\n    drop_old=False,\n)\n","from typing import Dict, List\nfrom langchain_milvus.utils.sparse import BaseSparseEmbedding\n\n\nclass MyCustomEmbedding(BaseSparseEmbedding):  # inherit from BaseSparseEmbedding\n    def __init__(self, model_path): ...  # code to init or load model\n\n    def embed_query(self, query: str) -> Dict[int, float]:\n        ...  # code to embed query\n        return {  # fake embedding result\n            1: 0.1,\n            2: 0.2,\n            3: 0.3,\n            # ...\n        }\n\n    def embed_documents(self, texts: List[str]) -> List[Dict[int, float]]:\n        ...  # code to embed documents\n        return [  # fake embedding results\n            {\n                1: 0.1,\n                2: 0.2,\n                3: 0.3,\n                # ...\n            }\n        ] * len(texts)\n","# BM25SparseEmbedding is inherited from BaseSparseEmbedding\nfrom langchain_milvus.utils.sparse import BM25SparseEmbedding\n\nembedding1 = OpenAIEmbeddings()\n\ncorpus = [doc.page_content for doc in docs]\nembedding2 = BM25SparseEmbedding(\n    corpus=corpus\n)  # pass in corpus to initialize the statistics\n\nvectorstore = Milvus.from_documents(\n    documents=docs,\n    embedding=[embedding1, embedding2],\n    vector_field=[\"dense\", \"sparse\"],\n    connection_args={\n        \"uri\": URI,\n    },\n    consistency_level=\"Strong\",  # Supported values are (`\"Strong\"`, `\"Session\"`, `\"Bounded\"`, `\"Eventually\"`). See https://milvus.io/docs/consistency.md#Consistency-Level for more details.\n    drop_old=False,\n)\n","# from langchain_voyageai import VoyageAIEmbeddings\n\nembedding1 = OpenAIEmbeddings(model=\"text-embedding-ada-002\")\nembedding2 = OpenAIEmbeddings(model=\"text-embedding-3-large\")\n# embedding3 = VoyageAIEmbeddings(model=\"voyage-3\")  # You can also use embedding from other embedding model providers, e.g VoyageAIEmbeddings\n\n\nvectorstore = Milvus.from_documents(\n    documents=docs,\n    embedding=[embedding1, embedding2],  # embedding3],\n    builtin_function=BM25BuiltInFunction(output_field_names=\"sparse\"),\n    # `sparse` is the output field name of BM25BuiltInFunction, and `dense1` and `dense2` are the output field names of embedding1 and embedding2\n    vector_field=[\"dense1\", \"dense2\", \"sparse\"],\n    connection_args={\n        \"uri\": URI,\n    },\n    consistency_level=\"Strong\",  # Supported values are (`\"Strong\"`, `\"Session\"`, `\"Bounded\"`, `\"Eventually\"`). See https://milvus.io/docs/consistency.md#Consistency-Level for more details.\n    drop_old=False,\n)\n\nvectorstore.vector_fields\n","dense_index_param_1 = {\n    \"metric_type\": \"COSINE\",\n    \"index_type\": \"HNSW\",\n}\ndense_index_param_2 = {\n    \"metric_type\": \"IP\",\n    \"index_type\": \"HNSW\",\n}\nsparse_index_param = {\n    \"metric_type\": \"BM25\",\n    \"index_type\": \"AUTOINDEX\",\n}\n\nvectorstore = Milvus.from_documents(\n    documents=docs,\n    embedding=[embedding1, embedding2],\n    builtin_function=BM25BuiltInFunction(output_field_names=\"sparse\"),\n    index_params=[dense_index_param_1, dense_index_param_2, sparse_index_param],\n    vector_field=[\"dense1\", \"dense2\", \"sparse\"],\n    connection_args={\n        \"uri\": URI,\n    },\n    consistency_level=\"Strong\",  # Supported values are (`\"Strong\"`, `\"Session\"`, `\"Bounded\"`, `\"Eventually\"`). See https://milvus.io/docs/consistency.md#Consistency-Level for more details.\n    drop_old=False,\n)\n\nvectorstore.vector_fields\n","vectorstore = Milvus.from_documents(\n    documents=docs,\n    embedding=OpenAIEmbeddings(),\n    builtin_function=BM25BuiltInFunction(),\n    vector_field=[\"dense\", \"sparse\"],\n    connection_args={\n        \"uri\": URI,\n    },\n    consistency_level=\"Strong\",  # Supported values are (`\"Strong\"`, `\"Session\"`, `\"Bounded\"`, `\"Eventually\"`). See https://milvus.io/docs/consistency.md#Consistency-Level for more details.\n    drop_old=False,\n)\n\nquery = \"What are the novels Lila has written and what are their contents?\"\n\nvectorstore.similarity_search(\n    query, k=1, ranker_type=\"weighted\", ranker_params={\"weights\": [0.6, 0.4]}\n)\n","vectorstore.similarity_search(query, k=1, ranker_type=\"rrf\", ranker_params={\"k\": 100})\n","import bs4\nfrom langchain_community.document_loaders import WebBaseLoader\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\n# Create a WebBaseLoader instance to load documents from web sources\nloader = WebBaseLoader(\n    web_paths=(\n        \"https://lilianweng.github.io/posts/2023-06-23-agent/\",\n        \"https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/\",\n    ),\n    bs_kwargs=dict(\n        parse_only=bs4.SoupStrainer(\n            class_=(\"post-content\", \"post-title\", \"post-header\")\n        )\n    ),\n)\n# Load documents from web sources using the loader\ndocuments = loader.load()\n# Initialize a RecursiveCharacterTextSplitter for splitting text into chunks\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=2000, chunk_overlap=200)\n\n# Split the documents into chunks using the text_splitter\ndocs = text_splitter.split_documents(documents)\n\n# Let's take a look at the first document\ndocs[1]\n","vectorstore = Milvus.from_documents(\n    documents=docs,\n    embedding=OpenAIEmbeddings(),\n    builtin_function=BM25BuiltInFunction(),\n    vector_field=[\"dense\", \"sparse\"],\n    connection_args={\n        \"uri\": URI,\n    },\n    consistency_level=\"Strong\",  # Supported values are (`\"Strong\"`, `\"Session\"`, `\"Bounded\"`, `\"Eventually\"`). See https://milvus.io/docs/consistency.md#Consistency-Level for more details.\n    drop_old=False,\n)\n","from langchain_core.runnables import RunnablePassthrough\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_openai import ChatOpenAI\n\n# Initialize the OpenAI language model for response generation\nllm = ChatOpenAI(model_name=\"gpt-4o\", temperature=0)\n\n# Define the prompt template for generating AI responses\nPROMPT_TEMPLATE = \"\"\"\nHuman: You are an AI assistant, and provides answers to questions by using fact based and statistical information when possible.\nUse the following pieces of information to provide a concise answer to the question enclosed in <question> tags.\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n<context>\n{context}\n</context>\n\n<question>\n{question}\n</question>\n\nThe response should be specific and use statistics or numbers when possible.\n\nAssistant:\"\"\"\n\n# Create a PromptTemplate instance with the defined template and input variables\nprompt = PromptTemplate(\n    template=PROMPT_TEMPLATE, input_variables=[\"context\", \"question\"]\n)\n# Convert the vector store to a retriever\nretriever = vectorstore.as_retriever()\n\n\n# Define a function to format the retrieved documents\ndef format_docs(docs):\n    return \"\\n\\n\".join(doc.page_content for doc in docs)\n","# Define the RAG (Retrieval-Augmented Generation) chain for AI response generation\nrag_chain = (\n    {\"context\": retriever | format_docs, \"question\": RunnablePassthrough()}\n    | prompt\n    | llm\n    | StrOutputParser()\n)\n\n# rag_chain.get_graph().print_ascii()\n","query = \"What is PAL and PoT?\"\nres = rag_chain.invoke(query)\nres\n"],"headingContent":"Milvus Hybrid Search Retriever","anchorList":[{"label":"Гибридный поисковый ретривер Milvus","href":"Milvus-Hybrid-Search-Retriever","type":1,"isActive":false},{"label":"Предварительные условия","href":"Prerequisites","type":2,"isActive":false},{"label":"Плотное встраивание + разреженное встраивание","href":"Dense-embedding-+-Sparse-embedding","type":2,"isActive":false},{"label":"Определение нескольких произвольных векторных полей","href":"Define-multiple-arbitrary-vector-fields","type":2,"isActive":false},{"label":"Использование гибридного поиска и реранжирования в RAG","href":"Using-Hybrid-Search-and-Reranking-in-RAG","type":2,"isActive":false}]}