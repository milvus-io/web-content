{"codeList":["from pymilvus import MilvusClient, DataType\n\n# 1. Set up a Milvus client\nclient = MilvusClient(\n    uri=\"http://localhost:19530\"\n)\n\n# 2. Create schema\n# 2.1. Create schema\nschema = MilvusClient.create_schema(\n    auto_id=False,\n    enable_dynamic_field=True,\n)\n\n# 2.2. Add fields to schema\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5)\n\n# 3. Create collection\nclient.create_collection(\n    collection_name=\"customized_setup\", \n    schema=schema, \n)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\n\n// 1. Connect to Milvus server\nConnectConfig connectConfig = ConnectConfig.builder()\n    .uri(CLUSTER_ENDPOINT)\n    .build();\n\nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\n// 2. Create a collection\n\n// 2.1 Create schema\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\n\n// 2.2 Add fields to schema\nschema.addField(AddFieldReq.builder().fieldName(\"id\").dataType(DataType.Int64).isPrimaryKey(true).autoID(false).build());\nschema.addField(AddFieldReq.builder().fieldName(\"vector\").dataType(DataType.FloatVector).dimension(5).build());\n\n// 3 Create a collection without schema and index parameters\nCreateCollectionReq customizedSetupReq = CreateCollectionReq.builder()\n.collectionName(\"customized_setup\")\n.collectionSchema(schema)\n.build();\n\nclient.createCollection(customizedSetupReq);\n","// 1. Set up a Milvus Client\nclient = new MilvusClient({address, token});\n\n// 2. Define fields for the collection\nconst fields = [\n    {\n        name: \"id\",\n        data_type: DataType.Int64,\n        is_primary_key: true,\n        autoID: false\n    },\n    {\n        name: \"vector\",\n        data_type: DataType.FloatVector,\n        dim: 5\n    },\n]\n\n// 3. Create a collection\nres = await client.createCollection({\n    collection_name: \"customized_setup\",\n    fields: fields,\n})\n\nconsole.log(res.error_code)  \n\n// Output\n// \n// Success\n// \n","# 4.1. Set up the index parameters\nindex_params = MilvusClient.prepare_index_params()\n\n# 4.2. Add an index on the vector field.\nindex_params.add_index(\n    field_name=\"vector\",\n    metric_type=\"COSINE\",\n    index_type=\"IVF_FLAT\",\n    index_name=\"vector_index\",\n    params={ \"nlist\": 128 }\n)\n\n# 4.3. Create an index file\nclient.create_index(\n    collection_name=\"customized_setup\",\n    index_params=index_params,\n    sync=False # Whether to wait for index creation to complete before returning. Defaults to True.\n)\n","import io.milvus.v2.common.IndexParam;\nimport io.milvus.v2.service.index.request.CreateIndexReq;\n\n// 4 Prepare index parameters\n\n// 4.2 Add an index for the vector field \"vector\"\nIndexParam indexParamForVectorField = IndexParam.builder()\n    .fieldName(\"vector\")\n    .indexName(\"vector_index\")\n    .indexType(IndexParam.IndexType.IVF_FLAT)\n    .metricType(IndexParam.MetricType.COSINE)\n    .extraParams(Map.of(\"nlist\", 128))\n    .build();\n\nList<IndexParam> indexParams = new ArrayList<>();\nindexParams.add(indexParamForVectorField);\n\n// 4.3 Crate an index file\nCreateIndexReq createIndexReq = CreateIndexReq.builder()\n    .collectionName(\"customized_setup\")\n    .indexParams(indexParams)\n    .build();\n\nclient.createIndex(createIndexReq);\n","// 4. Set up index for the collection\n// 4.1. Set up the index parameters\nres = await client.createIndex({\n    collection_name: \"customized_setup\",\n    field_name: \"vector\",\n    index_type: \"AUTOINDEX\",\n    metric_type: \"COSINE\",   \n    index_name: \"vector_index\",\n    params: { \"nlist\": 128 }\n})\n\nconsole.log(res.error_code)\n\n// Output\n// \n// Success\n// \n","# 5. Describe index\nres = client.list_indexes(\n    collection_name=\"customized_setup\"\n)\n\nprint(res)\n\n# Output\n#\n# [\n#     \"vector_index\",\n# ]\n\nres = client.describe_index(\n    collection_name=\"customized_setup\",\n    index_name=\"vector_index\"\n)\n\nprint(res)\n\n# Output\n#\n# {\n#     \"index_type\": ,\n#     \"metric_type\": \"COSINE\",\n#     \"field_name\": \"vector\",\n#     \"index_name\": \"vector_index\"\n# }\n","import io.milvus.v2.service.index.request.DescribeIndexReq;\nimport io.milvus.v2.service.index.response.DescribeIndexResp;\n\n// 5. Describe index\n// 5.1 List the index names\nListIndexesReq listIndexesReq = ListIndexesReq.builder()\n    .collectionName(\"customized_setup\")\n    .build();\n\nList<String> indexNames = client.listIndexes(listIndexesReq);\n\nSystem.out.println(indexNames);\n\n// Output:\n// [\n//     \"vector_index\"\n// ]\n\n// 5.2 Describe an index\nDescribeIndexReq describeIndexReq = DescribeIndexReq.builder()\n    .collectionName(\"customized_setup\")\n    .indexName(\"vector_index\")\n    .build();\n\nDescribeIndexResp describeIndexResp = client.describeIndex(describeIndexReq);\n\nSystem.out.println(JSONObject.toJSON(describeIndexResp));\n\n// Output:\n// {\n//     \"metricType\": \"COSINE\",\n//     \"indexType\": \"AUTOINDEX\",\n//     \"fieldName\": \"vector\",\n//     \"indexName\": \"vector_index\"\n// }\n","// 5. Describe the index\nres = await client.describeIndex({\n    collection_name: \"customized_setup\",\n    index_name: \"vector_index\"\n})\n\nconsole.log(JSON.stringify(res.index_descriptions, null, 2))\n\n// Output\n// \n// [\n//   {\n//     \"params\": [\n//       {\n//         \"key\": \"index_type\",\n//         \"value\": \"AUTOINDEX\"\n//       },\n//       {\n//         \"key\": \"metric_type\",\n//         \"value\": \"COSINE\"\n//       }\n//     ],\n//     \"index_name\": \"vector_index\",\n//     \"indexID\": \"449007919953063141\",\n//     \"field_name\": \"vector\",\n//     \"indexed_rows\": \"0\",\n//     \"total_rows\": \"0\",\n//     \"state\": \"Finished\",\n//     \"index_state_fail_reason\": \"\",\n//     \"pending_index_rows\": \"0\"\n//   }\n// ]\n// \n","# 6. Drop index\nclient.drop_index(\n    collection_name=\"customized_setup\",\n    index_name=\"vector_index\"\n)\n","// 6. Drop index\n\nDropIndexReq dropIndexReq = DropIndexReq.builder()\n    .collectionName(\"customized_setup\")\n    .indexName(\"vector_index\")\n    .build();\n\nclient.dropIndex(dropIndexReq);\n","// 6. Drop the index\nres = await client.dropIndex({\n    collection_name: \"customized_setup\",\n    index_name: \"vector_index\"\n})\n\nconsole.log(res.error_code)\n\n// Output\n// \n// Success\n// \n"],"headingContent":"Index Vector Fields","anchorList":[{"label":"Index Vector Fields","href":"Index-Vector-Fields","type":1,"isActive":false},{"label":"Overview","href":"Overview","type":2,"isActive":false},{"label":"Preparations","href":"Preparations","type":2,"isActive":false},{"label":"Index a Collection","href":"Index-a-Collection","type":2,"isActive":false},{"label":"Check Index Details","href":"Check-Index-Details","type":2,"isActive":false},{"label":"Drop an Index","href":"Drop-an-Index","type":2,"isActive":false}]}