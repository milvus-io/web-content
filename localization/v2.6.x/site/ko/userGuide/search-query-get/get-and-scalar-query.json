{"codeList":["[\n        {\"id\": 0, \"vector\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], \"color\": \"pink_8682\"},\n        {\"id\": 1, \"vector\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104], \"color\": \"red_7025\"},\n        {\"id\": 2, \"vector\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592], \"color\": \"orange_6781\"},\n        {\"id\": 3, \"vector\": [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345], \"color\": \"pink_9298\"},\n        {\"id\": 4, \"vector\": [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106], \"color\": \"red_4794\"},\n        {\"id\": 5, \"vector\": [0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955], \"color\": \"yellow_4222\"},\n        {\"id\": 6, \"vector\": [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987], \"color\": \"red_9392\"},\n        {\"id\": 7, \"vector\": [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052], \"color\": \"grey_8510\"},\n        {\"id\": 8, \"vector\": [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336], \"color\": \"white_9381\"},\n        {\"id\": 9, \"vector\": [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717, -0.6980531615588608], \"color\": \"purple_4976\"},\n]\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nres = client.get(\n    collection_name=\"my_collection\",\n    ids=[0, 1, 2],\n    output_fields=[\"vector\", \"color\"]\n)\n\nprint(res)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.GetReq\nimport io.milvus.v2.service.vector.request.GetResp\nimport java.util.*;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n        \nGetReq getReq = GetReq.builder()\n        .collectionName(\"my_collection\")\n        .ids(Arrays.asList(0, 1, 2))\n        .outputFields(Arrays.asList(\"vector\", \"color\"))\n        .build();\n\nGetResp getResp = client.get(getReq);\n\nList<QueryResp.QueryResult> results = getResp.getGetResults();\nfor (QueryResp.QueryResult result : results) {\n    System.out.println(result.getEntity());\n}\n\n// Output\n// {color=pink_8682, vector=[0.35803765, -0.6023496, 0.18414013, -0.26286206, 0.90294385], id=0}\n// {color=red_7025, vector=[0.19886813, 0.060235605, 0.6976963, 0.26144746, 0.8387295], id=1}\n// {color=orange_6781, vector=[0.43742132, -0.55975026, 0.6457888, 0.7894059, 0.20785794], id=2}\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nresultSet, err := client.Get(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithConsistencyLevel(entity.ClStrong).\n    WithIDs(column.NewColumnInt64(\"id\", []int64{0, 1, 2})).\n    WithOutputFields(\"vector\", \"color\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(\"id: \", resultSet.GetColumn(\"id\").FieldData().GetScalars())\nfmt.Println(\"vector: \", resultSet.GetColumn(\"vector\").FieldData().GetVectors())\nfmt.Println(\"color: \", resultSet.GetColumn(\"color\").FieldData().GetScalars())\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nconst res = client.get({\n    collection_name=\"my_collection\",\n    ids=[0,1,2],\n    output_fields=[\"vector\", \"color\"]\n})\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/get\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"id\": [0, 1, 2],\n    \"outputFields\": [\"vector\", \"color\"]\n}'\n\n# {\"code\":0,\"cost\":0,\"data\":[{\"color\":\"pink_8682\",\"id\":0,\"vector\":[0.35803765,-0.6023496,0.18414013,-0.26286206,0.90294385]},{\"color\":\"red_7025\",\"id\":1,\"vector\":[0.19886813,0.060235605,0.6976963,0.26144746,0.8387295]},{\"color\":\"orange_6781\",\"id\":2,\"vector\":[0.43742132,-0.55975026,0.6457888,0.7894059,0.20785794]}]}\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=\"color like \\\"red%\\\"\",\n    output_fields=[\"vector\", \"color\"],\n    limit=3\n)\n","import io.milvus.v2.service.vector.request.QueryReq\nimport io.milvus.v2.service.vector.request.QueryResp\n\nQueryReq queryReq = QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(\"color like \\\"red%\\\"\")\n        .outputFields(Arrays.asList(\"vector\", \"color\"))\n        .limit(3)\n        .build();\n\nQueryResp getResp = client.query(queryReq);\n\nList<QueryResp.QueryResult> results = getResp.getQueryResults();\nfor (QueryResp.QueryResult result : results) {\n    System.out.println(result.getEntity());\n}\n\n// Output\n// {color=red_7025, vector=[0.19886813, 0.060235605, 0.6976963, 0.26144746, 0.8387295], id=1}\n// {color=red_4794, vector=[0.44523495, -0.8757027, 0.82207793, 0.4640629, 0.3033748], id=4}\n// {color=red_9392, vector=[0.8371978, -0.015764369, -0.31062937, -0.56266695, -0.8984948], id=6}\n","resultSet, err := client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(\"color like \\\"red%\\\"\").\n    WithOutputFields(\"vector\", \"color\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(\"id: \", resultSet.GetColumn(\"id\").FieldData().GetScalars())\nfmt.Println(\"vector: \", resultSet.GetColumn(\"vector\").FieldData().GetVectors())\nfmt.Println(\"color: \", resultSet.GetColumn(\"color\").FieldData().GetScalars())\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nconst res = client.query({\n    collection_name=\"my_collection\",\n    filter='color like \"red%\"',\n    output_fields=[\"vector\", \"color\"],\n    limit(3)\n})\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"color like \\\"red%\\\"\",\n    \"limit\": 3,\n    \"outputFields\": [\"vector\", \"color\"]\n}'\n#{\"code\":0,\"cost\":0,\"data\":[{\"color\":\"red_7025\",\"id\":1,\"vector\":[0.19886813,0.060235605,0.6976963,0.26144746,0.8387295]},{\"color\":\"red_4794\",\"id\":4,\"vector\":[0.44523495,-0.8757027,0.82207793,0.4640629,0.3033748]},{\"color\":\"red_9392\",\"id\":6,\"vector\":[0.8371978,-0.015764369,-0.31062937,-0.56266695,-0.8984948]}]}\n","from pymilvus import connections, Collection\n\nconnections.connect(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\ncollection = Collection(\"my_collection\")\n\niterator = collection.query_iterator(\n    batch_size=10,\n    expr=\"color like \\\"red%\\\"\",\n    output_fields=[\"color\"]\n)\n\nresults = []\n\nwhile True:\n    result = iterator.next()\n    if not result:\n        iterator.close()\n        break\n\n    print(result)\n    results += result\n","import io.milvus.orm.iterator.QueryIterator;\nimport io.milvus.response.QueryResultsWrapper;\nimport io.milvus.v2.common.ConsistencyLevel;\nimport io.milvus.v2.service.vector.request.QueryIteratorReq;\n\nQueryIteratorReq req = QueryIteratorReq.builder()\n        .collectionName(\"my_collection\")\n        .expr(\"color like \\\"red%\\\"\")\n        .batchSize(50L)\n        .outputFields(Collections.singletonList(\"color\"))\n        .consistencyLevel(ConsistencyLevel.BOUNDED)\n        .build();\nQueryIterator queryIterator = client.queryIterator(req);\n\nwhile (true) {\n    List<QueryResultsWrapper.RowRecord> res = queryIterator.next();\n    if (res.isEmpty()) {\n        queryIterator.close();\n        break;\n    }\n\n    for (QueryResultsWrapper.RowRecord record : res) {\n        System.out.println(record);\n    }\n}\n\n// Output\n// [color:red_7025, id:1]\n// [color:red_4794, id:4]\n// [color:red_9392, id:6]\n","// go\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst iterator = await milvusClient.queryIterator({\n  collection_name: 'my_collection',\n  batchSize: 10,\n  expr: 'color like \"red%\"',\n  output_fields: ['color'],\n});\n\nconst results = [];\nfor await (const value of iterator) {\n  results.push(...value);\n  page += 1;\n}\n","# Not available\n","from pymilvus import MilvusClient\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nres = client.get(\n    collection_name=\"my_collection\",\n    # highlight-next-line\n    partitionNames=[\"partitionA\"],\n    ids=[10, 11, 12],\n    output_fields=[\"vector\", \"color\"]\n)\n\nfrom pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nres = client.query(\n    collection_name=\"my_collection\",\n    # highlight-next-line\n    partitionNames=[\"partitionA\"],\n    filter=\"color like \\\"red%\\\"\",\n    output_fields=[\"vector\", \"color\"],\n    limit=3\n)\n\n# Use QueryIterator\nfrom pymilvus import connections, Collection\n\nconnections.connect(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\ncollection = Collection(\"my_collection\")\n\niterator = collection.query_iterator(\n    # highlight-next-line\n    partition_names=[\"partitionA\"],\n    batch_size=10,\n    expr=\"color like \\\"red%\\\"\",\n    output_fields=[\"color\"]\n)\n\nresults = []\n\nwhile True:\n    result = iterator.next()\n    if not result:\n        iterator.close()\n        break\n\n    print(result)\n    results += result\n","GetReq getReq = GetReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionName(\"partitionA\")\n        .ids(Arrays.asList(10, 11, 12))\n        .outputFields(Collections.singletonList(\"color\"))\n        .build();\n\nGetResp getResp = client.get(getReq);\n\nQueryReq queryReq = QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionNames(Collections.singletonList(\"partitionA\"))\n        .filter(\"color like \\\"red%\\\"\")\n        .outputFields(Collections.singletonList(\"color\"))\n        .limit(3)\n        .build();\n\nQueryResp getResp = client.query(queryReq);\n\nQueryIteratorReq req = QueryIteratorReq.builder()\n        .collectionName(\"my_collection\")\n        .partitionNames(Collections.singletonList(\"partitionA\"))\n        .expr(\"color like \\\"red%\\\"\")\n        .batchSize(50L)\n        .outputFields(Collections.singletonList(\"color\"))\n        .consistencyLevel(ConsistencyLevel.BOUNDED)\n        .build();\nQueryIterator queryIterator = client.queryIterator(req);\n","resultSet, err := client.Get(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithPartitions(\"partitionA\").\n    WithIDs(column.NewColumnInt64(\"id\", []int64{10, 11, 12})).\n    WithOutputFields(\"vector\", \"color\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(\"id: \", resultSet.GetColumn(\"id\").FieldData().GetScalars())\nfmt.Println(\"vector: \", resultSet.GetColumn(\"vector\").FieldData().GetVectors())\nfmt.Println(\"color: \", resultSet.GetColumn(\"color\").FieldData().GetScalars())\n\nresultSet, err := client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithPartitions(\"partitionA\").\n    WithFilter(\"color like \\\"red%\\\"\").\n    WithOutputFields(\"vector\", \"color\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(\"id: \", resultSet.GetColumn(\"id\").FieldData().GetScalars())\nfmt.Println(\"vector: \", resultSet.GetColumn(\"vector\").FieldData().GetVectors())\nfmt.Println(\"color: \", resultSet.GetColumn(\"color\").FieldData().GetScalars())\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\n// Use get\nvar res = client.query({\n    collection_name=\"my_collection\",\n    // highlight-next-line\n    partition_names=[\"partitionA\"],\n    filter='color like \"red%\"',\n    output_fields=[\"vector\", \"color\"],\n    limit(3)\n})\n\n// Use query\nres = client.query({\n    collection_name=\"my_collection\",\n    // highlight-next-line\n    partition_names=[\"partitionA\"],\n    filter=\"color like \\\"red%\\\"\",\n    output_fields=[\"vector\", \"color\"],\n    limit(3)\n})\n\n// Use queryiterator\nconst iterator = await milvusClient.queryIterator({\n  collection_name: 'my_collection',\n  partition_names: ['partitionA'],\n  batchSize: 10,\n  expr: 'color like \"red%\"',\n  output_fields: ['vector', 'color'],\n});\n\nconst results = [];\nfor await (const value of iterator) {\n  results.push(...value);\n  page += 1;\n}\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\n# Use get\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/get\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionNames\": [\"partitionA\"],\n    \"id\": [0, 1, 2],\n    \"outputFields\": [\"vector\", \"color\"]\n}'\n\n# Use query\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/get\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"partitionNames\": [\"partitionA\"],\n    \"filter\": \"color like \\\"red%\\\"\",\n    \"limit\": 3,\n    \"outputFields\": [\"vector\", \"color\"],\n    \"id\": [0, 1, 2]\n}'\n"],"headingContent":"Query","anchorList":[{"label":"쿼리","href":"Query","type":1,"isActive":false},{"label":"개요","href":"Overview","type":2,"isActive":false},{"label":"Get 사용","href":"Use-Get","type":2,"isActive":false},{"label":"쿼리 사용","href":"Use-Query","type":2,"isActive":false},{"label":"쿼리 이터레이터 사용","href":"Use-QueryIterator","type":2,"isActive":false},{"label":"파티션 내 쿼리","href":"Queries-in-Partitions","type":2,"isActive":false}]}