{"codeList":["[\n        {\"id\": 0, \"vector\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], \"chunk\": \"pink_8682\", \"docId\": 1},\n        {\"id\": 1, \"vector\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104], \"chunk\": \"red_7025\", \"docId\": 5},\n        {\"id\": 2, \"vector\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592], \"chunk\": \"orange_6781\", \"docId\": 2},\n        {\"id\": 3, \"vector\": [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345], \"chunk\": \"pink_9298\", \"docId\": 3},\n        {\"id\": 4, \"vector\": [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106], \"chunk\": \"red_4794\", \"docId\": 3},\n        {\"id\": 5, \"vector\": [0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955], \"chunk\": \"yellow_4222\", \"docId\": 4},\n        {\"id\": 6, \"vector\": [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987], \"chunk\": \"red_9392\", \"docId\": 1},\n        {\"id\": 7, \"vector\": [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052], \"chunk\": \"grey_8510\", \"docId\": 2},\n        {\"id\": 8, \"vector\": [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336], \"chunk\": \"white_9381\", \"docId\": 5},\n        {\"id\": 9, \"vector\": [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717, -0.6980531615588608], \"chunk\": \"purple_4976\", \"docId\": 3},\n]\n\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nquery_vectors = [\n    [0.14529211512077012, 0.9147257273453546, 0.7965055218724449, 0.7009258593102812, 0.5605206522382088]]\n\n# Group search results\nres = client.search(\n    collection_name=\"my_collection\",\n    data=query_vectors,\n    limit=3,\n    group_by_field=\"docId\",\n    output_fields=[\"docId\"]\n)\n\n# Retrieve the values in the `docId` column\ndoc_ids = [result['entity']['docId'] for result in res[0]]\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.SearchReq\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.SearchResp\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n\nFloatVec queryVector = new FloatVec(new float[]{0.14529211512077012f, 0.9147257273453546f, 0.7965055218724449f, 0.7009258593102812f, 0.5605206522382088f});\nSearchReq searchReq = SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .data(Collections.singletonList(queryVector))\n        .topK(3)\n        .groupByFieldName(\"docId\")\n        .outputFields(Collections.singletonList(\"docId\"))\n        .build();\n\nSearchResp searchResp = client.search(searchReq);\n\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n}\n\n// Output\n// TopK results:\n// SearchResp.SearchResult(entity={docId=5}, score=0.74767184, id=1)\n// SearchResp.SearchResult(entity={docId=2}, score=0.6254269, id=7)\n// SearchResp.SearchResult(entity={docId=3}, score=0.3611898, id=3)\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nqueryVector := []float32{0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592}\n\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    3,               // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithANNSField(\"vector\").\n    WithGroupByField(\"docId\").\n    WithOutputFields(\"docId\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"docId: \", resultSet.GetColumn(\"docId\").FieldData().GetScalars())\n}\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nvar query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = await client.search({\n    collection_name: \"my_collection\",\n    data: [query_vector],\n    limit: 3,\n    // highlight-start\n    group_by_field: \"docId\"\n    // highlight-end\n})\n\n// Retrieve the values in the `docId` column\nvar docIds = res.results.map(result => result.entity.docId)\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n    ],\n    \"annsField\": \"vector\",\n    \"limit\": 3,\n    \"groupingField\": \"docId\",\n    \"outputFields\": [\"docId\"]\n}'\n","# Group search results\n\nres = client.search(\n    collection_name=\"my_collection\", \n    data=query_vectors, # query vector\n    limit=5, # number of groups to return\n    group_by_field=\"docId\", # grouping field\n    group_size=2, # p to 2 entities to return from each group\n    strict_group_size=True, # return exact 2 entities from each group\n    output_fields=[\"docId\"]\n)\n","FloatVec queryVector = new FloatVec(new float[]{0.14529211512077012f, 0.9147257273453546f, 0.7965055218724449f, 0.7009258593102812f, 0.5605206522382088f});\nSearchReq searchReq = SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .data(Collections.singletonList(queryVector))\n        .topK(5)\n        .groupByFieldName(\"docId\")\n        .groupSize(2)\n        .strictGroupSize(true)\n        .outputFields(Collections.singletonList(\"docId\"))\n        .build();\n\nSearchResp searchResp = client.search(searchReq);\n\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n}\n\n// Output\n// TopK results:\n// SearchResp.SearchResult(entity={docId=5}, score=0.74767184, id=1)\n// SearchResp.SearchResult(entity={docId=5}, score=-0.49148706, id=8)\n// SearchResp.SearchResult(entity={docId=2}, score=0.6254269, id=7)\n// SearchResp.SearchResult(entity={docId=2}, score=0.38515577, id=2)\n// SearchResp.SearchResult(entity={docId=3}, score=0.3611898, id=3)\n// SearchResp.SearchResult(entity={docId=3}, score=0.19556211, id=4)\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nqueryVector := []float32{0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592}\n\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    5,               // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithANNSField(\"vector\").\n    WithGroupByField(\"docId\").\n    WithStrictGroupSize(true).\n    WithGroupSize(2).\n    WithOutputFields(\"docId\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"docId: \", resultSet.GetColumn(\"docId\").FieldData().GetScalars())\n}\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nvar query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = await client.search({\n    collection_name: \"my_collection\",\n    data: [query_vector],\n    limit: 5,\n    group_by_field: \"docId\",\n    // highlight-start\n    group_size: 2,\n    strict_group_size: true\n    // highlight-end\n})\n\n// Retrieve the values in the `docId` column\nvar docIds = res.results.map(result => result.entity.docId)\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n    ],\n    \"annsField\": \"vector\",\n    \"limit\": 5,\n    \"groupingField\": \"docId\",\n    \"groupSize\":2,\n    \"strictGroupSize\":true,\n    \"outputFields\": [\"docId\"]\n}'\n"],"headingContent":"Grouping Search","anchorList":[{"label":"그룹 검색","href":"Grouping-Search","type":1,"isActive":false},{"label":"개요","href":"Overview","type":2,"isActive":false},{"label":"그룹 검색 수행","href":"Perform-Grouping-Search","type":2,"isActive":false},{"label":"그룹 크기 구성","href":"Configure-group-size","type":2,"isActive":false},{"label":"고려 사항","href":"Considerations","type":2,"isActive":false}]}