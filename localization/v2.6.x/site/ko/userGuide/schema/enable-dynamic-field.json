{"codeList":["{\n  \"id\": 1,\n  \"vector\": [0.1, 0.2, 0.3],\n  \"name\": \"Item A\",    // Not in schema\n  \"category\": \"books\"  // Not in schema\n}\n","{\n  \"id\": 1,\n  \"vector\": [0.1, 0.2, 0.3],\n  // highlight-start\n  \"$meta\": {\n    \"name\": \"Item A\",\n    \"category\": \"books\"\n  }\n  // highlight-end\n}\n","{\n  \"brand\": \"Acme\",\n  \"price\": 29.99,\n  \"in_stock\": true,\n  \"tags\": [\"new\", \"hot\"],\n  \"specs\": {\n    \"weight\": \"1.2kg\",\n    \"dimensions\": { \"width\": 10, \"height\": 20 }\n  }\n}\n","from pymilvus import MilvusClient, DataType\n\n# Initialize client\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\n# Create schema with dynamic field enabled\nschema = client.create_schema(\n    auto_id=False,\n    # highlight-next-line\n    enable_dynamic_field=True,\n)\n\n# Add explicitly defined fields\nschema.add_field(field_name=\"my_id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"my_vector\", datatype=DataType.FLOAT_VECTOR, dim=5)\n\n# Create the collection\nclient.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema\n)\n","import io.milvus.v2.client.*;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\n\nConnectConfig config = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build();\nMilvusClientV2 client = new MilvusClientV2(config);\n\nCreateCollectionReq.CollectionSchema schema = CreateCollectionReq.CollectionSchema.builder()\n        .enableDynamicField(true)\n        .build();\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"my_id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(Boolean.TRUE)\n        .build());\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"my_vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\n\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .build();\nclient.createCollection(requestCreate);\n","import { MilvusClient, DataType, CreateCollectionReq } from '@zilliz/milvus2-sdk-node';\n\n// Initialize client\nconst client = new MilvusClient({ address: 'localhost:19530' });\n\n// Create collection\nconst res = await client.createCollection({\n  collection_name: 'my_collection',\n  schema:  [\n      {\n        name: 'my_id',\n        data_type: DataType.Int64,\n        is_primary_key: true,\n        autoID: false,\n      },\n      {\n        name: 'my_vector',\n        data_type: DataType.FloatVector,\n        type_params: {\n          dim: '5',\n      }\n   ],\n   enable_dynamic_field: true\n});\n\n","import (\n    \"context\"\n\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: \"localhost:19530\",\n})\nif err != nil {\n    return err\n}\n\nschema := entity.NewSchema().WithDynamicFieldEnabled(true)\nschema.WithField(entity.NewField().\n    WithName(\"my_id\").pk\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"my_vector\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(5),\n)\n\nerr = client.CreateCollection(ctx, milvusclient.NewCreateCollectionOption(\"my_collection\", schema))\nif err != nil {\n    return err\n}\n","# restful\nexport TOKEN=\"root:Milvus\"\nexport CLUSTER_ENDPOINT=\"http://localhost:19530\"\n\nexport myIdField='{\n  \"fieldName\": \"my_id\",\n  \"dataType\": \"Int64\",\n  \"isPrimary\": true,\n  \"autoID\": false\n}'\n\nexport myVectorField='{\n  \"fieldName\": \"my_vector\",\n  \"dataType\": \"FloatVector\",\n  \"elementTypeParams\": {\n    \"dim\": 5\n  }\n}'\n\nexport schema=\"{\n  \\\"autoID\\\": false,\n  \\\"enableDynamicField\\\": true,\n  \\\"fields\\\": [\n    $myIdField,\n    $myVectorField\n  ]\n}\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n--data \"{\n  \\\"collectionName\\\": \\\"my_collection\\\",\n  \\\"schema\\\": $schema\n}\"\n\n","entities = [\n    {\n        \"my_id\": 1, # Explicitly defined primary field\n        \"my_vector\": [0.1, 0.2, 0.3, 0.4, 0.5], # Explicitly defined vector field\n        \"overview\": \"Great product\",       # Scalar key not defined in schema\n        \"words\": 150,                      # Scalar key not defined in schema\n        \"dynamic_json\": {                  # JSON key not defined in schema\n            \"varchar\": \"some text\",\n            \"nested\": {\n                \"value\": 42.5\n            },\n            \"string_price\": \"99.99\"        # Number stored as string\n        }\n    }\n]\n\nclient.insert(collection_name=\"my_collection\", data=entities)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport io.milvus.v2.service.vector.request.InsertReq;\n\nGson gson = new Gson();\nJsonObject row = new JsonObject();\nrow.addProperty(\"my_id\", 1);\nrow.add(\"my_vector\", gson.toJsonTree(Arrays.asList(0.1, 0.2, 0.3, 0.4, 0.5)));\nrow.addProperty(\"overview\", \"Great product\");\nrow.addProperty(\"words\", 150);\n\nJsonObject dynamic = new JsonObject();\ndynamic.addProperty(\"varchar\", \"some text\");\ndynamic.addProperty(\"string_price\", \"99.99\");\n\nJsonObject nested = new JsonObject();\nnested.addProperty(\"value\", 42.5);\n\ndynamic.add(\"nested\", nested);\nrow.add(\"dynamic_json\", dynamic);\n\nclient.insert(InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(Collections.singletonList(row))\n        .build());\n","\nconst entities = [\n  {\n    my_id: 1,\n    my_vector: [0.1, 0.2, 0.3, 0.4, 0.5],\n    overview: 'Great product',\n    words: 150,\n    dynamic_json: {\n      varchar: 'some text',\n      nested: {\n        value: 42.5,\n      },\n      string_price: '99.99',\n    },\n  },\n];\nconst res = await client.insert({\n    collection_name: 'my_collection',\n    data: entities,\n});\n","_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"my_id\", []int64{1}).\n    WithFloatVectorColumn(\"my_vector\", 5, [][]float32{\n        {0.1, 0.2, 0.3, 0.4, 0.5},\n    }).WithColumns(\n    column.NewColumnVarChar(\"overview\", []string{\"Great product\"}),\n    column.NewColumnInt32(\"words\", []int32{150}),\n    column.NewColumnJSONBytes(\"dynamic_json\", [][]byte{\n        []byte(`{\n            varchar: 'some text',\n            nested: {\n                value: 42.5,\n            },\n            string_price: '99.99',\n        }`),\n    }),\n))\nif err != nil {\n    return err\n}\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n--data '{\n  \"data\": [\n    {\n      \"my_id\": 1,\n      \"my_vector\": [0.1, 0.2, 0.3, 0.4, 0.5],\n      \"overview\": \"Great product\",\n      \"words\": 150,\n      \"dynamic_json\": {\n        \"varchar\": \"some text\",\n        \"nested\": {\n          \"value\": 42.5\n        },\n        \"string_price\": \"99.99\"\n      }\n    }\n  ],\n  \"collectionName\": \"my_collection\"\n}'\n","index_params = client.prepare_index_params()\n\n# Index a simple string key\nindex_params.add_index(\n    field_name=\"overview\",  # Key name in the dynamic field\n    # highlight-next-line\n    index_type=\"AUTOINDEX\", # Must be set to AUTOINDEX or INVERTED for JSON path indexing\n    index_name=\"overview_index\",  # Unique index name\n    # highlight-start\n    params={\n        \"json_cast_type\": \"varchar\",   # Data type that Milvus uses when indexing the values\n        \"json_path\": \"overview\"        # JSON path to the key\n    }\n    # highlight-end\n)\n\n# Index a simple numeric key\nindex_params.add_index(\n    field_name=\"words\",  # Key name in the dynamic field\n    # highlight-next-line\n    index_type=\"AUTOINDEX\", # Must be set to AUTOINDEX or INVERTED for JSON path indexing\n    index_name=\"words_index\",  # Unique index name\n    # highlight-start\n    params={\n        \"json_cast_type\": \"double\",  # Data type that Milvus uses when indexing the values\n        \"json_path\": \"words\" # JSON path to the key\n    }\n    # highlight-end\n)\n\n# Index a nested key within a JSON object\nindex_params.add_index(\n    field_name=\"dynamic_json\", # JSON key name in the dynamic field\n    # highlight-next-line\n    index_type=\"AUTOINDEX\", # Must be set to AUTOINDEX or INVERTED for JSON path indexing\n    index_name=\"json_varchar_index\", # Unique index name\n    # highlight-start\n    params={\n        \"json_cast_type\": \"varchar\", # Data type that Milvus uses when indexing the values\n        \"json_path\": \"dynamic_json['varchar']\" # JSON path to the nested key\n    }\n    # highlight-end\n)\n\n# Index a deeply nested key\nindex_params.add_index(\n    field_name=\"dynamic_json\",\n    # highlight-next-line\n    index_type=\"AUTOINDEX\", # Must be set to AUTOINDEX or INVERTED for JSON path indexing\n    index_name=\"json_nested_index\", # Unique index name\n    # highlight-start\n    params={\n        \"json_cast_type\": \"double\",\n        \"json_path\": \"dynamic_json['nested']['value']\"\n    }\n    # highlight-end\n)\n","import io.milvus.v2.common.IndexParam;\n\nMap<String,Object> extraParams1 = new HashMap<>();\nextraParams1.put(\"json_path\", \"overview\");\nextraParams1.put(\"json_cast_type\", \"varchar\");\nindexParams.add(IndexParam.builder()\n        .fieldName(\"overview\")\n        .indexName(\"overview_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .extraParams(extraParams1)\n        .build());\n\nMap<String,Object> extraParams2 = new HashMap<>();\nextraParams2.put(\"json_path\", \"words\");\nextraParams2.put(\"json_cast_type\", \"double\");\nindexParams.add(IndexParam.builder()\n        .fieldName(\"words\")\n        .indexName(\"words_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .extraParams(extraParams2)\n        .build());\n\nMap<String,Object> extraParams3 = new HashMap<>();\nextraParams3.put(\"json_path\", \"dynamic_json['varchar']\");\nextraParams3.put(\"json_cast_type\", \"varchar\");\nindexParams.add(IndexParam.builder()\n        .fieldName(\"dynamic_json\")\n        .indexName(\"json_varchar_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .extraParams(extraParams3)\n        .build());\n\nMap<String,Object> extraParams4 = new HashMap<>();\nextraParams4.put(\"json_path\", \"dynamic_json['nested']['value']\");\nextraParams4.put(\"json_cast_type\", \"double\");\nindexParams.add(IndexParam.builder()\n        .fieldName(\"dynamic_json\")\n        .indexName(\"json_nested_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .extraParams(extraParams4)\n        .build());\n","const indexParams = [\n    {\n      collection_name: 'my_collection',\n      field_name: 'overview',\n      index_name: 'overview_index',\n      index_type: 'AUTOINDEX',\n      metric_type: 'NONE',\n      params: {\n        json_path: 'overview',\n        json_cast_type: 'varchar',\n      },\n    },\n    {\n      collection_name: 'my_collection',\n      field_name: 'words',\n      index_name: 'words_index',\n      index_type: 'AUTOINDEX',\n      metric_type: 'NONE',\n      params: {\n        json_path: 'words',\n        json_cast_type: 'double',\n      },\n    },\n    {\n      collection_name: 'my_collection',\n      field_name: 'dynamic_json',\n      index_name: 'json_varchar_index',\n      index_type: 'AUTOINDEX',\n      metric_type: 'NONE',\n      params: {\n        json_cast_type: 'varchar',\n        json_path: \"dynamic_json['varchar']\",\n      },\n    },\n    {\n      collection_name: 'my_collection',\n      field_name: 'dynamic_json',\n      index_name: 'json_nested_index',\n      index_type: 'AUTOINDEX',\n      metric_type: 'NONE',\n      params: {\n        json_cast_type: 'double',\n        json_path: \"dynamic_json['nested']['value']\",\n      },\n    },\n  ];\n","import (\n    \"github.com/milvus-io/milvus/client/v2/index\"\n)\n\njsonIndex1 := index.NewJSONPathIndex(index.AUTOINDEX, \"varchar\", \"overview\")\n    .WithIndexName(\"overview_index\")\njsonIndex2 := index.NewJSONPathIndex(index.AUTOINDEX, \"double\", \"words\")\n    .WithIndexName(\"words_index\")\njsonIndex3 := index.NewJSONPathIndex(index.AUTOINDEX, \"varchar\", `dynamic_json['varchar']`)\n    .WithIndexName(\"json_varchar_index\")\njsonIndex4 := index.NewJSONPathIndex(index.AUTOINDEX, \"double\", `dynamic_json['nested']['value']`)\n    .WithIndexName(\"json_nested_index\")\n\nindexOpt1 := milvusclient.NewCreateIndexOption(\"my_collection\", \"overview\", jsonIndex1)\nindexOpt2 := milvusclient.NewCreateIndexOption(\"my_collection\", \"words\", jsonIndex2)\nindexOpt3 := milvusclient.NewCreateIndexOption(\"my_collection\", \"dynamic_json\", jsonIndex3)\nindexOpt4 := milvusclient.NewCreateIndexOption(\"my_collection\", \"dynamic_json\", jsonIndex4)\n","export TOKEN=\"root:Milvus\"\nexport CLUSTER_ENDPOINT=\"http://localhost:19530\"\n\nexport overviewIndex='{\n  \"fieldName\": \"dynamic_json\",\n  \"indexName\": \"overview_index\",\n  \"params\": {\n    \"index_type\": \"AUTOINDEX\",\n    \"json_cast_type\": \"varchar\",\n    \"json_path\": \"dynamic_json[\\\"overview\\\"]\"\n  }\n}'\n\nexport wordsIndex='{\n  \"fieldName\": \"dynamic_json\",\n  \"indexName\": \"words_index\",\n  \"params\": {\n    \"index_type\": \"AUTOINDEX\",\n    \"json_cast_type\": \"double\",\n    \"json_path\": \"dynamic_json[\\\"words\\\"]\"\n  }\n}'\n\nexport varcharIndex='{\n  \"fieldName\": \"dynamic_json\",\n  \"indexName\": \"json_varchar_index\",\n  \"params\": {\n    \"index_type\": \"AUTOINDEX\",\n    \"json_cast_type\": \"varchar\",\n    \"json_path\": \"dynamic_json[\\\"varchar\\\"]\"\n  }\n}'\n\nexport nestedIndex='{\n  \"fieldName\": \"dynamic_json\",\n  \"indexName\": \"json_nested_index\",\n  \"params\": {\n    \"index_type\": \"AUTOINDEX\",\n    \"json_cast_type\": \"double\",\n          \"json_path\": \"dynamic_json[\\\"nested\\\"][\\\"value\\\"]\"\n    }\n  }'\n","# Convert a string to double before indexing\nindex_params.add_index(\n    field_name=\"dynamic_json\", # JSON key name\n    index_type=\"AUTOINDEX\",\n    index_name=\"json_string_price_index\",\n    params={\n        \"json_path\": \"dynamic_json['string_price']\",\n        \"json_cast_type\": \"double\", # Must be the output type of the cast function\n        # highlight-next-line\n        \"json_cast_function\": \"STRING_TO_DOUBLE\" # Case insensitive; convert string to double\n    }\n)\n","Map<String,Object> extraParams5 = new HashMap<>();\nextraParams5.put(\"json_path\", \"dynamic_json['string_price']\");\nextraParams5.put(\"json_cast_type\", \"double\");\nindexParams.add(IndexParam.builder()\n        .fieldName(\"dynamic_json\")\n        .indexName(\"json_string_price_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .extraParams(extraParams5)\n        .build());\n","indexParams.push({\n    collection_name: 'my_collection',\n    field_name: 'dynamic_json',\n    index_name: 'json_string_price_index',\n    index_type: 'AUTOINDEX',\n    metric_type: 'NONE',\n    params: {\n      json_path: \"dynamic_json['string_price']\",\n      json_cast_type: 'double',\n      json_cast_function: 'STRING_TO_DOUBLE',\n    },\n  });\n","jsonIndex5 := index.NewJSONPathIndex(index.AUTOINDEX, \"double\", `dynamic_json['string_price']`)\n    .WithIndexName(\"json_string_price_index\")\nindexOpt5 := milvusclient.NewCreateIndexOption(\"my_collection\", \"dynamic_json\", jsonIndex5)\n","export TOKEN=\"root:Milvus\"\nexport CLUSTER_ENDPOINT=\"http://localhost:19530\"\n\nexport stringPriceIndex='{\n  \"fieldName\": \"dynamic_json\",\n  \"indexName\": \"json_string_price_index\",\n  \"params\": {\n    \"index_type\": \"AUTOINDEX\",\n    \"json_path\": \"dynamic_json[\\\"string_price\\\"]\",\n    \"json_cast_type\": \"double\",\n    \"json_cast_function\": \"STRING_TO_DOUBLE\"\n  }\n}'\n\n","client.create_index(\n    collection_name=\"my_collection\",\n    index_params=index_params\n)\n","import io.milvus.v2.service.index.request.CreateIndexReq;\n\nclient.createIndex(CreateIndexReq.builder()\n        .collectionName(\"my_collection\")\n        .indexParams(indexParams)\n        .build());\n","  await client.createIndex(indexParams);\n","indexTask1, err := client.CreateIndex(ctx, indexOpt1)\nif err != nil {\n    return err\n}\nindexTask2, err := client.CreateIndex(ctx, indexOpt2)\nif err != nil {\n    return err\n}\nindexTask3, err := client.CreateIndex(ctx, indexOpt3)\nif err != nil {\n    return err\n}\nindexTask4, err := client.CreateIndex(ctx, indexOpt4)\nif err != nil {\n    return err\n}\nindexTask5, err := client.CreateIndex(ctx, indexOpt5)\nif err != nil {\n    return err\n}\n","# restful\nexport indexParams=\"[\n  $varcharIndex,\n  $nestedIndex,\n  $overviewIndex,\n  $wordsIndex,\n  $stringPriceIndex\n]\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/indexes/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n--data \"{\n  \\\"collectionName\\\": \\\"my_collection\\\",\n  \\\"indexParams\\\": $indexParams\n}\"\n\n","filter = 'overview == \"Great product\"'                # Non-JSON key\nfilter = 'words >= 100'                               # Non-JSON key\nfilter = 'dynamic_json[\"nested\"][\"value\"] < 50'       # JSON object key\n","String filter = 'overview == \"Great product\"';\nString filter = 'words >= 100';\nString filter = 'dynamic_json[\"nested\"][\"value\"] < 50';\n","filter = 'overview == \"Great product\"'                // Non-JSON key\nfilter = 'words >= 100'                               // Non-JSON key\nfilter = 'dynamic_json[\"nested\"][\"value\"] < 50'       // JSON object key\n","filter := 'overview == \"Great product\"'\nfilter := 'words >= 100'\nfilter := 'dynamic_json[\"nested\"][\"value\"] < 50'\n","# restful\nexport filterOverview='overview == \"Great product\"'\nexport filterWords='words >= 100'\nexport filterNestedValue='dynamic_json[\"nested\"][\"value\"] < 50'\n","# Example: Include dynamic field keys in search results\nresults = client.search(\n    collection_name=\"my_collection\",\n    data=[[0.1, 0.2, 0.3, 0.4, 0.5]],\n    filter=filter,                         # Filter expression defined earlier\n    limit=10,\n    # highlight-start\n    output_fields=[\n        \"overview\",                        # Simple dynamic field key\n        'dynamic_json[\"varchar\"]'          # Nested JSON key\n    ]\n    # highlight-end\n)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.SearchReq\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.SearchResp\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"YOUR_CLUSTER_ENDPOINT\")\n        .token(\"YOUR_CLUSTER_TOKEN\")\n        .build());\n\nFloatVec queryVector = new FloatVec(new float[]{0.1, 0.2, 0.3, 0.4, 0.5});\nSearchReq searchReq = SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .data(Collections.singletonList(queryVector))\n        .topK(5)\n        .filter(filter)\n        .outputFields(Arrays.asList(\"overview\", \"dynamic_json['varchar']\"))\n        .build();\n\nSearchResp searchResp = client.search(searchReq);\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"YOUR_CLUSTER_ENDPOINT\";\nconst token = \"YOUR_CLUSTER_TOKEN\";\nconst client = new MilvusClient({address, token});\n\nconst query_vector = [0.1, 0.2, 0.3, 0.4, 0.5]\n\nconst res = await client.search({\n    collection_name: \"my_collection\",\n    data: [query_vector],\n    limit: 5,\n    filters: filter,\n    output_fields: [\"overview\", \"dynamic_json['varchar']\"]\n})\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"YOUR_CLUSTER_ENDPOINT\"\ntoken := \"YOUR_CLUSTER_TOKEN\"\n\nclient, err := client.New(ctx, &client.ClientConfig{\n    Address: milvusAddr,\n    APIKey:  token,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nqueryVector := []float32{0.1, 0.2, 0.3, 0.4, 0.5}\n\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    5,               // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithConsistencyLevel(entity.ClStrong).\n    WithANNSField(\"my_vector\").\n    WithFilter(filter).\n    WithOutputFields(\"overview\", \"dynamic_json['varchar']\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","export CLUSTER_ENDPOINT=\"YOUR_CLUSTER_ENDPOINT\"\nexport TOKEN=\"YOUR_CLUSTER_TOKEN\"\nexport FILTER='color like \"red%\" and likes > 50'\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n--data \"{\n  \\\"collectionName\\\": \\\"my_collection\\\",\n  \\\"data\\\": [\n    [0.1, 0.2, 0.3, 0.4, 0.5]\n  ],\n  \\\"annsField\\\": \\\"my_vector\\\",\n  \\\"filter\\\": \\\"${FILTER}\\\",\n  \\\"limit\\\": 5,\n  \\\"outputFields\\\": [\\\"overview\\\", \\\"dynamic_json.varchar\\\"]\n}\"\n"],"headingContent":"Dynamic Field","anchorList":[{"label":"다이내믹 필드","href":"Dynamic-Field","type":1,"isActive":false},{"label":"작동 방식","href":"How-it-works","type":2,"isActive":false},{"label":"지원되는 데이터 유형","href":"Supported-data-types","type":2,"isActive":false},{"label":"동적 필드 사용","href":"Enable-dynamic-field","type":2,"isActive":false},{"label":"컬렉션에 엔티티 삽입","href":"Insert-entities-to-the-collection","type":2,"isActive":false},{"label":"동적 필드의 인덱스 키Compatible with Milvus 2.5.11+","href":"Index-keys-in-the-dynamic-field--Milvus-2511+","type":2,"isActive":false},{"label":"동적 필드 키로 필터링","href":"Filter-by-dynamic-field-keys","type":2,"isActive":false},{"label":"정리하기","href":"Put-it-all-together","type":2,"isActive":false},{"label":"FAQ","href":"FAQ","type":2,"isActive":false}]}