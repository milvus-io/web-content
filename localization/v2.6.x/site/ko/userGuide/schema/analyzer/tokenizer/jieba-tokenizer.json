{"codeList":["# Simple configuration: only specifying the tokenizer name\nanalyzer_params = {\n    \"tokenizer\": \"jieba\",  # Use the default settings: dict=[\"_default_\"], mode=\"search\", hmm=true\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"tokenizer\", \"jieba\");\n","const analyzer_params = {\n    \"tokenizer\": \"jieba\",\n};\n","analyzerParams = map[string]any{\"tokenizer\": \"jieba\"}\n","# restful\nanalyzerParams='{\n  \"tokenizer\": \"jieba\"\n}'\n","# Custom configuration equivalent to the simple configuration above\nanalyzer_params = {\n    \"type\": \"jieba\",          # Tokenizer type, fixed as \"jieba\"\n    \"dict\": [\"_default_\"],     # Use the default dictionary\n    \"mode\": \"search\",          # Use search mode for improved recall (see mode details below)\n    \"hmm\": true                # Enable HMM for probabilistic segmentation\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"type\", \"jieba\");\nanalyzerParams.put(\"dict\", Collections.singletonList(\"_default_\"));\nanalyzerParams.put(\"mode\", \"search\");\nanalyzerParams.put(\"hmm\", true);\n","// javascript\n","analyzerParams = map[string]any{\"type\": \"jieba\", \"dict\": []any{\"_default_\"}, \"mode\": \"search\", \"hmm\": true}\n","# restful\n","# Custom configuration with user-defined settings\nanalyzer_params = {\n    \"tokenizer\": {\n        \"type\": \"jieba\",           # Fixed tokenizer type\n        \"dict\": [\"customDictionary\"],  # Custom dictionary list; replace with your own terms\n        \"mode\": \"exact\",           # Use exact mode (non-overlapping tokens)\n        \"hmm\": false               # Disable HMM; unmatched text will be split into individual characters\n    }\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"type\", \"jieba\");\nanalyzerParams.put(\"dict\", Collections.singletonList(\"customDictionary\"));\nanalyzerParams.put(\"mode\", \"exact\");\nanalyzerParams.put(\"hmm\", false);\n","// javascript\n","analyzerParams = map[string]any{\"type\": \"jieba\", \"dict\": []any{\"customDictionary\"}, \"mode\": \"exact\", \"hmm\": false}\n","# restful\n","analyzer_params = {\n    \"tokenizer\": {\n        \"type\": \"jieba\",\n        \"dict\": [\"结巴分词器\"],\n        \"mode\": \"exact\",\n        \"hmm\": False\n    }\n}\n","Map<String, Object> analyzerParams = new HashMap<>();\nanalyzerParams.put(\"type\", \"jieba\");\nanalyzerParams.put(\"dict\", Collections.singletonList(\"结巴分词器\"));\nanalyzerParams.put(\"mode\", \"exact\");\nanalyzerParams.put(\"hmm\", false);\n","// javascript\n","analyzerParams = map[string]any{\"type\": \"jieba\", \"dict\": []any{\"结巴分词器\"}, \"mode\": \"exact\", \"hmm\": false}\n","# restful\n","from pymilvus import (\n    MilvusClient,\n)\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\n# Sample text to analyze\nsample_text = \"milvus结巴分词器中文测试\"\n\n# Run the standard analyzer with the defined configuration\nresult = client.run_analyzer(sample_text, analyzer_params)\nprint(\"Standard analyzer output:\", result)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.RunAnalyzerReq;\nimport io.milvus.v2.service.vector.response.RunAnalyzerResp;\n\nConnectConfig config = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build();\nMilvusClientV2 client = new MilvusClientV2(config);\n\nList<String> texts = new ArrayList<>();\ntexts.add(\"milvus结巴分词器中文测试\");\n\nRunAnalyzerResp resp = client.runAnalyzer(RunAnalyzerReq.builder()\n        .texts(texts)\n        .analyzerParams(analyzerParams)\n        .build());\nList<RunAnalyzerResp.AnalyzerResult> results = resp.getResults();\n","// javascript\n","// go\n","# restful\n","['milvus', '结巴分词器', '中', '文', '测', '试']\n"],"headingContent":"Jieba","anchorList":[{"label":"Jieba","href":"Jieba","type":1,"isActive":false},{"label":"구성","href":"Configuration","type":2,"isActive":false},{"label":"예제","href":"Examples","type":2,"isActive":false}]}