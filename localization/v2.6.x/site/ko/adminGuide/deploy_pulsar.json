{"codeList":["pulsar:\n  address: localhost # Address of pulsar\n  port: 6650 # Port of pulsar\n  maxMessageSize: 5242880 # 5 * 1024 * 1024 Bytes, Maximum size of each message in pulsar.\n","docker compose up\n","extraConfigFiles:\n  user.yaml: |+\n    pulsar:\n      address: localhost # Address of pulsar\n      port: 6650 # Port of Pulsar\n      webport: 80 # Web port of pulsar, if you connect direcly without proxy, should use 8080\n      maxMessageSize: 5242880 # 5 * 1024 * 1024 Bytes, Maximum size of each message in pulsar.\n      tenant: public\n      namespace: default    \n","helm install <your_release_name> milvus/milvus -f values.yaml\n","extraConfigFiles:\n  user.yaml: |+\n    woodpecker:\n      meta:\n        type: etcd # The Type of the metadata provider. currently only support etcd.\n        prefix: woodpecker # The Prefix of the metadata provider. default is woodpecker.\n      client:\n        segmentAppend:\n          queueSize: 10000 # The size of the queue for pending messages to be sent of each log.\n          maxRetries: 3 # Maximum number of retries for segment append operations.\n        segmentRollingPolicy:\n          maxSize: 256M # Maximum size of a segment.\n          maxInterval: 10m # Maximum interval between two segments, default is 10 minutes.\n          maxBlocks: 1000 # Maximum number of blocks in a segment\n        auditor:\n          maxInterval: 10s # Maximum interval between two auditing operations, default is 10 seconds.\n      logstore:\n        segmentSyncPolicy:\n          maxInterval: 200ms # Maximum interval between two sync operations, default is 200 milliseconds.\n          maxIntervalForLocalStorage: 10ms # Maximum interval between two sync operations local storage backend, default is 10 milliseconds.\n          maxBytes: 256M # Maximum size of write buffer in bytes.\n          maxEntries: 10000 # Maximum entries number of write buffer.\n          maxFlushRetries: 5 # Maximum size of write buffer in bytes.\n          retryInterval: 1000ms # Maximum interval between two retries. default is 1000 milliseconds.\n          maxFlushSize: 2M # Maximum size of a fragment in bytes to flush.\n          maxFlushThreads: 32 # Maximum number of threads to flush data\n        segmentCompactionPolicy:\n          maxSize: 2M # The maximum size of the merged files.\n          maxParallelUploads: 4 # The maximum number of parallel upload threads for compaction.\n          maxParallelReads: 8 # The maximum number of parallel read threads for compaction.\n        segmentReadPolicy:\n          maxBatchSize: 16M # Maximum size of a batch in bytes.\n          maxFetchThreads: 32 # Maximum number of threads to fetch data.\n      storage:\n        type: minio # The Type of the storage provider. Valid values: [minio, local]\n        rootPath: /var/lib/milvus/woodpecker # The root path of the storage provider.    \n","helm install <your_release_name> milvus/milvus -f values.yaml\n","extraConfigFiles:\n  user.yaml: |+\n    kafka:\n      brokerList:\n        -  <your_kafka_address>:<your_kafka_port>\n      saslUsername:\n      saslPassword:\n      saslMechanisms: PLAIN\n      securityProtocol: SASL_SSL    \n","helm install <your_release_name> milvus/milvus -f values.yaml\n","extraConfigFiles:\n  user.yaml: |+\n    rocksmq:\n      # The path where the message is stored in rocksmq\n      # please adjust in embedded Milvus: /tmp/milvus/rdb_data\n      path: /var/lib/milvus/rdb_data\n      lrucacheratio: 0.06 # rocksdb cache memory ratio\n      rocksmqPageSize: 67108864 # 64 MB, 64 * 1024 * 1024 bytes, The size of each page of messages in rocksmq\n      retentionTimeInMinutes: 4320 # 3 days, 3 * 24 * 60 minutes, The retention time of the message in rocksmq.\n      retentionSizeInMB: 8192 # 8 GB, 8 * 1024 MB, The retention size of the message in rocksmq.\n      compactionInterval: 86400 # 1 day, trigger rocksdb compaction every day to remove deleted data\n      # compaction compression type, only support use 0,7.\n      # 0 means not compress, 7 will use zstd\n      # len of types means num of rocksdb level.\n      compressionTypes: [0, 0, 7, 7, 7]    \n","extraConfigFiles:\n  user.yaml: |+\n    mq:\n      type: natsmq\n    natsmq:\n      # server side configuration for natsmq.\n      server: \n        # 4222 by default, Port for nats server listening.\n        port: 4222 \n        # /var/lib/milvus/nats by default, directory to use for JetStream storage of nats.\n        storeDir: /var/lib/milvus/nats \n        # (B) 16GB by default, Maximum size of the 'file' storage.\n        maxFileStore: 17179869184 \n        # (B) 8MB by default, Maximum number of bytes in a message payload.\n        maxPayload: 8388608 \n        # (B) 64MB by default, Maximum number of bytes buffered for a connection applies to client connections.\n        maxPending: 67108864 \n        # (√ms) 4s by default, waiting for initialization of natsmq finished.\n        initializeTimeout: 4000 \n        monitor:\n          # false by default, If true enable debug log messages.\n          debug: false \n          # true by default, If set to false, log without timestamps.\n          logTime: true \n          # no log file by default, Log file path relative to.. .\n          logFile: \n          # (B) 0, unlimited by default, Size in bytes after the log file rolls over to a new one.\n          logSizeLimit: 0 \n        retention:\n          # (min) 3 days by default, Maximum age of any message in the P-channel.\n          maxAge: 4320 \n          # (B) None by default, How many bytes the single P-channel may contain. Removing oldest messages if the P-channel exceeds this size.\n          maxBytes:\n          # None by default, How many message the single P-channel may contain. Removing oldest messages if the P-channel exceeds this limit.    \n          maxMsgs: \n"],"headingContent":"Configure Message Storage with Docker Compose or Helm","anchorList":[{"label":"Docker Compose 또는 Helm으로 메시지 저장소 구성하기","href":"Configure-Message-Storage-with-Docker-Compose-or-Helm","type":1,"isActive":false},{"label":"Docker Compose로 Pulsar 구성하기","href":"Configure-Pulsar-with-Docker-Compose","type":2,"isActive":false},{"label":"1. Pulsar 구성하기","href":"1-Configure-Pulsar","type":3,"isActive":false},{"label":"2. Milvus 실행","href":"2-Run-Milvus","type":3,"isActive":false},{"label":"헬름으로 Pulsar 구성하기","href":"Configure-Pulsar-with-Helm","type":2,"isActive":false},{"label":"YAML 파일 사용하기","href":"Using-the-YAML-file","type":3,"isActive":false},{"label":"헬름으로 딱따구리 구성하기","href":"Configure-Woodpecker-with-Helm","type":2,"isActive":false},{"label":"YAML 파일 사용하기","href":"Using-the-YAML-file","type":3,"isActive":false},{"label":"헬름으로 카프카 구성하기","href":"Configure-Kafka-with-Helm","type":2,"isActive":false},{"label":"YAML 파일 사용하기","href":"Using-the-YAML-file","type":3,"isActive":false},{"label":"헬름으로 RocksMQ 구성하기","href":"Configure-RocksMQ-with-Helm","type":2,"isActive":false},{"label":"헬름으로 NATS 구성하기","href":"Configure-NATS-with-Helm","type":2,"isActive":false},{"label":"다음 단계","href":"Whats-next","type":2,"isActive":false}]}