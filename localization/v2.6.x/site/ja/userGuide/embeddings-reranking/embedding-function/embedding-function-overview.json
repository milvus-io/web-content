{"codeList":["# milvus.yaml credential store section\n# This section defines all your authentication credentials for external embedding providers\n# Each credential gets a unique name (e.g., aksk1, apikey1) that you'll reference elsewhere\ncredential:\n  # For AWS Bedrock or services using access/secret key pairs\n  # 'aksk1' is just an example name - you can choose any meaningful identifier\n  aksk1:                       \n    access_key_id: <YOUR_AK>      \n    secret_access_key: <YOUR_SK>  \n  \n  # For OpenAI, Voyage AI, or other API key-based services\n  # 'apikey1' is a custom name you choose to identify this credential  \n  apikey1:                     \n    apikey: <YOUR_API_KEY>        \n  \n  # For Google Vertex AI using service account credentials\n  # 'gcp1' is an example name for your Google Cloud credentials\n  gcp1:                        \n    credential_json: <BASE64_OF_JSON>\n","function:\n  textEmbedding:\n    providers:\n      openai:                         # calls OpenAI\n        credential: apikey1           # Reference to the credential label\n        # url:                        # (optional) custom url\n\n      bedrock:                        # calls AWS Bedrock\n        credential: aksk1             # Reference to the credential label\n        region: us-east-2\n\n      vertexai:                       # calls Google Vertex AI\n        credential: gcp1              # Reference to the credential label\n        # url:                        # (optional) custom url\n\n      tei:                            # Built-in Tiny Embedding model\n        enable: true                  # Whether to enable TEI model service\n","from pymilvus import MilvusClient, DataType, Function, FunctionType\n\n# Initialize Milvus client\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n)\n\n# Create a new schema for the collection\nschema = client.create_schema()\n\n# Add primary field \"id\"\nschema.add_field(\"id\", DataType.INT64, is_primary=True, auto_id=False)\n\n# Add scalar field \"document\" for storing textual data\nschema.add_field(\"document\", DataType.VARCHAR, max_length=9000)\n\n# Add vector field \"dense\" for storing embeddings.\n# IMPORTANT: Set `dim` to match the exact output dimension of the embedding model.\n# For instance, OpenAI's text-embedding-3-small model outputs 1536-dimensional vectors.\n# For dense vector, data type can be FLOAT_VECTOR or INT8_VECTOR\nschema.add_field(\"dense\", DataType.FLOAT_VECTOR, dim=1536)\n","# Define embedding function (example: OpenAI provider)\ntext_embedding_function = Function(\n    name=\"openai_embedding\",                  # Unique identifier for this embedding function\n    function_type=FunctionType.TEXTEMBEDDING, # Type of embedding function\n    input_field_names=[\"document\"],           # Scalar field to embed\n    output_field_names=[\"dense\"],             # Vector field to store embeddings\n    params={                                  # Provider-specific configuration (highest priority)\n        \"provider\": \"openai\",                 # Embedding model provider\n        \"model_name\": \"text-embedding-3-small\",     # Embedding model\n        # \"credential\": \"apikey1\",            # Optional: Credential label\n        # Optional parameters:\n        # \"dim\": \"1536\",       # Optionally shorten the vector dimension\n        # \"user\": \"user123\"    # Optional: identifier for API tracking\n    }\n)\n\n# Add the embedding function to your schema\nschema.add_function(text_embedding_function)\n","# Prepare index parameters\nindex_params = client.prepare_index_params()\n\n# Add AUTOINDEX to automatically select optimal indexing method\nindex_params.add_index(\n    field_name=\"dense\",\n    index_type=\"AUTOINDEX\",\n    metric_type=\"COSINE\" \n)\n","# Create collection named \"demo\"\nclient.create_collection(\n    collection_name='demo', \n    schema=schema, \n    index_params=index_params\n)\n","# Insert sample documents\nclient.insert('demo', [\n    {'id': 1, 'document': 'Milvus simplifies semantic search through embeddings.'},\n    {'id': 2, 'document': 'Vector embeddings convert text into searchable numeric data.'},\n    {'id': 3, 'document': 'Semantic search helps users find relevant information quickly.'},\n])\n","# Perform semantic search\nresults = client.search(\n    collection_name='demo', \n    data=['How does Milvus handle semantic search?'], # Use text query rather than query vector\n    anns_field='dense',   # Use the vector field that stores embeddings\n    limit=1,\n    output_fields=['document'],\n)\n\nprint(results)\n\n# Example output:\n# data: [\"[{'id': 1, 'distance': 0.8821347951889038, 'entity': {'document': 'Milvus simplifies semantic search through embeddings.'}}]\"]\n","# Using raw text (Function module converts automatically)\nresults = client.search(\n    collection_name='demo', \n    data=['How does Milvus handle semantic search?'],\n    anns_field='dense',\n    limit=1\n)\n\n# Using pre-computed query vector (must match stored vector dimensions)\nquery_vector = [0.1, 0.2, 0.3, ...]  # Must be same dimension as stored embeddings\nresults = client.search(\n    collection_name='demo', \n    data=[query_vector],\n    anns_field='dense',\n    limit=1\n)\n"],"headingContent":"Embedding Function Overview","anchorList":[{"label":"埋め込み関数の概要Compatible with Milvus 2.6.x","href":"Embedding-Function-Overview","type":1,"isActive":false},{"label":"制限","href":"Limits","type":2,"isActive":false},{"label":"サポートされる埋め込みサービスプロバイダ","href":"Supported-embedding-service-providers","type":2,"isActive":false},{"label":"機能概要","href":"How-it-works","type":2,"isActive":false},{"label":"認証情報の設定","href":"Configure-credentials","type":2,"isActive":false},{"label":"ステップ 1: Milvus 設定ファイルへのクレデンシャルの追加","href":"Step-1-Add-credentials-to-Milvus-configuration-file","type":3,"isActive":false},{"label":"ステップ 2: プロバイダ設定の構成","href":"Step-2-Configure-provider-settings","type":3,"isActive":false},{"label":"埋め込み機能の使用","href":"Use-embedding-function","type":2,"isActive":false},{"label":"ステップ 1: スキーマフィールドの定義","href":"Step-1-Define-schema-fields","type":3,"isActive":false},{"label":"ステップ 2: スキーマへの埋め込み関数の追加","href":"Step-2-Add-embedding-function-to-schema","type":3,"isActive":false},{"label":"ステップ 3: インデックスの構成","href":"Step-3-Configure-index","type":3,"isActive":false},{"label":"ステップ 4: コレクションの作成","href":"Step-4-Create-collection","type":3,"isActive":false},{"label":"ステップ 5: データの挿入","href":"Step-5-Insert-data","type":3,"isActive":false},{"label":"ステップ6：ベクトル探索の実行","href":"Step-6-Perform-vector-search","type":3,"isActive":false},{"label":"よくある質問","href":"FAQ","type":2,"isActive":false},{"label":"milvus.yamlと環境変数の違いは何ですか？","href":"Whats-the-difference-between-configuring-credentials-in-milvusyaml-vs-environment-variables","type":3,"isActive":false},{"label":"関数定義でクレデンシャルパラメータを指定しなかった場合はどうなりますか？","href":"What-happens-if-I-dont-specify-a-credential-parameter-in-the-function-definition","type":3,"isActive":false},{"label":"エンベッディングが正しく生成されているかどうかの確認方法は？","href":"How-can-I-verify-that-embeddings-are-being-generated-correctly","type":3,"isActive":false},{"label":"類似性検索を実行するとき、生のテキストではなくクエリーベクトルを使用できますか？","href":"When-I-perform-a-similarity-search-can-I-use-a-query-vector-rather-than-raw-text","type":3,"isActive":false}]}