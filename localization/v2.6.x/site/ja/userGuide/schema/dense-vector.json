{"codeList":["[\n    -0.013052909,\n    0.020387933,\n    -0.007869,\n    -0.11111383,\n    -0.030188112,\n    -0.0053388323,\n    0.0010654867,\n    0.072027855,\n    // ... more dimensions\n]\n\n","from pymilvus import MilvusClient, DataType\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\nschema = client.create_schema(\n    auto_id=True,\n    enable_dynamic_fields=True,\n)\n\nschema.add_field(field_name=\"pk\", datatype=DataType.VARCHAR, is_primary=True, max_length=100)\nschema.add_field(field_name=\"dense_vector\", datatype=DataType.FLOAT_VECTOR, dim=4)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\n\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build());\n\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\nschema.setEnableDynamicField(true);\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"pk\")\n        .dataType(DataType.VarChar)\n        .isPrimaryKey(true)\n        .autoID(true)\n        .maxLength(100)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"dense_vector\")\n        .dataType(DataType.FloatVector)\n        .dimension(4)\n        .build());\n","import { DataType } from \"@zilliz/milvus2-sdk-node\";\n\nschema.push({\n  name: \"dense_vector\",\n  data_type: DataType.FloatVector,\n  dim: 4,\n});\n\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nschema := entity.NewSchema()\nschema.WithField(entity.NewField().\n    WithName(\"pk\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithIsPrimaryKey(true).\n    WithIsAutoID(true).\n    WithMaxLength(100),\n).WithField(entity.NewField().\n    WithName(\"dense_vector\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(4),\n)\n","export primaryField='{\n    \"fieldName\": \"pk\",\n    \"dataType\": \"VarChar\",\n    \"isPrimary\": true,\n    \"elementTypeParams\": {\n        \"max_length\": 100\n    }\n}'\n\nexport vectorField='{\n    \"fieldName\": \"dense_vector\",\n    \"dataType\": \"FloatVector\",\n    \"elementTypeParams\": {\n        \"dim\": 4\n    }\n}'\n\nexport schema=\"{\n    \\\"autoID\\\": true,\n    \\\"fields\\\": [\n        $primaryField,\n        $vectorField\n    ]\n}\"\n","index_params = client.prepare_index_params()\n\nindex_params.add_index(\n    field_name=\"dense_vector\",\n    index_name=\"dense_vector_index\",\n    index_type=\"AUTOINDEX\",\n    metric_type=\"IP\"\n)\n","import io.milvus.v2.common.IndexParam;\nimport java.util.*;\n\nList<IndexParam> indexes = new ArrayList<>();\n\nindexes.add(IndexParam.builder()\n        .fieldName(\"dense_vector\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.IP)\n        .build());\n","import { MetricType, IndexType } from \"@zilliz/milvus2-sdk-node\";\n\nconst indexParams = {\n    index_name: 'dense_vector_index',\n    field_name: 'dense_vector',\n    metric_type: MetricType.IP,\n    index_type: IndexType.AUTOINDEX\n};\n","idx := index.NewAutoIndex(index.MetricType(entity.IP))\nindexOption := milvusclient.NewCreateIndexOption(\"my_collection\", \"dense_vector\", idx)\n","export indexParams='[\n        {\n            \"fieldName\": \"dense_vector\",\n            \"metricType\": \"IP\",\n            \"indexName\": \"dense_vector_index\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n","client.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema,\n    index_params=index_params\n)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build());\n\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexes)\n        .build();\nclient.createCollection(requestCreate);\n","import { MilvusClient } from \"@zilliz/milvus2-sdk-node\";\n\nconst client = new MilvusClient({\n    address: 'http://localhost:19530'\n});\n\nawait client.createCollection({\n    collection_name: 'my_collection',\n    schema: schema,\n    index_params: indexParams\n});\n\n","err = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithIndexOptions(indexOption))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n","data = [\n    {\"dense_vector\": [0.1, 0.2, 0.3, 0.7]},\n    {\"dense_vector\": [0.2, 0.3, 0.4, 0.8]},\n]\n\nclient.insert(\n    collection_name=\"my_collection\",\n    data=data\n)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.InsertResp;\n\nList<JsonObject> rows = new ArrayList<>();\nGson gson = new Gson();\nrows.add(gson.fromJson(\"{\\\"dense_vector\\\": [0.1, 0.2, 0.3, 0.4]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"dense_vector\\\": [0.2, 0.3, 0.4, 0.5]}\", JsonObject.class));\n\nInsertResp insertR = client.insert(InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(rows)\n        .build());\n","const data = [\n  { dense_vector: [0.1, 0.2, 0.3, 0.7] },\n  { dense_vector: [0.2, 0.3, 0.4, 0.8] },\n];\n\nclient.insert({\n  collection_name: \"my_collection\",\n  data: data,\n});\n","_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithFloatVectorColumn(\"dense_vector\", 4, [][]float32{\n        {0.1, 0.2, 0.3, 0.7},\n        {0.2, 0.3, 0.4, 0.8},\n    }),\n)\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"dense_vector\": [0.1, 0.2, 0.3, 0.4]},\n        {\"dense_vector\": [0.2, 0.3, 0.4, 0.5]}        \n    ],\n    \"collectionName\": \"my_collection\"\n}'\n\n## {\"code\":0,\"cost\":0,\"data\":{\"insertCount\":2,\"insertIds\":[\"453577185629572531\",\"453577185629572532\"]}}\n","search_params = {\n    \"params\": {\"nprobe\": 10}\n}\n\nquery_vector = [0.1, 0.2, 0.3, 0.7]\n\nres = client.search(\n    collection_name=\"my_collection\",\n    data=[query_vector],\n    anns_field=\"dense_vector\",\n    search_params=search_params,\n    limit=5,\n    output_fields=[\"pk\"]\n)\n\nprint(res)\n\n# Output\n# data: [\"[{'id': '453718927992172271', 'distance': 0.7599999904632568, 'entity': {'pk': '453718927992172271'}}, {'id': '453718927992172270', 'distance': 0.6299999952316284, 'entity': {'pk': '453718927992172270'}}]\"]\n","import io.milvus.v2.service.vector.request.data.FloatVec;\n\nMap<String,Object> searchParams = new HashMap<>();\nsearchParams.put(\"nprobe\",10);\n\nFloatVec queryVector = new FloatVec(new float[]{0.1f, 0.3f, 0.3f, 0.4f});\n\nSearchResp searchR = client.search(SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .data(Collections.singletonList(queryVector))\n        .annsField(\"dense_vector\")\n        .searchParams(searchParams)\n        .topK(5)\n        .outputFields(Collections.singletonList(\"pk\"))\n        .build());\n        \nSystem.out.println(searchR.getSearchResults());\n\n// Output\n//\n// [[SearchResp.SearchResult(entity={pk=453444327741536779}, score=0.65, id=453444327741536779), SearchResp.SearchResult(entity={pk=453444327741536778}, score=0.65, id=453444327741536778)]]\n","query_vector = [0.1, 0.2, 0.3, 0.7];\n\nclient.search({\n    collection_name: 'my_collection',\n    data: query_vector,\n    limit: 5,\n    output_fields: ['pk'],\n    params: {\n        nprobe: 10\n    }\n});\n","queryVector := []float32{0.1, 0.2, 0.3, 0.7}\n\nannParam := index.NewCustomAnnParam()\nannParam.WithExtraParam(\"nprobe\", 10)\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    5,                     // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithANNSField(\"dense_vector\").\n    WithOutputFields(\"pk\").\n    WithAnnParam(annParam))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"Pks: \", resultSet.GetColumn(\"pk\").FieldData().GetScalars())\n}\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.1, 0.2, 0.3, 0.7]\n    ],\n    \"annsField\": \"dense_vector\",\n    \"limit\": 5,\n    \"searchParams\":{\n        \"params\":{\"nprobe\":10}\n    },\n    \"outputFields\": [\"pk\"]\n}'\n\n## {\"code\":0,\"cost\":0,\"data\":[{\"distance\":0.55,\"id\":\"453577185629572532\",\"pk\":\"453577185629572532\"},{\"distance\":0.42,\"id\":\"453577185629572531\",\"pk\":\"453577185629572531\"}]}\n"],"headingContent":"Dense Vector","anchorList":[{"label":"密ベクトル","href":"Dense-Vector","type":1,"isActive":false},{"label":"概要","href":"Overview","type":2,"isActive":false},{"label":"密なベクトルを使う","href":"Use-dense-vectors","type":2,"isActive":false}]}