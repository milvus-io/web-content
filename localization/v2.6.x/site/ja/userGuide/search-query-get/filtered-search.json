{"codeList":["[\n    {\"id\": 0, \"vector\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], \"color\": \"pink_8682\", \"likes\": 165},\n    {\"id\": 1, \"vector\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104], \"color\": \"red_7025\", \"likes\": 25},\n    {\"id\": 2, \"vector\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592], \"color\": \"orange_6781\", \"likes\": 764},\n    {\"id\": 3, \"vector\": [0.3172005263489739, 0.9719044792798428, -0.36981146090600725, -0.4860894583077995, 0.95791889146345], \"color\": \"pink_9298\", \"likes\": 234},\n    {\"id\": 4, \"vector\": [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106], \"color\": \"red_4794\", \"likes\": 122},\n    {\"id\": 5, \"vector\": [0.985825131989184, -0.8144651566660419, 0.6299267002202009, 0.1206906911183383, -0.1446277761879955], \"color\": \"yellow_4222\", \"likes\": 12},\n    {\"id\": 6, \"vector\": [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987], \"color\": \"red_9392\", \"likes\": 58},\n    {\"id\": 7, \"vector\": [-0.33445148015177995, -0.2567135004164067, 0.8987539745369246, 0.9402995886420709, 0.5378064918413052], \"color\": \"grey_8510\", \"likes\": 775},\n    {\"id\": 8, \"vector\": [0.39524717779832685, 0.4000257286739164, -0.5890507376891594, -0.8650502298996872, -0.6140360785406336], \"color\": \"white_9381\", \"likes\": 876},\n    {\"id\": 9, \"vector\": [0.5718280481994695, 0.24070317428066512, -0.3737913482606834, -0.06726932177492717, -0.6980531615588608], \"color\": \"purple_4976\", \"likes\": 765}\n]\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = client.search(\n    collection_name=\"my_collection\",\n    data=[query_vector],\n    limit=5,\n    # highlight-start\n    filter='color like \"red%\" and likes > 50',\n    output_fields=[\"color\", \"likes\"]\n    # highlight-end\n)\n\nfor hits in res:\n    print(\"TopK results:\")\n    for hit in hits:\n        print(hit)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.SearchReq\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.SearchResp\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n\nFloatVec queryVector = new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f});\nSearchReq searchReq = SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .data(Collections.singletonList(queryVector))\n        .topK(5)\n        .filter(\"color like \\\"red%\\\" and likes > 50\")\n        .outputFields(Arrays.asList(\"color\", \"likes\"))\n        .build();\n\nSearchResp searchResp = client.search(searchReq);\n\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n}\n\n// Output\n// TopK results:\n// SearchResp.SearchResult(entity={color=red_4794, likes=122}, score=0.5975797, id=4)\n// SearchResp.SearchResult(entity={color=red_9392, likes=58}, score=-0.24996188, id=6)\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\ntoken := \"root:Milvus\"\n\nclient, err := client.New(ctx, &client.ClientConfig{\n    Address: milvusAddr,\n    APIKey:  token,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nqueryVector := []float32{0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592}\n\n    resultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n        \"my_collection\", // collectionName\n        5,               // limit\n        []entity.Vector{entity.FloatVector(queryVector)},\n    ).WithConsistencyLevel(entity.ClStrong).\n        WithANNSField(\"vector\").\n        WithFilter(\"color like 'red%' and likes > 50\").\n        WithOutputFields(\"color\", \"likes\"))\n    if err != nil {\n        fmt.Println(err.Error())\n        // handle error\n    }\n\n    for _, resultSet := range resultSets {\n        fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n        fmt.Println(\"Scores: \", resultSet.Scores)\n        fmt.Println(\"color: \", resultSet.GetColumn(\"color\").FieldData().GetScalars())\n        fmt.Println(\"likes: \", resultSet.GetColumn(\"likes\").FieldData().GetScalars())\n    }\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nconst query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nconst res = await client.search({\n    collection_name: \"my_collection\",\n    data: [query_vector],\n    limit: 5,\n    // highlight-start\n    filters: 'color like \"red%\" and likes > 50',\n    output_fields: [\"color\", \"likes\"]\n    // highlight-end\n})\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n    ],\n    \"annsField\": \"vector\",\n    \"filter\": \"color like \\\"red%\\\" and likes > 50\",\n    \"limit\": 5,\n    \"outputFields\": [\"color\", \"likes\"]\n}'\n# {\"code\":0,\"cost\":0,\"data\":[]}\n","[\n    {\n        \"id\": 4, \n        \"distance\": 0.3345786594834839,\n        \"entity\": {\n            \"vector\": [0.4452349528804562, -0.8757026943054742, 0.8220779437047674, 0.46406290649483184, 0.30337481143159106], \n            \"color\": \"red_4794\", \n            \"likes\": 122\n        }\n    },\n    {\n        \"id\": 6, \n        \"distance\": 0.6638239834383389，\n        \"entity\": {\n            \"vector\": [0.8371977790571115, -0.015764369584852833, -0.31062937026679327, -0.562666951622192, -0.8984947637863987], \n            \"color\": \"red_9392\", \n            \"likes\": 58\n        }\n    },\n]\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nres = client.search(\n    collection_name=\"my_collection\",\n    data=[query_vector],\n    limit=5,\n    # highlight-start\n    filter='color like \"red%\" and likes > 50',\n    output_fields=[\"color\", \"likes\"],\n    search_params={\n        \"hints\": \"iterative_filter\"\n    }\n    # highlight-end\n)\n\nfor hits in res:\n    print(\"TopK results:\")\n    for hit in hits:\n        print(hit)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.vector.request.SearchReq;\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n\nFloatVec queryVector = new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f});\nSearchReq searchReq = SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .data(Collections.singletonList(queryVector))\n        .topK(5)\n        .filter(\"color like \\\"red%\\\" and likes > 50\")\n        .outputFields(Arrays.asList(\"color\", \"likes\"))\n        .searchParams(new HashMap<>(\"hints\", \"iterative_filter\"))\n        .build();\n\nSearchResp searchResp = client.search(searchReq);\n\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n}\n\n// Output\n// TopK results:\n// SearchResp.SearchResult(entity={color=red_4794, likes=122}, score=0.5975797, id=4)\n// SearchResp.SearchResult(entity={color=red_9392, likes=58}, score=-0.24996188, id=6)\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\ntoken := \"root:Milvus\"\n\nclient, err := client.New(ctx, &client.ClientConfig{\n    Address: milvusAddr,\n    APIKey:  token,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nqueryVector := []float32{0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592}\n\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    5,               // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithConsistencyLevel(entity.ClStrong).\n    WithANNSField(\"vector\").\n    WithFilter(\"color like 'red%' and likes > 50\").\n    WithOutputFields(\"color\", \"likes\").\n    WithSearchParam(\"hints\", \"iterative_filter\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"color: \", resultSet.GetColumn(\"color\").FieldData().GetScalars())\n    fmt.Println(\"likes: \", resultSet.GetColumn(\"likes\").FieldData().GetScalars())\n}\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nconst query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nconst res = await client.search({\n    collection_name: \"filtered_search_collection\",\n    data: [query_vector],\n    limit: 5,\n    // highlight-start\n    filters: 'color like \"red%\" and likes > 50',\n    hints: \"iterative_filter\",\n    output_fields: [\"color\", \"likes\"]\n    // highlight-end\n})\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"data\": [\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n    ],\n    \"annsField\": \"vector\",\n    \"filter\": \"color like \\\"red%\\\" and likes > 50\",\n    \"searchParams\": {\"hints\": \"iterative_filter\"},\n    \"limit\": 5,\n    \"outputFields\": [\"color\", \"likes\"]\n}'\n# {\"code\":0,\"cost\":0,\"data\":[]}\n"],"headingContent":"Filtered Search","anchorList":[{"label":"フィルタリング検索","href":"Filtered-Search","type":1,"isActive":false},{"label":"概要","href":"Overview","type":2,"isActive":false},{"label":"例","href":"Examples","type":2,"isActive":false}]}