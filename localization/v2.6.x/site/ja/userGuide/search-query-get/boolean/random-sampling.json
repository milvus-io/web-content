{"codeList":["filter = \"RANDOM_SAMPLE(sampling_factor)\"\n","String filter = \"RANDOM_SAMPLE(sampling_factor)\"\n","filter := \"RANDOM_SAMPLE(sampling_factor)\"\n","// node\n","# restful\n","# Correct: Filter first, then sample\nfilter = 'color == \"red\" AND RANDOM_SAMPLE(0.001)'\n# Processing: Find all red items → Sample 0.1% of those red items\n\n# Incorrect: OR doesn't make logical sense\nfilter = 'color == \"red\" OR RANDOM_SAMPLE(0.001)'  # ❌ Invalid logic\n# This would mean: \"Either red items OR sample everything\" - which is meaningless\n","// Correct: Filter first, then sample\nString filter = 'color == \"red\" AND RANDOM_SAMPLE(0.001)';\n// Processing: Find all red items → Sample 0.1% of those red items\n\n// Incorrect: OR doesn't make logical sense\nString filter = 'color == \"red\" OR RANDOM_SAMPLE(0.001)';  // ❌ Invalid logic\n// This would mean: \"Either red items OR sample everything\" - which is meaningless\n","// Correct: Filter first, then sample\nfilter := 'color == \"red\" AND RANDOM_SAMPLE(0.001)'\n// Processing: Find all red items → Sample 0.1% of those red items\n\nfilter := 'color == \"red\" OR RANDOM_SAMPLE(0.001)' // ❌ Invalid logic\n// This would mean: \"Either red items OR sample everything\" - which is meaningless\n","// node\n","# restful\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(uri=\"http://localhost:19530\")\n\n# Sample approximately 1% of the entire collection\nresult = client.query(\n    collection_name=\"product_catalog\",\n    # highlight-next-line\n    filter=\"RANDOM_SAMPLE(0.01)\",\n    output_fields=[\"id\", \"product_name\"],\n    limit=10\n)\n\nprint(f\"Sampled {len(result)} products from collection\")\n","import io.milvus.v2.client.*;\nimport io.milvus.v2.service.vector.request.QueryReq\nimport io.milvus.v2.service.vector.request.QueryResp\n\nConnectConfig config = ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build();\nMilvusClientV2 client = new MilvusClientV2(config);\n\nQueryReq queryReq = QueryReq.builder()\n        .collectionName(\"product_catalog\")\n        .filter(\"RANDOM_SAMPLE(0.01)\")\n        .outputFields(Arrays.asList(\"id\", \"product_name\"))\n        .limit(10)\n        .build();\n\nQueryResp queryResp = client.query(queryReq);\n\nList<QueryResp.QueryResult> results = queryResp.getQueryResults();\nfor (QueryResp.QueryResult result : results) {\n    System.out.println(result.getEntity());\n}\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nresultSet, err := client.Query(ctx, milvusclient.NewQueryOption(\"product_catalog\").\n    WithFilter(\"RANDOM_SAMPLE(0.01)\").\n    WithOutputFields(\"id\", \"product_name\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(\"id: \", resultSet.GetColumn(\"id\").FieldData().GetScalars())\nfmt.Println(\"product_name: \", resultSet.GetColumn(\"product_name\").FieldData().GetScalars())\n","// node\n","# restful\n","# First filter by category and price, then sample 0.5% of results\nfilter_expression = 'category == \"electronics\" AND price > 100 AND RANDOM_SAMPLE(0.005)'\n\nresult = client.query(\n    collection_name=\"product_catalog\",\n    # highlight-next-line\n    filter=filter_expression,\n    output_fields=[\"product_name\", \"price\", \"rating\"],\n    limit=10\n)\n\nprint(f\"Found {len(result)} electronics products in sample\")\n","String filter = \"category == \\\"electronics\\\" AND price > 100 AND RANDOM_SAMPLE(0.005)\";\n\nQueryReq queryReq = QueryReq.builder()\n        .collectionName(\"product_catalog\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"product_name\", \"price\", \"rating\"))\n        .limit(10)\n        .build();\n\nQueryResp queryResp = client.query(queryReq);\n","filter := \"category == \\\"electronics\\\" AND price > 100 AND RANDOM_SAMPLE(0.005)\"\n\nresultSet, err := client.Query(ctx, milvusclient.NewQueryOption(\"product_catalog\").\n    WithFilter(filter).\n    WithOutputFields(\"product_name\", \"price\", \"rating\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","// node\n","# restful\n","# Get insights from ~0.1% of premium customer data\nfilter_expression = 'customer_tier == \"premium\" AND region == 'North America' AND RANDOM_SAMPLE(0.001)'\n\nresult = client.query(\n    collection_name=\"customer_profiles\",\n    # highlight-next-line\n    filter=filter_expression,\n    output_fields=[\"purchase_amount\", \"satisfaction_score\", \"last_purchase_date\"],\n    limit=10\n)\n\n# Analyze sample for quick insights\nif result:\n    average_purchase = sum(r[\"purchase_amount\"] for r in result) / len(result)\n    average_satisfaction = sum(r[\"satisfaction_score\"] for r in result) / len(result)\n    \n    print(f\"Sample size: {len(result)}\")\n    print(f\"Average purchase amount: ${average_purchase:.2f}\")\n    print(f\"Average satisfaction score: {average_satisfaction:.2f}\")\n","String filter = \"customer_tier == \\\"premium\\\" AND region == \\\"North America\\\" AND RANDOM_SAMPLE(0.001)\";\n\nQueryReq queryReq = QueryReq.builder()\n        .collectionName(\"customer_profiles\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"purchase_amount\", \"satisfaction_score\", \"last_purchase_date\"))\n        .limit(10)\n        .build();\n\nQueryResp queryResp = client.query(queryReq);\n","filter := \"customer_tier == \\\"premium\\\" AND region == \\\"North America\\\" AND RANDOM_SAMPLE(0.001)\"\n\nresultSet, err := client.Query(ctx, milvusclient.NewQueryOption(\"customer_profiles\").\n    WithFilter(filter).\n    WithOutputFields(\"purchase_amount\", \"satisfaction_score\", \"last_purchase_date\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","// node\n","# restful\n","# Search for similar products within a sampled subset\nsearch_results = client.search(\n    collection_name=\"product_catalog\",\n    data=[[0.1, 0.2, 0.3, 0.4, 0.5]],  # query vector\n    # highlight-next-line\n    filter='category == \"books\" AND RANDOM_SAMPLE(0.01)',\n    search_params={\"metric_type\": \"L2\", \"params\": {}},\n    output_fields=[\"title\", \"author\", \"price\"],\n    limit=10\n)\n\nprint(f\"Found {len(search_results[0])} similar books in sample\")\n","import io.milvus.v2.service.vector.request.SearchReq\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.response.SearchResp\n\nFloatVec queryVector = new FloatVec(new float[]{0.1f, 0.2f, 0.3f, 0.4f, 0.5f});\nSearchReq searchReq = SearchReq.builder()\n        .collectionName(\"product_catalog\")\n        .data(Collections.singletonList(queryVector))\n        .topK(10)\n        .filter(\"category == \\\"books\\\" AND RANDOM_SAMPLE(0.01)\")\n        .outputFields(Arrays.asList(\"title\", \"author\", \"price\"))\n        .build();\n\nSearchResp searchResp = client.search(searchReq);\n\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();\nfor (List<SearchResp.SearchResult> results : searchResults) {\n    System.out.println(\"TopK results:\");\n    for (SearchResp.SearchResult result : results) {\n        System.out.println(result);\n    }\n}\n\n","queryVector := []float32{0.1, 0.2, 0.3, 0.4, 0.5}\n\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"product_catalog\", // collectionName\n    10,               // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithConsistencyLevel(entity.ClStrong).\n    WithFilter(\"category == \\\"books\\\" AND RANDOM_SAMPLE(0.01)\").\n    WithOutputFields(\"title\", \"author\", \"price\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"title: \", resultSet.GetColumn(\"title\").FieldData().GetScalars())\n    fmt.Println(\"author: \", resultSet.GetColumn(\"author\").FieldData().GetScalars())\n    fmt.Println(\"price: \", resultSet.GetColumn(\"price\").FieldData().GetScalars())\n}\n","// node\n","# restful\n"],"headingContent":"Random Sampling","anchorList":[{"label":"ランダム・サンプリングCompatible with Milvus 2.6.x","href":"Random-Sampling","type":1,"isActive":false},{"label":"構文","href":"Syntax","type":2,"isActive":false},{"label":"他のフィルタとの組み合わせ","href":"Combine-with-other-filters","type":2,"isActive":false},{"label":"例","href":"Examples","type":2,"isActive":false},{"label":"ベストプラクティス","href":"Best-practices","type":2,"isActive":false}]}