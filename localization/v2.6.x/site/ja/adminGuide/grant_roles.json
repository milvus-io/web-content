{"codeList":["from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\nclient.grant_role(user_name=\"user_1\", role_name=\"role_a\")\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.service.rbac.request.GrantRoleReq;\n\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";\nString TOKEN = \"root:Milvus\";\n\nConnectConfig connectConfig = ConnectConfig.builder()\n    .uri(CLUSTER_ENDPOINT)\n    .token(TOKEN)\n    .build();\n    \nMilvusClientV2 client = new MilvusClientV2(connectConfig);\n\nGrantRoleReq grantRoleReq = GrantRoleReq.builder()\n        .roleName(\"role_a\")\n        .userName(\"user_1\")\n        .build();\nclient.grantRole(grantRoleReq);\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: \"localhost:19530\",\n    APIKey:  \"root:Milvus\",\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nerr = client.GrantRole(ctx, milvusclient.NewGrantRoleOption(\"user_1\", \"role_a\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\nawait client.grantRole({\n   username: 'user_1',\n   roleName: 'role_a'\n });\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/users/grant_role\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"roleName\": \"role_a\",\n    \"userName\": \"user_1\"\n}'\n","from pymilvus import MilvusClient\n\nclient.describe_user(user_name=\"user_1\")\n","import io.milvus.v2.service.rbac.request.DescribeUserReq;\nimport io.milvus.v2.service.rbac.response.DescribeUserResp;\n\nDescribeUserReq describeUserReq = DescribeUserReq.builder()\n        .userName(\"user_1\")\n        .build();\nDescribeUserResp describeUserResp = client.describeUser(describeUserReq);\n","user, err := client.DescribeUser(ctx, milvusclient.NewDescribeUserOption(\"user_1\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","await client.describeUser({username: 'user_1'});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/users/describe\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"userName\": \"user_1\"\n}'\n","{'user_name': 'user_1', 'roles': 'role_a'}\n","from pymilvus import MilvusClient\n\nclient.revoke_role(\n    user_name='user_1',\n    role_name='role_a'\n)\n","import io.milvus.v2.service.rbac.request.RevokeRoleReq;\n\nclient.revokeRole(RevokeRoleReq.builder()\n        .userName(\"user_1\")\n        .roleName(\"role_a\")\n        .build());\n","err = client.RevokeRole(ctx, milvusclient.NewRevokeRoleOption(\"user_1\", \"role_a\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","await client.revokeRole({\n    username: 'user_1',\n    roleName: 'role_a'\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/users/revoke_role\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"userName\": \"user_1\",\n    \"roleName\": \"role_a\"\n}'\n"],"headingContent":"Grant Roles to Users","anchorList":[{"label":"ユーザへのロールの付与","href":"Grant-Roles-to-Users","type":1,"isActive":false},{"label":"ユーザへのロールの付与","href":"Grant-a-role-to-a-user","type":2,"isActive":false},{"label":"ユーザの記述","href":"Describe-user","type":2,"isActive":false},{"label":"ロールの取り消し","href":"Revoke-a-role","type":2,"isActive":false}]}