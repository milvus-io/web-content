{"codeList":["from scipy.sparse import csr_matrix​\n​\n# Create a sparse matrix​\nrow = [0, 0, 1, 2, 2, 2]​\ncol = [0, 2, 2, 0, 1, 2]​\ndata = [1, 2, 3, 4, 5, 6]​\nsparse_matrix = csr_matrix((data, (row, col)), shape=(3, 3))​\n​\n# Represent sparse vector using the sparse matrix​\nsparse_vector = sparse_matrix.getrow(0)​\n\n","# Represent sparse vector using a dictionary​\nsparse_vector = [{1: 0.5, 100: 0.3, 500: 0.8, 1024: 0.2, 5000: 0.6}]​\n\n","SortedMap<Long, Float> sparseVector = new TreeMap<>();​\nsparseVector.put(1L, 0.5f);​\nsparseVector.put(100L, 0.3f);​\nsparseVector.put(500L, 0.8f);​\nsparseVector.put(1024L, 0.2f);​\nsparseVector.put(5000L, 0.6f);​\n\n","# Represent sparse vector using a list of tuples​\nsparse_vector = [[(1, 0.5), (100, 0.3), (500, 0.8), (1024, 0.2), (5000, 0.6)]]​\n\n","from pymilvus import MilvusClient, DataType​\n​\nclient = MilvusClient(uri=\"http://localhost:19530\")​\n​\nclient.drop_collection(collection_name=\"my_sparse_collection\")​\n​\nschema = client.create_schema(​\n    auto_id=True,​\n    enable_dynamic_fields=True,​\n)​\n​\nschema.add_field(field_name=\"pk\", datatype=DataType.VARCHAR, is_primary=True, max_length=100)​\nschema.add_field(field_name=\"sparse_vector\", datatype=DataType.SPARSE_FLOAT_VECTOR)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\n​\nimport io.milvus.v2.common.DataType;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .build());​\n        ​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\nschema.setEnableDynamicField(true);​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"pk\")​\n        .dataType(DataType.VarChar)​\n        .isPrimaryKey(true)​\n        .autoID(true)​\n        .maxLength(100)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"sparse_vector\")​\n        .dataType(DataType.SparseFloatVector)​\n        .build());​\n\n","import { DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst schema = [​\n  {​\n    name: \"metadata\",​\n    data_type: DataType.JSON,​\n  },​\n  {​\n    name: \"pk\",​\n    data_type: DataType.Int64,​\n    is_primary_key: true,​\n  },​\n  {​\n    name: \"sparse_vector\",​\n    data_type: DataType.SparseFloatVector,​\n  }​\n];​\n​\n\n","export primaryField='{​\n    \"fieldName\": \"pk\",​\n    \"dataType\": \"VarChar\",​\n    \"isPrimary\": true,​\n    \"elementTypeParams\": {​\n        \"max_length\": 100​\n    }​\n}'​\n​\nexport vectorField='{​\n    \"fieldName\": \"sparse_vector\",​\n    \"dataType\": \"SparseFloatVector\"​\n}'​\n​\nexport schema=\"{​\n    \\\"autoID\\\": true,​\n    \\\"fields\\\": [​\n        $primaryField,​\n        $vectorField​\n    ]​\n}\"​\n\n","index_params = client.prepare_index_params()​\n​\nindex_params.add_index(​\n    field_name=\"sparse_vector\",​\n    index_name=\"sparse_inverted_index\",​\n    index_type=\"SPARSE_INVERTED_INDEX\",​\n    metric_type=\"IP\",​\n    params={\"drop_ratio_build\": 0.2},​\n)​\n\n","import io.milvus.v2.common.IndexParam;​\nimport java.util.*;​\n​\nList<IndexParam> indexes = new ArrayList<>();​\nMap<String,Object> extraParams = new HashMap<>();​\nextraParams.put(\"drop_ratio_build\", 0.2);​\nindexes.add(IndexParam.builder()​\n        .fieldName(\"sparse_vector\")​\n        .indexName(\"sparse_inverted_index\")​\n        .indexType(IndexParam.IndexType.SPARSE_INVERTED_INDEX)​\n        .metricType(IndexParam.MetricType.IP)​\n        .extraParams(extraParams)​\n        .build());​\n\n","const indexParams = await client.createIndex({​\n    index_name: 'sparse_inverted_index',​\n    field_name: 'sparse_vector',​\n    metric_type: MetricType.IP,​\n    index_type: IndexType.SPARSE_WAND,​\n    params: {​\n      drop_ratio_build: 0.2,​\n    },​\n});​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"sparse_vector\",​\n            \"metricType\": \"IP\",​\n            \"indexName\": \"sparse_inverted_index\",​\n            \"indexType\": \"SPARSE_INVERTED_INDEX\",​\n            \"params\":{\"drop_ratio_build\": 0.2}​\n        }​\n    ]'​\n\n","client.create_collection(​\n    collection_name=\"my_sparse_collection\",​\n    schema=schema,​\n    index_params=index_params​\n)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .build());​\n        ​\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()​\n        .collectionName(\"my_sparse_collection\")​\n        .collectionSchema(schema)​\n        .indexParams(indexes)​\n        .build();​\nclient.createCollection(requestCreate);​\n\n","import { MilvusClient } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst client = new MilvusClient({​\n    address: 'http://localhost:19530'​\n});​\n​\nawait client.createCollection({​\n    collection_name: 'my_sparse_collection',​\n    schema: schema,​\n    index_params: indexParams​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"my_sparse_collection\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n\n","sparse_vectors = [​\n    {\"sparse_vector\": {1: 0.5, 100: 0.3, 500: 0.8}},​\n    {\"sparse_vector\": {10: 0.1, 200: 0.7, 1000: 0.9}},​\n]​\n​\nclient.insert(​\n    collection_name=\"my_sparse_collection\",​\n    data=sparse_vectors​\n)​\n\n","import com.google.gson.Gson;​\nimport com.google.gson.JsonObject;​\nimport io.milvus.v2.service.vector.request.InsertReq;​\nimport io.milvus.v2.service.vector.response.InsertResp;​\n​\nList<JsonObject> rows = new ArrayList<>();​\nGson gson = new Gson();​\n{​\n    JsonObject row = new JsonObject();​\n    SortedMap<Long, Float> sparse = new TreeMap<>();​\n    sparse.put(1L, 0.5f);​\n    sparse.put(100L, 0.3f);​\n    sparse.put(500L, 0.8f);​\n    row.add(\"sparse_vector\", gson.toJsonTree(sparse));​\n    rows.add(row);​\n}​\n{​\n    JsonObject row = new JsonObject();​\n    SortedMap<Long, Float> sparse = new TreeMap<>();​\n    sparse.put(10L, 0.1f);​\n    sparse.put(200L, 0.7f);​\n    sparse.put(1000L, 0.9f);​\n    row.add(\"sparse_vector\", gson.toJsonTree(sparse));​\n    rows.add(row);​\n}​\n​\nInsertResp insertR = client.insert(InsertReq.builder()​\n        .collectionName(\"my_sparse_collection\")​\n        .data(rows)​\n        .build());​\n\n","const data = [​\n  { sparse_vector: { \"1\": 0.5, \"100\": 0.3, \"500\": 0.8 } },​\n  { sparse_vector: { \"10\": 0.1, \"200\": 0.7, \"1000\": 0.9 } },​\n];​\nclient.insert({​\n  collection_name: \"my_sparse_collection\",​\n  data: data,​\n});​\n​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"data\": [​\n        {\"sparse_vector\": {\"1\": 0.5, \"100\": 0.3, \"500\": 0.8}},​\n        {\"sparse_vector\": {\"10\": 0.1, \"200\": 0.7, \"1000\": 0.9}}        ​\n    ],​\n    \"collectionName\": \"my_sparse_collection\"​\n}'​\n​\n## {\"code\":0,\"cost\":0,\"data\":{\"insertCount\":2,\"insertIds\":[\"453577185629572534\",\"453577185629572535\"]}}​\n\n","# Prepare search parameters​\nsearch_params = {​\n    \"params\": {\"drop_ratio_search\": 0.2},  # Additional optional search parameters​\n}​\n​\n# Prepare the query vector​\nquery_vector = [{1: 0.2, 50: 0.4, 1000: 0.7}]​\n\n","res = client.search(​\n    collection_name=\"my_sparse_collection\",​\n    data=query_vector,​\n    limit=3,​\n    output_fields=[\"pk\"],​\n    search_params=search_params,​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"[{'id': '453718927992172266', 'distance': 0.6299999952316284, 'entity': {'pk': '453718927992172266'}}, {'id': '453718927992172265', 'distance': 0.10000000149011612, 'entity': {'pk': '453718927992172265'}}]\"]​\n\n","import io.milvus.v2.service.vector.request.SearchReq;​\nimport io.milvus.v2.service.vector.request.data.SparseFloatVec;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nMap<String,Object> searchParams = new HashMap<>();​\nsearchParams.put(\"drop_ratio_search\", 0.2);​\n​\nSortedMap<Long, Float> sparse = new TreeMap<>();​\nsparse.put(10L, 0.1f);​\nsparse.put(200L, 0.7f);​\nsparse.put(1000L, 0.9f);​\n​\nSparseFloatVec queryVector = new SparseFloatVec(sparse);​\n​\nSearchResp searchR = client.search(SearchReq.builder()​\n        .collectionName(\"my_sparse_collection\")​\n        .data(Collections.singletonList(queryVector))​\n        .annsField(\"sparse_vector\")​\n        .searchParams(searchParams)​\n        .topK(3)​\n        .outputFields(Collections.singletonList(\"pk\"))​\n        .build());​\n        ​\nSystem.out.println(searchR.getSearchResults());​\n​\n// Output​\n//​\n// [[SearchResp.SearchResult(entity={pk=453444327741536759}, score=1.31, id=453444327741536759), SearchResp.SearchResult(entity={pk=453444327741536756}, score=1.31, id=453444327741536756), SearchResp.SearchResult(entity={pk=453444327741536753}, score=1.31, id=453444327741536753)]]​\n\n","client.search({​\n    collection_name: 'my_sparse_collection',​\n    data: {1: 0.2, 50: 0.4, 1000: 0.7},​\n    limit: 3,​\n    output_fields: ['pk'],​\n    params: {​\n        drop_ratio_search: 0.2​\n    }​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_sparse_collection\",​\n    \"data\": [​\n        {\"1\": 0.2, \"50\": 0.4, \"1000\": 0.7}​\n    ],​\n    \"annsField\": \"sparse_vector\",​\n    \"limit\": 3,​\n    \"searchParams\":{​\n        \"params\":{\"drop_ratio_search\": 0.2}​\n    },​\n    \"outputFields\": [\"pk\"]​\n}'​\n​\n## {\"code\":0,\"cost\":0,\"data\":[{\"distance\":0.63,\"id\":\"453577185629572535\",\"pk\":\"453577185629572535\"},{\"distance\":0.1,\"id\":\"453577185629572534\",\"pk\":\"453577185629572534\"}]}​\n\n"],"headingContent":"Sparse Vector​","anchorList":[{"label":"Vectores dispersos","href":"Sparse-Vector​","type":1,"isActive":false},{"label":"Visión general","href":"Overview​","type":2,"isActive":false},{"label":"Utilizar vectores dispersos en Milvus","href":"Use-sparse-vectors-in-Milvus​","type":2,"isActive":false}]}