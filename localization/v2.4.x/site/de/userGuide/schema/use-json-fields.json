{"codeList":["{​\n  \"category\": \"electronics\",​\n  \"price\": 99.99,​\n  \"brand\": \"BrandA\"​\n}​\n\n","from pymilvus import MilvusClient, DataType​\n​\nclient = MilvusClient(uri=\"http://localhost:19530\")​\n​\nschema = client.create_schema(​\n    auto_id=False,​\n    enable_dynamic_fields=True,​\n)​\n​\nschema.add_field(field_name=\"metadata\", datatype=DataType.JSON)​\nschema.add_field(field_name=\"pk\", datatype=DataType.INT64, is_primary=True)​\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=3)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\n​\nimport io.milvus.v2.common.DataType;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .build());​\n        ​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\nschema.setEnableDynamicField(true);​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"metadata\")​\n        .dataType(DataType.JSON)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"pk\")​\n        .dataType(DataType.Int64)​\n        .isPrimaryKey(true)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"embedding\")​\n        .dataType(DataType.FloatVector)​\n        .dimension(3)​\n        .build());​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\nconst schema = [​\n  {​\n    name: \"metadata\",​\n    data_type: DataType.JSON,​\n  },​\n  {​\n    name: \"pk\",​\n    data_type: DataType.Int64,​\n    is_primary_key: true,​\n  },​\n  {​\n    name: \"embedding\",​\n    data_type: DataType.FloatVector,​\n    dim: 3,​\n  },​\n];​\n\n","export jsonField='{​\n    \"fieldName\": \"metadata\",​\n    \"dataType\": \"JSON\"​\n}'​\n​\nexport pkField='{​\n    \"fieldName\": \"pk\",​\n    \"dataType\": \"Int64\",​\n    \"isPrimary\": true​\n}'​\n​\nexport vectorField='{​\n    \"fieldName\": \"embedding\",​\n    \"dataType\": \"FloatVector\",​\n    \"elementTypeParams\": {​\n        \"dim\": 3​\n    }​\n}'​\n​\nexport schema=\"{​\n    \\\"autoID\\\": false,​\n    \\\"fields\\\": [​\n        $jsonField,​\n        $pkField,​\n        $vectorField​\n    ]​\n}\"​\n\n","​\nindex_params = client.prepare_index_params()​\n​\nindex_params.add_index(​\n    field_name=\"embedding\",​\n    index_type=\"AUTOINDEX\",​\n    metric_type=\"COSINE\"​\n)​\n\n","import io.milvus.v2.common.IndexParam;​\nimport java.util.*;​\n​\nList<IndexParam> indexes = new ArrayList<>();​\nindexes.add(IndexParam.builder()​\n        .fieldName(\"embedding\")​\n        .indexType(IndexParam.IndexType.AUTOINDEX)​\n        .metricType(IndexParam.MetricType.COSINE)​\n        .build());​\n\n","const indexParams = {​\n    index_name: 'embedding_index',​\n    field_name: 'embedding',​\n    metricType: MetricType.CONSINE,​\n    index_type: IndexType.AUTOINDEX,​\n);​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"embedding\",​\n            \"metricType\": \"COSINE\",​\n            \"indexType\": \"AUTOINDEX\"​\n        }​\n    ]'​\n\n","client.create_collection(​\n    collection_name=\"my_json_collection\",​\n    schema=schema,​\n    index_params=index_params​\n)​\n\n","CreateCollectionReq requestCreate = CreateCollectionReq.builder()​\n        .collectionName(\"my_json_collection\")​\n        .collectionSchema(schema)​\n        .indexParams(indexes)​\n        .build();​\nclient.createCollection(requestCreate);​\n\n","client.create_collection({​\n    collection_name: \"my_json_collection\",​\n    schema: schema,​\n    index_params: indexParams​\n})​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"my_json_collection\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n\n","# Data to be inserted​\ndata = [​\n  {​\n      \"metadata\": {\"category\": \"electronics\", \"price\": 99.99, \"brand\": \"BrandA\"},​\n      \"pk\": 1,​\n      \"embedding\": [0.12, 0.34, 0.56]​\n  },​\n  {​\n      \"metadata\": {\"category\": \"home_appliances\", \"price\": 249.99, \"brand\": \"BrandB\"},​\n      \"pk\": 2,​\n      \"embedding\": [0.56, 0.78, 0.90]​\n  },​\n  {​\n      \"metadata\": {\"category\": \"furniture\", \"price\": 399.99, \"brand\": \"BrandC\"},​\n      \"pk\": 3,​\n      \"embedding\": [0.91, 0.18, 0.23]​\n  }​\n]​\n​\n# Insert data into the collection​\nclient.insert(​\n    collection_name=\"your_collection_name\",​\n    data=data​\n)​\n\n","import com.google.gson.Gson;​\nimport com.google.gson.JsonObject;​\n​\nimport io.milvus.v2.service.vector.request.InsertReq;​\nimport io.milvus.v2.service.vector.response.InsertResp;​\n​\nList<JsonObject> rows = new ArrayList<>();​\nGson gson = new Gson();​\nrows.add(gson.fromJson(\"{\\\"metadata\\\": {\\\"category\\\": \\\"electronics\\\", \\\"price\\\": 99.99, \\\"brand\\\": \\\"BrandA\\\"}, \\\"pk\\\": 1, \\\"embedding\\\": [0.1, 0.2, 0.3]}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"metadata\\\": {\\\"category\\\": \\\"home_appliances\\\", \\\"price\\\": 249.99, \\\"brand\\\": \\\"BrandB\\\"}, \\\"pk\\\": 2, \\\"embedding\\\": [0.4, 0.5, 0.6]}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"metadata\\\": {\\\"category\\\": \\\"furniture\\\", \\\"price\\\": 399.99, \\\"brand\\\": \\\"BrandC\\\"}, \\\"pk\\\": 3, \\\"embedding\\\": [0.7, 0.8, 0.9]}\", JsonObject.class));​\n​\nInsertResp insertR = client.insert(InsertReq.builder()​\n        .collectionName(\"my_json_collection\")​\n        .data(rows)​\n        .build());​\n\n","const data = [​\n  {​\n      \"metadata\": {\"category\": \"electronics\", \"price\": 99.99, \"brand\": \"BrandA\"},​\n      \"pk\": 1,​\n      \"embedding\": [0.12, 0.34, 0.56]​\n  },​\n  {​\n      \"metadata\": {\"category\": \"home_appliances\", \"price\": 249.99, \"brand\": \"BrandB\"},​\n      \"pk\": 2,​\n      \"embedding\": [0.56, 0.78, 0.90]​\n  },​\n  {​\n      \"metadata\": {\"category\": \"furniture\", \"price\": 399.99, \"brand\": \"BrandC\"},​\n      \"pk\": 3,​\n      \"embedding\": [0.91, 0.18, 0.23]​\n  }​\n]​\n​\nclient.insert({​\n    collection_name: \"my_json_collection\",​\n    data: data​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"data\": [​\n        {​\n            \"metadata\": {\"category\": \"electronics\", \"price\": 99.99, \"brand\": \"BrandA\"},​\n            \"pk\": 1,​\n            \"embedding\": [0.12, 0.34, 0.56]​\n        },​\n        {​\n            \"metadata\": {\"category\": \"home_appliances\", \"price\": 249.99, \"brand\": \"BrandB\"},​\n            \"pk\": 2,​\n            \"embedding\": [0.56, 0.78, 0.90]​\n        },​\n        {​\n            \"metadata\": {\"category\": \"furniture\", \"price\": 399.99, \"brand\": \"BrandC\"},​\n            \"pk\": 3,​\n            \"embedding\": [0.91, 0.18, 0.23]​\n        }       ​\n    ],​\n    \"collectionName\": \"my_json_collection\"​\n}'​\n\n","filter = 'metadata[\"category\"] == \"electronics\" and metadata[\"price\"] < 150'​\n​\nres = client.query(​\n    collection_name=\"my_json_collection\",​\n    filter=filter,​\n    output_fields=[\"metadata\"]​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"{'metadata': {'category': 'electronics', 'price': 99.99, 'brand': 'BrandA'}, 'pk': 1}\"] ​\n\n","import io.milvus.v2.service.vector.request.QueryReq;​\nimport io.milvus.v2.service.vector.response.QueryResp;​\n​\nString filter = \"metadata[\\\"category\\\"] == \\\"electronics\\\" and metadata[\\\"price\\\"] < 150\";​\nQueryResp resp = client.query(QueryReq.builder()​\n        .collectionName(\"my_json_collection\")​\n        .filter(filter)​\n        .outputFields(Collections.singletonList(\"metadata\"))​\n        .build());​\n​\nSystem.out.println(resp.getQueryResults());​\n​\n// Output​\n//​\n// [QueryResp.QueryResult(entity={metadata={\"category\":\"electronics\",\"price\":99.99,\"brand\":\"BrandA\"}, pk=1})]​\n\n","client.query({​\n    collection_name: 'my_scalar_collection',​\n    filter: 'metadata[\"category\"] == \"electronics\" and metadata[\"price\"] < 150',​\n    output_fields: ['metadata']​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_json_collection\",​\n    \"filter\": \"metadata[\\\"category\\\"] == \\\"electronics\\\" and metadata[\\\"price\\\"] < 150\",​\n    \"outputFields\": [\"metadata\"]​\n}'​\n{\"code\":0,\"cost\":0,\"data\":[{\"metadata\":\"{\\\"category\\\": \\\"electronics\\\", \\\"price\\\": 99.99, \\\"brand\\\": \\\"BrandA\\\"}\",\"pk\":1}]}​\n\n","filter = 'metadata[\"brand\"] == \"BrandA\"'​\n​\nres = client.search(​\n    collection_name=\"my_json_collection\",​\n    data=[[0.3, -0.6, 0.1]],​\n    limit=5,​\n    search_params={\"params\": {\"nprobe\": 10}},​\n    output_fields=[\"metadata\"],​\n    filter=filter​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"[{'id': 1, 'distance': -0.2479381263256073, 'entity': {'metadata': {'category': 'electronics', 'price': 99.99, 'brand': 'BrandA'}}}]\"] ​\n\n","import io.milvus.v2.service.vector.request.SearchReq;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nString filter = \"metadata[\\\"brand\\\"] == \\\"BrandA\\\"\";​\nSearchResp resp = client.search(SearchReq.builder()​\n        .collectionName(\"my_json_collection\")​\n        .annsField(\"embedding\")​\n        .data(Collections.singletonList(new FloatVec(new float[]{0.3f, -0.6f, 0.1f})))​\n        .topK(5)​\n        .outputFields(Collections.singletonList(\"metadata\"))​\n        .filter(filter)​\n        .build());​\n​\nSystem.out.println(resp.getSearchResults());​\n​\n// Output​\n//​\n// [[SearchResp.SearchResult(entity={metadata={\"category\":\"electronics\",\"price\":99.99,\"brand\":\"BrandA\"}}, score=-0.2364331, id=1)]]​\n\n","client.search({​\n    collection_name: 'my_json_collection',​\n    data: [0.3, -0.6, 0.1],​\n    limit: 5,​\n    output_fields: ['metadata'],​\n    filter: 'metadata[\"category\"] == \"electronics\" and metadata[\"price\"] < 150',​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_json_collection\",​\n    \"data\": [​\n        [0.3, -0.6, 0.1]​\n    ],​\n    \"annsField\": \"embedding\",​\n    \"limit\": 5,​\n    \"searchParams\":{​\n        \"params\":{\"nprobe\":10}​\n    },​\n    \"outputFields\": [\"metadata\"],​\n    \"filter\": \"metadata[\\\"brand\\\"] == \\\"BrandA\\\"\"​\n}'​\n​\n## {\"code\":0,\"cost\":0,\"data\":[{\"distance\":-0.24793813,\"id\":1,\"metadata\":\"{\\\"category\\\": \\\"electronics\\\", \\\"price\\\": 99.99, \\\"brand\\\": \\\"BrandA\\\"}\"}]}​\n\n"],"headingContent":"JSON Field​","anchorList":[{"label":"JSON-Feld","href":"JSON-Field​","type":1,"isActive":false},{"label":"JSON-Feld hinzufügen","href":"Add-JSON-field​","type":2,"isActive":false},{"label":"Sammlung erstellen","href":"Create-collection​","type":2,"isActive":false},{"label":"Daten einfügen","href":"Insert-data​","type":2,"isActive":false},{"label":"Suche und Abfrage","href":"Search-and-query​","type":2,"isActive":false},{"label":"Begrenzungen","href":"Limits​","type":2,"isActive":false}]}