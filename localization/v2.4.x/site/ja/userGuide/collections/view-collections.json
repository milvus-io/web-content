{"codeList":["from pymilvus import MilvusClient, DataType​\n​\nclient = MilvusClient(​\n    uri=\"http://localhost:19530\",​\n    token=\"root:Milvus\"​\n)​\n​\nres = client.list_collections()​\n​\nprint(res)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\nimport io.milvus.v2.service.collection.response.ListCollectionsResp;​\n​\nConnectConfig connectConfig = ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .token(\"root:Milvus\")​\n        .build();​\n​\nMilvusClientV2 client = new MilvusClientV2(connectConfig);​\n​\nListCollectionsResp resp = client.listCollections();​\nSystem.out.println(resp.getCollectionNames());​\n\n","import { MilvusClient } from '@zilliz/milvus2-sdk-node';​\n​\nconst client = new MilvusClient({​\n    address: 'localhost:19530',​\n    token: 'root:Milvus'​\n});​\n​\n​\nconst collections = await client.listCollections();​\nconsole.log(collections);​\n\n","import (​\n    \"context\"​\n    \"fmt\"​\n​\n    \"github.com/milvus-io/milvus/client/v2\"​\n)​\n​\nctx, cancel := context.WithCancel(context.Background())​\ndefer cancel()​\n​\nmilvusAddr := \"127.0.0.1:19530\"​\ntoken := \"root:Milvus\"​\n​\ncli, err := client.New(ctx, &client.ClientConfig{​\n    Address: milvusAddr,​\n    APIKey:  token,​\n})​\nif err != nil {​\n    log.Fatal(\"failed to connect to milvus server: \", err.Error())​\n}​\n​\ndefer cli.Close(ctx)​\n​\ncollectionNames, err := cli.ListCollections(ctx, client.NewListCollectionOption())​\nif err != nil {​\n    // handle error​\n}​\n​\nfmt.Println(collectionNames)​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/list\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{}​\n}'​\n\n","[\"quick_setup\"]​\n\n","res = client.describe_collection(​\n    collection_name=\"quick_setup\"​\n)​\n​\nprint(res)​\n\n","import io.milvus.v2.service.collection.request.DescribeCollectionReq;​\nimport io.milvus.v2.service.collection.response.DescribeCollectionResp;​\n​\nDescribeCollectionReq request = DescribeCollectionReq.builder()​\n        .collectionName(\"quick_setup\")​\n        .build();​\nDescribeCollectionResp resp = client.describeCollection(request);​\nSystem.out.println(resp);​\n\n","const res = await client.describeCollection({​\n    collection_name: \"quick_setup\"​\n});​\n​\nconsole.log(res);​\n\n","import (​\n    \"context\"​\n    \"fmt\"​\n​\n    \"github.com/milvus-io/milvus/client/v2\"​\n)​\n​\nctx, cancel := context.WithCancel(context.Background())​\ndefer cancel()​\n​\nmilvusAddr := \"127.0.0.1:19530\"​\ntoken := \"root:Milvus\"​\n​\ncli, err := client.New(ctx, &client.ClientConfig{​\n    Address: milvusAddr,​\n    APIKey:  token,​\n})​\nif err != nil {​\n    log.Fatal(\"failed to connect to milvus server: \", err.Error())​\n}​\n​\ndefer cli.Close(ctx)​\n​\ncollection, err := cli.DescribeCollection(ctx, client.NewDescribeCollectionOption(\"quick_setup\"))​\nif err != nil {​\n    // handle error​\n}​\n​\nfmt.Println(collection)​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/describe\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"quick_setup\"​\n}'​\n\n"],"headingContent":"View Collections​","anchorList":[{"label":"コレクションの表示","href":"View-Collections​","type":1,"isActive":false},{"label":"コレクションのリスト","href":"List-Collections​","type":2,"isActive":false},{"label":"コレクションの記述","href":"Describe-Collection​","type":2,"isActive":false}]}