{"codeList":["{​\n  \"tags\": [\"pop\", \"rock\", \"classic\"],​\n  \"ratings\": [5, 4, 3]​\n}​\n\n","from pymilvus import MilvusClient, DataType​\n​\nclient = MilvusClient(uri=\"http://localhost:19530\")​\n​\nschema = client.create_schema(​\n    auto_id=False,​\n    enable_dynamic_fields=True,​\n)​\n​\n# Add an Array field with elements of type VARCHAR​\nschema.add_field(field_name=\"tags\", datatype=DataType.ARRAY, element_type=DataType.VARCHAR, max_capacity=10)​\n# Add an Array field with elements of type INT64​\nschema.add_field(field_name=\"ratings\", datatype=DataType.ARRAY, element_type=DataType.INT64, max_capacity=5)​\n​\n# Add primary field​\nschema.add_field(field_name=\"pk\", datatype=DataType.INT64, is_primary=True)​\n​\n# Add vector field​\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=3)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\nimport io.milvus.v2.common.DataType;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .build());​\n        ​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\nschema.setEnableDynamicField(true);​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"tags\")​\n        .dataType(DataType.Array)​\n        .elementType(DataType.VarChar)​\n        .maxCapacity(10)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"ratings\")​\n        .dataType(DataType.Array)​\n        .elementType(DataType.Int64)​\n        .maxCapacity(5)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"pk\")​\n        .dataType(DataType.Int64)​\n        .isPrimaryKey(true)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"embedding\")​\n        .dataType(DataType.FloatVector)​\n        .dimension(3)​\n        .build());​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\nconst schema = [​\n  {​\n    name: \"tags\",​\n    data_type: DataType.Array,​\n    element_type: DataType.VarChar,​\n    max_capacity: 10,​\n    max_length: 65535​\n  },​\n  {​\n    name: \"rating\",​\n    data_type: DataType.Array,​\n    element_type: DataType.Int64,​\n    max_capacity: 5,​\n  },​\n  {​\n    name: \"pk\",​\n    data_type: DataType.Int64,​\n    is_primary_key: true,​\n  },​\n  {​\n    name: \"embedding\",​\n    data_type: DataType.FloatVector,​\n    dim: 3,​\n  },​\n];​\n\n","export arrayField1='{​\n    \"fieldName\": \"tags\",​\n    \"dataType\": \"Array\",​\n    \"elementDataType\": \"VarChar\",​\n    \"elementTypeParams\": {​\n        \"max_capacity\": 10,​\n        \"max_length\": 100​\n    }​\n}'​\n​\nexport arrayField2='{​\n    \"fieldName\": \"ratings\",​\n    \"dataType\": \"Array\",​\n    \"elementDataType\": \"Int64\",​\n    \"elementTypeParams\": {​\n        \"max_capacity\": 5​\n    }​\n}'​\n​\nexport pkField='{​\n    \"fieldName\": \"pk\",​\n    \"dataType\": \"Int64\",​\n    \"isPrimary\": true​\n}'​\n​\nexport vectorField='{​\n    \"fieldName\": \"embedding\",​\n    \"dataType\": \"FloatVector\",​\n    \"elementTypeParams\": {​\n        \"dim\": 3​\n    }​\n}'​\n​\nexport schema=\"{​\n    \\\"autoID\\\": false,​\n    \\\"fields\\\": [​\n        $arrayField1,​\n        $arrayField2,​\n        $pkField,​\n        $vectorField​\n    ]​\n}\"​\n\n","# Prepare index parameters​\nindex_params = client.prepare_index_params()  # Prepare IndexParams object​\n​\nindex_params.add_index(​\n    field_name=\"tags\",  # Name of the Array field to index​\n    index_type=\"AUTOINDEX\",  # Index type​\n    index_name=\"inverted_index\"  # Index name​\n)​\n\n","import io.milvus.v2.common.IndexParam;​\nimport java.util.*;​\n​\nList<IndexParam> indexes = new ArrayList<>();​\nindexes.add(IndexParam.builder()​\n        .fieldName(\"tags\")​\n        .indexName(\"inverted_index\")​\n        .indexType(IndexParam.IndexType.AUTOINDEX)​\n        .build());​\n\n","const indexParams = [{​\n    index_name: 'inverted_index',​\n    field_name: 'tags',​\n    index_type: IndexType.AUTOINDEX,​\n)];​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"tags\",​\n            \"indexName\": \"inverted_index\",​\n            \"indexType\": \"AUTOINDEX\"​\n        }​\n    ]'​\n\n","# Add vector index​\nindex_params.add_index(​\n    field_name=\"embedding\",​\n    index_type=\"AUTOINDEX\",  # Use automatic indexing to simplify complex index settings​\n    metric_type=\"COSINE\"  # Specify similarity metric type, such as L2, COSINE, or IP​\n)​\n\n","indexes.add(IndexParam.builder()​\n        .fieldName(\"embedding\")​\n        .indexType(IndexParam.IndexType.AUTOINDEX)​\n        .metricType(IndexParam.MetricType.COSINE)​\n        .build());​\n\n"," indexParams.push({​\n    index_name: 'embedding_index',​\n    field_name: 'embedding',​\n    index_type: IndexType.AUTOINDEX,​\n});​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"tags\",​\n            \"indexName\": \"inverted_index\",​\n            \"indexType\": \"AUTOINDEX\"​\n        },​\n        {​\n            \"fieldName\": \"embedding\",​\n            \"metricType\": \"COSINE\",​\n            \"indexType\": \"AUTOINDEX\"​\n        }​\n    ]'​\n\n","client.create_collection(​\n    collection_name=\"my_array_collection\",​\n    schema=schema,​\n    index_params=index_params​\n)​\n\n","CreateCollectionReq requestCreate = CreateCollectionReq.builder()​\n        .collectionName(\"my_array_collection\")​\n        .collectionSchema(schema)​\n        .indexParams(indexes)​\n        .build();​\nclient.createCollection(requestCreate);​\n\n","client.create_collection({​\n    collection_name: \"my_array_collection\",​\n    schema: schema,​\n    index_params: indexParams​\n})​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"my_array_collection\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n\n","data = [​\n    {​\n        \"tags\": [\"pop\", \"rock\", \"classic\"],​\n        \"ratings\": [5, 4, 3],​\n        \"pk\": 1,​\n        \"embedding\": [0.12, 0.34, 0.56]​\n    },​\n    {​\n        \"tags\": [\"jazz\", \"blues\"],​\n        \"ratings\": [4, 5],​\n        \"pk\": 2,​\n        \"embedding\": [0.78, 0.91, 0.23]​\n    },​\n    {​\n        \"tags\": [\"electronic\", \"dance\"],​\n        \"ratings\": [3, 3, 4],​\n        \"pk\": 3,​\n        \"embedding\": [0.67, 0.45, 0.89]​\n    }​\n]​\n​\nclient.insert(​\n    collection_name=\"my_array_collection\",​\n    data=data​\n)​\n\n","import com.google.gson.Gson;​\nimport com.google.gson.JsonObject;​\n​\nimport io.milvus.v2.service.vector.request.InsertReq;​\nimport io.milvus.v2.service.vector.response.InsertResp;​\n​\nList<JsonObject> rows = new ArrayList<>();​\nGson gson = new Gson();​\nrows.add(gson.fromJson(\"{\\\"tags\\\": [\\\"pop\\\", \\\"rock\\\", \\\"classic\\\"], \\\"ratings\\\": [5, 4, 3], \\\"pk\\\": 1, \\\"embedding\\\": [0.1, 0.2, 0.3]}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"tags\\\": [\\\"jazz\\\", \\\"blues\\\"], \\\"ratings\\\": [4, 5], \\\"pk\\\": 2, \\\"embedding\\\": [0.4, 0.5, 0.6]}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"tags\\\": [\\\"electronic\\\", \\\"dance\\\"], \\\"ratings\\\": [3, 3, 4], \\\"pk\\\": 3, \\\"embedding\\\": [0.7, 0.8, 0.9]}\", JsonObject.class));​\n​\nInsertResp insertR = client.insert(InsertReq.builder()​\n        .collectionName(\"my_array_collection\")​\n        .data(rows)​\n        .build());​\n\n","const data = [​\n    {​\n        \"tags\": [\"pop\", \"rock\", \"classic\"],​\n        \"ratings\": [5, 4, 3],​\n        \"pk\": 1,​\n        \"embedding\": [0.12, 0.34, 0.56]​\n    },​\n    {​\n        \"tags\": [\"jazz\", \"blues\"],​\n        \"ratings\": [4, 5],​\n        \"pk\": 2,​\n        \"embedding\": [0.78, 0.91, 0.23]​\n    },​\n    {​\n        \"tags\": [\"electronic\", \"dance\"],​\n        \"ratings\": [3, 3, 4],​\n        \"pk\": 3,​\n        \"embedding\": [0.67, 0.45, 0.89]​\n    }​\n];​\n​\nclient.insert({​\n  collection_name: \"my_array_collection\",​\n  data: data,​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"data\": [​\n        {​\n        \"tags\": [\"pop\", \"rock\", \"classic\"],​\n        \"ratings\": [5, 4, 3],​\n        \"pk\": 1,​\n        \"embedding\": [0.12, 0.34, 0.56]​\n    },​\n    {​\n        \"tags\": [\"jazz\", \"blues\"],​\n        \"ratings\": [4, 5],​\n        \"pk\": 2,​\n        \"embedding\": [0.78, 0.91, 0.23]​\n    },​\n    {​\n        \"tags\": [\"electronic\", \"dance\"],​\n        \"ratings\": [3, 3, 4],​\n        \"pk\": 3,​\n        \"embedding\": [0.67, 0.45, 0.89]​\n    }       ​\n    ],​\n    \"collectionName\": \"my_array_collection\"​\n}'​\n\n","filter = 'ratings[0] < 4'​\n​\nres = client.query(​\n    collection_name=\"my_array_collection\",​\n    filter=filter,​\n    output_fields=[\"tags\", \"ratings\", \"embedding\"]​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"{'pk': 3, 'tags': ['electronic', 'dance'], 'ratings': [3, 3, 4], 'embedding': [np.float32(0.67), np.float32(0.45), np.float32(0.89)]}\"] ​\n\n","import io.milvus.v2.service.vector.request.QueryReq;​\nimport io.milvus.v2.service.vector.response.QueryResp;​\n​\nString filter = \"ratings[0] < 4\";​\nQueryResp resp = client.query(QueryReq.builder()​\n        .collectionName(\"my_array_collection\")​\n        .filter(filter)​\n        .outputFields(Arrays.asList(\"tags\", \"ratings\", \"embedding\"))​\n        .build());​\n​\nSystem.out.println(resp.getQueryResults());​\n​\n// Output​\n//​\n// [QueryResp.QueryResult(entity={ratings=[3, 3, 4], pk=3, embedding=[0.7, 0.8, 0.9], tags=[electronic, dance]})]​\n\n","client.query({​\n    collection_name: 'my_array_collection',​\n    filter: 'ratings[0] < 4',​\n    output_fields: ['tags', 'ratings', 'embedding']​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_array_collection\",​\n    \"filter\": \"ratings[0] < 4\",​\n    \"outputFields\": [\"tags\", \"ratings\", \"embedding\"]​\n}'​\n# {\"code\":0,\"cost\":0,\"data\":[{\"embedding\":[0.67,0.45,0.89],\"pk\":3,\"ratings\":{\"Data\":{\"LongData\":{\"data\":[3,3,4]}}},\"tags\":{\"Data\":{\"StringData\":{\"data\":[\"electronic\",\"dance\"]}}}}]}​\n\n","filter = 'tags[0] == \"pop\"'​\n​\nres = client.search(​\n    collection_name=\"my_array_collection\",​\n    data=[[0.3, -0.6, 0.1]],​\n    limit=5,​\n    search_params={\"params\": {\"nprobe\": 10}},​\n    output_fields=[\"tags\", \"ratings\", \"embedding\"],​\n    filter=filter​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"[{'id': 1, 'distance': 1.1276001930236816, 'entity': {'ratings': [5, 4, 3], 'embedding': [0.11999999731779099, 0.3400000035762787, 0.5600000023841858], 'tags': ['pop', 'rock', 'classic']}}]\"]​\n\n","import io.milvus.v2.service.vector.request.SearchReq;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nString filter = \"tags[0] == \\\"pop\\\"\";​\nSearchResp resp = client.search(SearchReq.builder()​\n        .collectionName(\"my_array_collection\")​\n        .annsField(\"embedding\")​\n        .data(Collections.singletonList(new FloatVec(new float[]{0.3f, -0.6f, 0.1f})))​\n        .topK(5)​\n        .outputFields(Arrays.asList(\"tags\", \"ratings\", \"embedding\"))​\n        .filter(filter)​\n        .build());​\n​\nSystem.out.println(resp.getSearchResults());​\n​\n// Output​\n//​\n// [[SearchResp.SearchResult(entity={ratings=[5, 4, 3], embedding=[0.1, 0.2, 0.3], tags=[pop, rock, classic]}, score=-0.2364331, id=1)]]​\n\n","client.search({​\n    collection_name: 'my_array_collection',​\n    data: [0.3, -0.6, 0.1],​\n    limit: 5,​\n    output_fields: ['tags', 'ratings', 'embdding'],​\n    filter: 'tags[0] == \"pop\"'​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_array_collection\",​\n    \"data\": [​\n        [0.3, -0.6, 0.1]​\n    ],​\n    \"annsField\": \"embedding\",​\n    \"limit\": 5,​\n    \"filter\": \"tags[0] == \\\"pop\\\"\",​\n    \"outputFields\": [\"tags\", \"ratings\", \"embedding\"]​\n}'​\n​\n# {\"code\":0,\"cost\":0,\"data\":[{\"distance\":-0.24793813,\"embedding\":[0.12,0.34,0.56],\"id\":1,\"ratings\":{\"Data\":{\"LongData\":{\"data\":[5,4,3]}}},\"tags\":{\"Data\":{\"StringData\":{\"data\":[\"pop\",\"rock\",\"classic\"]}}}}]}​\n\n"],"headingContent":"Array Field​","anchorList":[{"label":"配列フィールド","href":"Array-Field​","type":1,"isActive":false},{"label":"配列フィールドの追加","href":"Add-Array-field​","type":2,"isActive":false},{"label":"インデックスパラメータの設定","href":"Set-index-params​","type":2,"isActive":false},{"label":"コレクションの作成","href":"Create-collection​","type":2,"isActive":false},{"label":"データの挿入","href":"Insert-data​","type":2,"isActive":false},{"label":"検索とクエリ","href":"Search-and-query​","type":2,"isActive":false},{"label":"リミット","href":"Limits​","type":2,"isActive":false}]}