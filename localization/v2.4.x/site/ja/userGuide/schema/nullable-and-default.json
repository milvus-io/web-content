{"codeList":["from pymilvus import MilvusClient, DataType​\n​\nclient = MilvusClient(uri='http://localhost:19530')​\n​\n# Define collection schema​\nschema = client.create_schema(​\n    auto_id=False,​\n    enable_dynamic_schema=True,​\n)​\n​\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)​\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5)​\nschema.add_field(field_name=\"age\", datatype=DataType.INT64, nullable=True) # Nullable field​\n​\n# Set index params​\nindex_params = client.prepare_index_params()​\nindex_params.add_index(field_name=\"vector\", index_type=\"IVF_FLAT\", metric_type=\"L2\", params={ \"nlist\": 128 })​\n​\n# Create collection​\nclient.create_collection(collection_name=\"user_profiles_null\", schema=schema, index_params=index_params)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\nimport io.milvus.v2.common.DataType;​\nimport io.milvus.v2.common.IndexParam;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nimport java.util.*;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .build());​\n        ​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\nschema.setEnableDynamicField(true);​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"id\")​\n        .dataType(DataType.Int64)​\n        .isPrimaryKey(true)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"vector\")​\n        .dataType(DataType.FloatVector)​\n        .dimension(5)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"age\")​\n        .dataType(DataType.Int64)​\n        .isNullable(true)​\n        .build());​\n​\nList<IndexParam> indexes = new ArrayList<>();​\nMap<String,Object> extraParams = new HashMap<>();​\nextraParams.put(\"nlist\", 128);​\nindexes.add(IndexParam.builder()​\n        .fieldName(\"vector\")​\n        .indexType(IndexParam.IndexType.IVF_FLAT)​\n        .metricType(IndexParam.MetricType.L2)​\n        .extraParams(extraParams)​\n        .build());​\n​\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()​\n        .collectionName(\"user_profiles_null\")​\n        .collectionSchema(schema)​\n        .indexParams(indexes)​\n        .build();​\nclient.createCollection(requestCreate);​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst client = new MilvusClient({​\n  address: \"http://localhost:19530\",​\n  token: \"root:Milvus\",​\n});​\n​\nawait client.createCollection({​\n  collection_name: \"user_profiles_null\",​\n  schema: [​\n    {​\n      name: \"id\",​\n      is_primary_key: true,​\n      data_type: DataType.int64,​\n    },​\n    { name: \"vector\", data_type: DataType.Int64, dim: 5 },​\n​\n    { name: \"age\", data_type: DataType.FloatVector, nullable: true },​\n  ],​\n​\n  index_params: [​\n    {​\n      index_name: \"vector_inde\",​\n      field_name: \"vector\",​\n      metric_type: MetricType.L2,​\n      index_type: IndexType.AUTOINDEX,​\n    },​\n  ],​\n});​\n​\n\n","export pkField='{​\n    \"fieldName\": \"id\",​\n    \"dataType\": \"Int64\",​\n    \"isPrimary\": true​\n}'​\n​\nexport vectorField='{​\n    \"fieldName\": \"vector\",​\n    \"dataType\": \"FloatVector\",​\n    \"elementTypeParams\": {​\n        \"dim\": 5​\n    }​\n}'​\n​\nexport nullField='{​\n    \"fieldName\": \"age\",​\n    \"dataType\": \"Int64\",​\n    \"nullable\": true​\n}'​\n​\nexport schema=\"{​\n    \\\"autoID\\\": false,​\n    \\\"fields\\\": [​\n        $pkField,​\n        $vectorField,​\n        $nullField​\n    ]​\n}\"​\n​\nexport indexParams='[​\n        {​\n            \"fieldName\": \"vector\",​\n            \"metricType\": \"L2\",​\n            \"indexType\": \"IVF_FLAT\",​\n            \"params\":{\"nlist\": 128}​\n        }​\n    ]'​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"user_profiles_null\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n\n","data = [​\n    {\"id\": 1, \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5], \"age\": 30},​\n    {\"id\": 2, \"vector\": [0.2, 0.3, 0.4, 0.5, 0.6], \"age\": None},​\n    {\"id\": 3, \"vector\": [0.3, 0.4, 0.5, 0.6, 0.7]}​\n]​\n​\nclient.insert(collection_name=\"user_profiles_null\", data=data)​\n\n","import com.google.gson.Gson;​\nimport com.google.gson.JsonObject;​\n​\nimport io.milvus.v2.service.vector.request.InsertReq;​\nimport io.milvus.v2.service.vector.response.InsertResp;​\n​\nList<JsonObject> rows = new ArrayList<>();​\nGson gson = new Gson();​\nrows.add(gson.fromJson(\"{\\\"id\\\": 1, \\\"vector\\\": [0.1, 0.2, 0.3, 0.4, 0.5], \\\"age\\\": 30}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"id\\\": 2, \\\"vector\\\": [0.2, 0.3, 0.4, 0.5, 0.6], \\\"age\\\": null}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"id\\\": 3, \\\"vector\\\": [0.3, 0.4, 0.5, 0.6, 0.7]}\", JsonObject.class));​\n​\nInsertResp insertR = client.insert(InsertReq.builder()​\n        .collectionName(\"user_profiles_null\")​\n        .data(rows)​\n        .build());​\n\n","const data = [​\n  { id: 1, vector: [0.1, 0.2, 0.3, 0.4, 0.5], age: 30 },​\n  { id: 2, vector: [0.2, 0.3, 0.4, 0.5, 0.6], age: null },​\n  { id: 3, vector: [0.3, 0.4, 0.5, 0.6, 0.7] },​\n];​\n​\nclient.insert({​\n  collection_name: \"user_profiles_null\",​\n  data: data,​\n});​\n​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"data\": [​\n        {\"id\": 1, \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5], \"age\": 30},​\n        {\"id\": 2, \"vector\": [0.2, 0.3, 0.4, 0.5, 0.6], \"age\": null}, ​\n        {\"id\": 3, \"vector\": [0.3, 0.4, 0.5, 0.6, 0.7]} ​\n    ],​\n    \"collectionName\": \"user_profiles_null\"​\n}'​\n\n","res = client.search(​\n    collection_name=\"user_profiles_null\",​\n    data=[[0.1, 0.2, 0.4, 0.3, 0.128]],​\n    limit=2,​\n    search_params={\"params\": {\"nprobe\": 16}},​\n    output_fields=[\"id\", \"age\"]​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"[{'id': 1, 'distance': 0.15838398039340973, 'entity': {'age': 30, 'id': 1}}, {'id': 2, 'distance': 0.28278401494026184, 'entity': {'age': None, 'id': 2}}]\"] ​\n\n","import io.milvus.v2.service.vector.request.SearchReq;​\nimport io.milvus.v2.service.vector.request.data.FloatVec;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nMap<String,Object> params = new HashMap<>();​\nparams.put(\"nprobe\", 16);​\nSearchResp resp = client.search(SearchReq.builder()​\n        .collectionName(\"user_profiles_null\")​\n        .annsField(\"vector\")​\n        .data(Collections.singletonList(new FloatVec(new float[]{0.1f, 0.2f, 0.3f, 0.4f, 0.5f})))​\n        .topK(2)​\n        .searchParams(params)​\n        .outputFields(Arrays.asList(\"id\", \"age\"))​\n        .build());​\n​\nSystem.out.println(resp.getSearchResults());​\n​\n// Output​\n//​\n// [[SearchResp.SearchResult(entity={id=1, age=30}, score=0.0, id=1), SearchResp.SearchResult(entity={id=2, age=null}, score=0.050000004, id=2)]]​\n\n","client.search({​\n    collection_name: 'user_profiles_null',​\n    data: [0.3, -0.6, 0.1, 0.3, 0.5],​\n    limit: 2,​\n    output_fields: ['age', 'id'],​\n    filter: '25 <= age <= 35',​\n    params: {​\n        nprobe: 16​\n    }​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"user_profiles_null\",​\n    \"data\": [​\n        [0.1, -0.2, 0.3, 0.4, 0.5]​\n    ],​\n    \"annsField\": \"vector\",​\n    \"limit\": 5,​\n    \"outputFields\": [\"id\", \"age\"]​\n}'​\n​\n#{\"code\":0,\"cost\":0,\"data\":[{\"age\":30,\"distance\":0.16000001,\"id\":1},{\"age\":null,\"distance\":0.28999996,\"id\":2},{\"age\":null,\"distance\":0.52000004,\"id\":3}]}​\n\n","# Reviewing previously inserted data:​\n# {\"id\": 1, \"vector\": [0.1, 0.2, ..., 0.128], \"age\": 30}​\n# {\"id\": 2, \"vector\": [0.2, 0.3, ..., 0.129], \"age\": None}​\n# {\"id\": 3, \"vector\": [0.3, 0.4, ..., 0.130], \"age\": None}  # Omitted age  column is treated as None​\n​\nresults = client.query(​\n    collection_name=\"user_profiles_null\",​\n    filter=\"age >= 0\",​\n    output_fields=[\"id\", \"age\"]​\n)​\n​\n# Example output:​\n# [​\n#     {\"id\": 1, \"age\": 30}​\n# ]​\n# Note: Entities with `age` as `null` (id 2 and 3) will not appear in the result.​\n\n","import io.milvus.v2.service.vector.request.QueryReq;​\nimport io.milvus.v2.service.vector.response.QueryResp;​\n​\nQueryResp resp = client.query(QueryReq.builder()​\n        .collectionName(\"user_profiles_null\")​\n        .filter(\"age >= 0\")​\n        .outputFields(Arrays.asList(\"id\", \"age\"))​\n        .build());​\n​\nSystem.out.println(resp.getQueryResults());​\n​\n// Output​\n//​\n// [QueryResp.QueryResult(entity={id=1, age=30})]​\n\n","const results = await client.query(​\n    collection_name: \"user_profiles_null\",​\n    filter: \"age >= 0\",​\n    output_fields: [\"id\", \"age\"]​\n);​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"user_profiles_null\",​\n    \"filter\": \"age >= 0\",​\n    \"outputFields\": [\"id\", \"age\"]​\n}'​\n​\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":30,\"id\":1}]}​\n\n","null_results = client.query(​\n    collection_name=\"user_profiles_null\",​\n    filter=\"\",​\n    output_fields=[\"id\", \"age\"]​\n)​\n​\n# Example output:​\n# [{\"id\": 2, \"age\": None}, {\"id\": 3, \"age\": None}]​\n\n","QueryResp resp = client.query(QueryReq.builder()​\n        .collectionName(\"user_profiles_null\")​\n        .filter(\"\")​\n        .outputFields(Arrays.asList(\"id\", \"age\"))​\n        .limit(10)​\n        .build());​\n​\nSystem.out.println(resp.getQueryResults());​\n\n","const results = await client.query(​\n    collection_name: \"user_profiles_null\",​\n    filter: \"\",​\n    output_fields: [\"id\", \"age\"]​\n);​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"user_profiles_null\",​\n    \"expr\": \"\",​\n    \"outputFields\": [\"id\", \"age\"]​\n}'​\n​\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":30,\"id\":1},{\"age\":null,\"id\":2},{\"age\":null,\"id\":3}]}​\n\n","schema = client.create_schema(​\n    auto_id=False,​\n    enable_dynamic_schema=True,​\n)​\n​\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)​\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=5)​\nschema.add_field(field_name=\"age\", datatype=DataType.INT64, default_value=18)​\nschema.add_field(field_name=\"status\", datatype=DataType.VARCHAR, default_value=\"active\", max_length=10)​\n​\nindex_params = client.prepare_index_params()​\nindex_params.add_index(field_name=\"vector\", index_type=\"IVF_FLAT\", metric_type=\"L2\", params={ \"nlist\": 128 })​\n​\nclient.create_collection(collection_name=\"user_profiles_default\", schema=schema, index_params=index_params)​\n\n","import io.milvus.v2.common.DataType;​\nimport io.milvus.v2.common.IndexParam;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nimport java.util.*;​\n​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\nschema.setEnableDynamicField(true);​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"id\")​\n        .dataType(DataType.Int64)​\n        .isPrimaryKey(true)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"vector\")​\n        .dataType(DataType.FloatVector)​\n        .dimension(5)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"age\")​\n        .dataType(DataType.Int64)​\n        .defaultValue(18L)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"status\")​\n        .dataType(DataType.VarChar)​\n        .maxLength(10)​\n        .defaultValue(\"active\")​\n        .build());​\n​\nList<IndexParam> indexes = new ArrayList<>();​\nMap<String,Object> extraParams = new HashMap<>();​\nextraParams.put(\"nlist\", 128);​\nindexes.add(IndexParam.builder()​\n        .fieldName(\"vector\")​\n        .indexType(IndexParam.IndexType.IVF_FLAT)​\n        .metricType(IndexParam.MetricType.L2)​\n        .extraParams(extraParams)​\n        .build());​\n​\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()​\n        .collectionName(\"user_profiles_default\")​\n        .collectionSchema(schema)​\n        .indexParams(indexes)​\n        .build();​\nclient.createCollection(requestCreate);​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst client = new MilvusClient({​\n  address: \"http://localhost:19530\",​\n  token: \"root:Milvus\",​\n});​\n​\nawait client.createCollection({​\n  collection_name: \"user_profiles_default\",​\n  schema: [​\n    {​\n      name: \"id\",​\n      is_primary_key: true,​\n      data_type: DataType.int64,​\n    },​\n    { name: \"vector\", data_type: DataType.FloatVector, dim: 5 },​\n    { name: \"age\", data_type: DataType.Int64, default_value: 18 },​\n    { name: 'status', data_type: DataType.VarChar, max_length: 30, default_value: 'active'},​\n  ],​\n​\n  index_params: [​\n    {​\n      index_name: \"vector_inde\",​\n      field_name: \"vector\",​\n      metric_type: MetricType.L2,​\n      index_type: IndexType.IVF_FLAT,​\n    },​\n  ],​\n});​\n​\n\n","export pkField='{​\n    \"fieldName\": \"id\",​\n    \"dataType\": \"Int64\",​\n    \"isPrimary\": true​\n}'​\n​\nexport vectorField='{​\n    \"fieldName\": \"vector\",​\n    \"dataType\": \"FloatVector\",​\n    \"elementTypeParams\": {​\n        \"dim\": 5​\n    }​\n}'​\n​\nexport defaultValueField1='{​\n    \"fieldName\": \"age\",​\n    \"dataType\": \"Int64\",​\n    \"defaultValue\": 18​\n}'​\n​\nexport defaultValueField2='{​\n    \"fieldName\": \"status\",​\n    \"dataType\": \"VarChar\",​\n    \"defaultValue\": \"active\",​\n    \"elementTypeParams\": {​\n        \"max_length\": 10​\n    }​\n}'​\n​\nexport schema=\"{​\n    \\\"autoID\\\": false,​\n    \\\"fields\\\": [​\n        $pkField,​\n        $vectorField,​\n        $defaultValueField1,​\n        $defaultValueField2​\n    ]​\n}\"​\n​\nexport indexParams='[​\n        {​\n            \"fieldName\": \"vector\",​\n            \"metricType\": \"L2\",​\n            \"indexType\": \"IVF_FLAT\",​\n            \"params\":{\"nlist\": 128}​\n        }​\n    ]'​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"user_profiles_default\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n\n","data = [​\n    {\"id\": 1, \"vector\": [0.1, 0.2, ..., 0.128], \"age\": 30, \"status\": \"premium\"},​\n    {\"id\": 2, \"vector\": [0.2, 0.3, ..., 0.129]},\n    {\"id\": 3, \"vector\": [0.3, 0.4, ..., 0.130], \"age\": 25, \"status\": None}, \n    {\"id\": 4, \"vector\": [0.4, 0.5, ..., 0.131], \"age\": None, \"status\": \"inactive\"} \n]​\n​\nclient.insert(collection_name=\"user_profiles_default\", data=data)​\n\n","import com.google.gson.Gson;​\nimport com.google.gson.JsonObject;​\n​\nimport io.milvus.v2.service.vector.request.InsertReq;​\nimport io.milvus.v2.service.vector.response.InsertResp;​\n​\nList<JsonObject> rows = new ArrayList<>();​\nGson gson = new Gson();​\nrows.add(gson.fromJson(\"{\\\"id\\\": 1, \\\"vector\\\": [0.1, 0.2, 0.3, 0.4, 0.5], \\\"age\\\": 30, \\\"status\\\": \\\"premium\\\"}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"id\\\": 2, \\\"vector\\\": [0.2, 0.3, 0.4, 0.5, 0.6]}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"id\\\": 3, \\\"vector\\\": [0.3, 0.4, 0.5, 0.6, 0.7], \\\"age\\\": 25, \\\"status\\\": null}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"id\\\": 4, \\\"vector\\\": [0.4, 0.5, 0.6, 0.7, 0.8], \\\"age\\\": null, \\\"status\\\": \\\"inactive\\\"}\", JsonObject.class));​\n​\nInsertResp insertR = client.insert(InsertReq.builder()​\n        .collectionName(\"user_profiles_default\")​\n        .data(rows)​\n        .build());​\n\n","const data = [​\n    {\"id\": 1, \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5], \"age\": 30, \"status\": \"premium\"},​\n    {\"id\": 2, \"vector\": [0.2, 0.3, 0.4, 0.5, 0.6]}, ​\n    {\"id\": 3, \"vector\": [0.3, 0.4, 0.5, 0.6, 0.7], \"age\": 25, \"status\": null}, ​\n    {\"id\": 4, \"vector\": [0.4, 0.5, 0.6, 0.7, 0.8], \"age\": null, \"status\": \"inactive\"}  ​\n];​\n​\nclient.insert({​\n  collection_name: \"user_profiles_default\",​\n  data: data,​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"data\": [​\n        {\"id\": 1, \"vector\": [0.1, 0.2, 0.3, 0.4, 0.5], \"age\": 30, \"status\": \"premium\"},​\n        {\"id\": 2, \"vector\": [0.2, 0.3, 0.4, 0.5, 0.6]},​\n        {\"id\": 3, \"vector\": [0.3, 0.4, 0.5, 0.6, 0.7], \"age\": 25, \"status\": null}, ​\n        {\"id\": 4, \"vector\": [0.4, 0.5, 0.6, 0.7, 0.8], \"age\": null, \"status\": \"inactive\"}      ​\n    ],​\n    \"collectionName\": \"user_profiles_default\"​\n}'​\n\n","res = client.search(​\n    collection_name=\"user_profiles_default\",​\n    data=[[0.1, 0.2, 0.4, 0.3, 0.128]],​\n    search_params={\"params\": {\"nprobe\": 16}},​\n    filter=\"age == 18\",  # 18 is the default value of the `age` field​\n    limit=10,​\n    output_fields=[\"id\", \"age\", \"status\"]​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"[{'id': 2, 'distance': 0.28278401494026184, 'entity': {'id': 2, 'age': 18, 'status': 'active'}}, {'id': 4, 'distance': 0.8315839767456055, 'entity': {'id': 4, 'age': 18, 'status': 'inactive'}}]\"] ​\n​\n\n","import io.milvus.v2.service.vector.request.SearchReq;​\nimport io.milvus.v2.service.vector.request.data.FloatVec;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nMap<String,Object> params = new HashMap<>();​\nparams.put(\"nprobe\", 16);​\nSearchResp resp = client.search(SearchReq.builder()​\n        .collectionName(\"user_profiles_default\")​\n        .annsField(\"vector\")​\n        .data(Collections.singletonList(new FloatVec(new float[]{0.1f, 0.2f, 0.3f, 0.4f, 0.5f})))​\n        .searchParams(params)​\n        .filter(\"age == 18\")​\n        .topK(10)​\n        .outputFields(Arrays.asList(\"id\", \"age\", \"status\"))​\n        .build());​\n​\nSystem.out.println(resp.getSearchResults());​\n​\n// Output​\n//​\n// [[SearchResp.SearchResult(entity={id=2, age=18, status=active}, score=0.050000004, id=2), SearchResp.SearchResult(entity={id=4, age=18, status=inactive}, score=0.45000002, id=4)]]​\n\n","client.search({​\n    collection_name: 'user_profiles_default',​\n    data: [0.3, -0.6, 0.1, 0.3, 0.5],​\n    limit: 2,​\n    output_fields: ['age', 'id', 'status'],​\n    filter: 'age == 18',​\n    params: {​\n        nprobe: 16​\n    }​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"user_profiles_default\",​\n    \"data\": [​\n        [0.1, 0.2, 0.3, 0.4, 0.5]​\n    ],​\n    \"annsField\": \"vector\",​\n    \"limit\": 5,​\n    \"filter\": \"age == 18\",​\n    \"outputFields\": [\"id\", \"age\", \"status\"]​\n}'​\n​\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":18,\"distance\":0.050000004,\"id\":2,\"status\":\"active\"},{\"age\":18,\"distance\":0.45000002,\"id\":4,\"status\":\"inactive\"}]}​\n\n","# Query all entities where `age` equals the default value (18)​\ndefault_age_results = client.query(​\n    collection_name=\"user_profiles_default\",​\n    filter=\"age == 18\",​\n    output_fields=[\"id\", \"age\", \"status\"]​\n)​\n​\n# Query all entities where `status` equals the default value (\"active\")​\ndefault_status_results = client.query(​\n    collection_name=\"user_profiles_default\",​\n    filter='status == \"active\"',​\n    output_fields=[\"id\", \"age\", \"status\"]​\n)​\n\n","import io.milvus.v2.service.vector.request.QueryReq;​\nimport io.milvus.v2.service.vector.response.QueryResp;​\n​\nQueryResp ageResp = client.query(QueryReq.builder()​\n        .collectionName(\"user_profiles_default\")​\n        .filter(\"age == 18\")​\n        .outputFields(Arrays.asList(\"id\", \"age\", \"status\"))​\n        .build());​\n​\nSystem.out.println(ageResp.getQueryResults());​\n​\n// Output​\n//​\n// [QueryResp.QueryResult(entity={id=2, age=18, status=active}), QueryResp.QueryResult(entity={id=4, age=18, status=inactive})]​\n​\nQueryResp statusResp = client.query(QueryReq.builder()​\n        .collectionName(\"user_profiles_default\")​\n        .filter(\"status == \\\"active\\\"\")​\n        .outputFields(Arrays.asList(\"id\", \"age\", \"status\"))​\n        .build());​\n​\nSystem.out.println(statusResp.getQueryResults());​\n​\n// Output​\n//​\n// [QueryResp.QueryResult(entity={id=2, age=18, status=active}), QueryResp.QueryResult(entity={id=3, age=25, status=active})]​\n\n","// Query all entities where `age` equals the default value (18)​\nconst default_age_results = await client.query(​\n    collection_name: \"user_profiles_default\",​\n    filter: \"age == 18\",​\n    output_fields: [\"id\", \"age\", \"status\"]​\n);​\n// Query all entities where `status` equals the default value (\"active\")​\nconst default_status_results = await client.query(​\n    collection_name: \"user_profiles_default\",​\n    filter: 'status == \"active\"',​\n    output_fields: [\"id\", \"age\", \"status\"]​\n)​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"user_profiles_default\",​\n    \"filter\": \"age == 18\",​\n    \"outputFields\": [\"id\", \"age\", \"status\"]​\n}'​\n​\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":18,\"id\":2,\"status\":\"active\"},{\"age\":18,\"id\":4,\"status\":\"inactive\"}]}​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"user_profiles_default\",​\n    \"filter\": \"status == \\\"active\\\"\",​\n    \"outputFields\": [\"id\", \"age\", \"status\"]​\n}'​\n​\n# {\"code\":0,\"cost\":0,\"data\":[{\"age\":18,\"id\":2,\"status\":\"active\"},{\"age\":25,\"id\":3,\"status\":\"active\"}]}​\n\n"],"headingContent":"Nullable & Default​","anchorList":[{"label":"Nullable & Default","href":"Nullable--Default​","type":1,"isActive":false},{"label":"制限事項","href":"Limits","type":2,"isActive":false},{"label":"Nullable属性","href":"Nullable-attribute","type":2,"isActive":false},{"label":"デフォルト値","href":"Default-values​","type":2,"isActive":false},{"label":"適用可能なルール","href":"Applicable-rules","type":2,"isActive":false}]}