{"codeList":["from pymilvus import MilvusClient, DataType​\n​\nclient = MilvusClient(uri=\"http://localhost:19530\")​\n​\nschema = client.create_schema(​\n    auto_id=False,​\n    enable_dynamic_fields=True,​\n)​\n​\nschema.add_field(field_name=\"age\", datatype=DataType.INT64)​\nschema.add_field(field_name=\"price\", datatype=DataType.FLOAT)​\nschema.add_field(field_name=\"pk\", datatype=DataType.INT64, is_primary=True)​\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=3)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\n​\nimport io.milvus.v2.common.DataType;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .build());​\n        ​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\nschema.setEnableDynamicField(true);​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"age\")​\n        .dataType(DataType.Int64)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"price\")​\n        .dataType(DataType.Float)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"pk\")​\n        .dataType(DataType.Int64)​\n        .isPrimaryKey(true)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"embedding\")​\n        .dataType(DataType.FloatVector)​\n        .dimension(3)​\n        .build());​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\nconst schema = [​\n  {​\n    name: \"age\",​\n    data_type: DataType.Int64,​\n  },​\n  {​\n    name: \"price\",​\n    data_type: DataType.Float,​\n  },​\n  {​\n    name: \"pk\",​\n    data_type: DataType.Int64,​\n    is_primary_key: true,​\n  },​\n  {​\n    name: \"embedding\",​\n    data_type: DataType.FloatVector,​\n    dim: 3,​\n  },​\n];​\n​\n\n","export int64Field='{​\n    \"fieldName\": \"age\",​\n    \"dataType\": \"Int64\"​\n}'​\n​\nexport floatField='{​\n    \"fieldName\": \"price\",​\n    \"dataType\": \"Float\"​\n}'​\n​\nexport pkField='{​\n    \"fieldName\": \"pk\",​\n    \"dataType\": \"Int64\",​\n    \"isPrimary\": true​\n}'​\n​\nexport vectorField='{​\n    \"fieldName\": \"embedding\",​\n    \"dataType\": \"FloatVector\",​\n    \"elementTypeParams\": {​\n        \"dim\": 3​\n    }​\n}'​\n​\nexport schema=\"{​\n    \\\"autoID\\\": false,​\n    \\\"fields\\\": [​\n        $int64Field,​\n        $floatField,​\n        $pkField,​\n        $vectorField​\n    ]​\n}\"​\n\n","index_params = client.prepare_index_params()​\n​\nindex_params.add_index(​\n    field_name=\"age\",​\n    index_type=\"AUTOINDEX\",​\n    index_name=\"inverted_index\"​\n)​\n\n","import io.milvus.v2.common.IndexParam;​\nimport java.util.*;​\n​\nList<IndexParam> indexes = new ArrayList<>();​\nindexes.add(IndexParam.builder()​\n        .fieldName(\"age\")​\n        .indexType(IndexParam.IndexType.AUTOINDEX)​\n        .build());​\n​\n\n","const indexParams = {​\n    index_name: 'inverted_index',​\n    field_name: 'age',​\n    index_type: IndexType.AUTOINDEX,​\n);​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"age\",​\n            \"indexName\": \"inverted_index\",​\n            \"indexType\": \"AUTOINDEX\"​\n        }​\n    ]'​\n\n","# Add vector index​\nindex_params.add_index(​\n    field_name=\"embedding\",​\n    index_type=\"AUTOINDEX\",  # Use automatic indexing to simplify complex index settings​\n    metric_type=\"COSINE\"  # Specify similarity metric type, options include L2, COSINE, or IP​\n)​\n\n","indexes.add(IndexParam.builder()​\n        .fieldName(\"embedding\")​\n        .indexType(IndexParam.IndexType.AUTOINDEX)​\n        .metricType(IndexParam.MetricType.COSINE)​\n        .build());​\n\n","import { IndexType } from \"@zilliz/milvus2-sdk-node\";​\nconst indexParams = [​\n  {​\n    field_name: \"age\",​\n    index_name: \"inverted_index\",​\n    index_type: IndexType.AUTOINDEX,​\n  },​\n  {​\n    field_name: \"embedding\",​\n    metric_type: \"COSINE\",​\n    index_type: IndexType.AUTOINDEX,​\n  },​\n];​\n​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"age\",​\n            \"indexName\": \"inverted_index\",​\n            \"indexType\": \"AUTOINDEX\"​\n        },​\n        {​\n            \"fieldName\": \"embedding\",​\n            \"metricType\": \"COSINE\",​\n            \"indexType\": \"AUTOINDEX\"​\n        }​\n    ]'​\n\n","# Create Collection​\nclient.create_collection(​\n    collection_name=\"your_collection_name\",​\n    schema=schema,​\n    index_params=index_params​\n)​\n\n","CreateCollectionReq requestCreate = CreateCollectionReq.builder()​\n        .collectionName(\"my_scalar_collection\")​\n        .collectionSchema(schema)​\n        .indexParams(indexes)​\n        .build();​\nclient.createCollection(requestCreate);​\n\n","client.create_collection({​\n    collection_name: \"my_scalar_collection\",​\n    schema: schema,​\n    index_params: indexParams​\n})​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"my_scalar_collection\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n\n","data = [​\n    {\"age\": 25, \"price\": 99.99, \"pk\": 1, \"embedding\": [0.1, 0.2, 0.3]},​\n    {\"age\": 30, \"price\": 149.50, \"pk\": 2, \"embedding\": [0.4, 0.5, 0.6]},​\n    {\"age\": 35, \"price\": 199.99, \"pk\": 3, \"embedding\": [0.7, 0.8, 0.9]},​\n]​\n​\nclient.insert(​\n    collection_name=\"my_scalar_collection\",​\n    data=data​\n)​\n\n","import com.google.gson.Gson;​\nimport com.google.gson.JsonObject;​\n​\nimport io.milvus.v2.service.vector.request.InsertReq;​\nimport io.milvus.v2.service.vector.response.InsertResp;​\n​\nList<JsonObject> rows = new ArrayList<>();​\nGson gson = new Gson();​\nrows.add(gson.fromJson(\"{\\\"age\\\": 25, \\\"price\\\": 99.99, \\\"pk\\\": 1, \\\"embedding\\\": [0.1, 0.2, 0.3]}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"age\\\": 30, \\\"price\\\": 149.50, \\\"pk\\\": 2, \\\"embedding\\\": [0.4, 0.5, 0.6]}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"age\\\": 35, \\\"price\\\": 199.99, \\\"pk\\\": 3, \\\"embedding\\\": [0.7, 0.8, 0.9]}\", JsonObject.class));​\n​\nInsertResp insertR = client.insert(InsertReq.builder()​\n        .collectionName(\"my_scalar_collection\")​\n        .data(rows)​\n        .build());​\n\n","const data = [​\n  { age: 25, price: 99.99, pk: 1, embedding: [0.1, 0.2, 0.3] },​\n  { age: 30, price: 149.5, pk: 2, embedding: [0.4, 0.5, 0.6] },​\n  { age: 35, price: 199.99, pk: 3, embedding: [0.7, 0.8, 0.9] },​\n];​\n​\nclient.insert({​\n  collection_name: \"my_scalar_collection\",​\n  data: data,​\n});​\n​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"data\": [​\n        {\"age\": 25, \"price\": 99.99, \"pk\": 1, \"embedding\": [0.1, 0.2, 0.3]},​\n        {\"age\": 30, \"price\": 149.50, \"pk\": 2, \"embedding\": [0.4, 0.5, 0.6]},​\n        {\"age\": 35, \"price\": 199.99, \"pk\": 3, \"embedding\": [0.7, 0.8, 0.9]}       ​\n    ],​\n    \"collectionName\": \"my_scalar_collection\"​\n}'​\n\n","filter = \"30 <= age <= 40\"​\n​\nres = client.query(​\n    collection_name=\"my_scalar_collection\",​\n    filter=filter,​\n    output_fields=[\"age\",\"price\"]​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"{'age': 30, 'price': np.float32(149.5), 'pk': 2}\", \"{'age': 35, 'price': np.float32(199.99), 'pk': 3}\"] ​\n\n","import io.milvus.v2.service.vector.request.QueryReq;​\nimport io.milvus.v2.service.vector.response.QueryResp;​\n​\nString filter = \"30 <= age <= 40\";​\n​\nQueryResp resp = client.query(QueryReq.builder()​\n        .collectionName(\"my_scalar_collection\")​\n        .filter(filter)​\n        .outputFields(Arrays.asList(\"age\", \"price\"))​\n        .build());​\nSystem.out.println(resp.getQueryResults());​\n​\n// Output​\n//​\n// [QueryResp.QueryResult(entity={price=149.5, pk=2, age=30}), QueryResp.QueryResult(entity={price=199.99, pk=3, age=35})]​\n\n","client.query({​\n    collection_name: 'my_scalar_collection',​\n    filter: '30 <= age <= 40',​\n    output_fields: ['age', 'price']​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_scalar_collection\",​\n    \"filter\": \"30 <= age <= 40\",​\n    \"outputFields\": [\"age\",\"price\"]​\n}'​\n​\n## {\"code\":0,\"cost\":0,\"data\":[{\"age\":30,\"pk\":2,\"price\":149.5},{\"age\":35,\"pk\":3,\"price\":199.99}]}​\n\n","filter = \"25 <= age <= 35\"​\n​\nres = client.search(​\n    collection_name=\"my_scalar_collection\",​\n    data=[[0.3, -0.6, 0.1]],​\n    limit=5,​\n    search_params={\"params\": {\"nprobe\": 10}},​\n    output_fields=[\"age\",\"price\"],​\n    filter=filter​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"[{'id': 1, 'distance': -0.06000000238418579, 'entity': {'age': 25, 'price': 99.98999786376953}}, {'id': 2, 'distance': -0.12000000476837158, 'entity': {'age': 30, 'price': 149.5}}, {'id': 3, 'distance': -0.18000000715255737, 'entity': {'age': 35, 'price': 199.99000549316406}}]\"]​\n\n","import io.milvus.v2.service.vector.request.SearchReq;​\nimport io.milvus.v2.service.vector.request.data.FloatVec;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nString filter = \"25 <= age <= 35\";​\n​\nSearchResp resp = client.search(SearchReq.builder()​\n        .collectionName(\"my_scalar_collection\")​\n        .annsField(\"embedding\")​\n        .data(Collections.singletonList(new FloatVec(new float[]{0.3f, -0.6f, 0.1f})))​\n        .topK(5)​\n        .outputFields(Arrays.asList(\"age\", \"price\"))​\n        .filter(filter)​\n        .build());​\n​\nSystem.out.println(resp.getSearchResults());​\n​\n// Output​\n//​\n// [[SearchResp.SearchResult(entity={price=199.99, age=35}, score=-0.19054288, id=3), SearchResp.SearchResult(entity={price=149.5, age=30}, score=-0.20163085, id=2), SearchResp.SearchResult(entity={price=99.99, age=25}, score=-0.2364331, id=1)]]​\n\n","client.search({​\n    collection_name: 'my_scalar_collection',​\n    data: [0.3, -0.6, 0.1],​\n    limit: 5,​\n    output_fields: ['age', 'price'],​\n    filter: '25 <= age <= 35'​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_scalar_collection\",​\n    \"data\": [​\n        [0.3, -0.6, 0.1]​\n    ],​\n    \"annsField\": \"embedding\",​\n    \"limit\": 5,​\n    \"outputFields\": [\"age\", \"price\"]​\n}'​\n​\n## {\"code\":0,\"cost\":0,\"data\":[{\"age\":35,\"distance\":-0.19054288,\"id\":3,\"price\":199.99},{\"age\":30,\"distance\":-0.20163085,\"id\":2,\"price\":149.5},{\"age\":25,\"distance\":-0.2364331,\"id\":1,\"price\":99.99}]}​\n\n"],"headingContent":"Number Field​","anchorList":[{"label":"数値フィールド","href":"Number-Field​","type":1,"isActive":false},{"label":"サポートされる数値フィールドタイプ","href":"Supported-number-field-types​","type":2,"isActive":false},{"label":"数値フィールドの追加","href":"Add-number-field​","type":2,"isActive":false},{"label":"インデックス・パラメータの設定","href":"Set-index-params​","type":2,"isActive":false},{"label":"コレクションの作成","href":"Create-collection​","type":2,"isActive":false},{"label":"データの挿入","href":"Insert-data​","type":2,"isActive":false},{"label":"検索とクエリ","href":"Search-and-query​","type":2,"isActive":false}]}