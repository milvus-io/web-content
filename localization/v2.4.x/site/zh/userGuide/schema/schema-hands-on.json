{"codeList":["from pymilvus import MilvusClient, DataType​\n​\ncollection_name = \"my_collection\"​\n​\n# client = MilvusClient(uri=\"http://localhost:19530\")​\nclient = MilvusClient(uri=\"./milvus_demo.db\")​\n​\nschema = MilvusClient.create_schema(​\n    auto_id=False,​\n)​\n​\nschema.add_field(field_name=\"article_id\", datatype=DataType.INT64, is_primary=True, description=\"article id\")​\nschema.add_field(field_name=\"title\", datatype=DataType.VARCHAR, max_length=200, description=\"article title\")​\nschema.add_field(field_name=\"author_info\", datatype=DataType.JSON, description=\"author information\")​\nschema.add_field(field_name=\"publish_ts\", datatype=DataType.INT32, description=\"publish timestamp\")​\nschema.add_field(field_name=\"image_url\", datatype=DataType.VARCHAR,  max_length=500, description=\"image URL\")​\nschema.add_field(field_name=\"image_vector\", datatype=DataType.FLOAT_VECTOR, dim=768, description=\"image vector\")​\nschema.add_field(field_name=\"summary\", datatype=DataType.VARCHAR, max_length=1000, description=\"article summary\")​\nschema.add_field(field_name=\"summary_dense_vector\", datatype=DataType.FLOAT_VECTOR, dim=768, description=\"summary dense vector\")​\nschema.add_field(field_name=\"summary_sparse_vector\", datatype=DataType.SPARSE_FLOAT_VECTOR, description=\"summary sparse vector\")​\n\n","index_params = client.prepare_index_params()​\n​\nindex_params.add_index(​\n    field_name=\"image_vector\",​\n    index_type=\"AUTOINDEX\",​\n    metric_type=\"IP\",​\n)​\nindex_params.add_index(​\n    field_name=\"summary_dense_vector\",​\n    index_type=\"AUTOINDEX\",​\n    metric_type=\"IP\",​\n)​\nindex_params.add_index(​\n    field_name=\"summary_sparse_vector\",​\n    index_type=\"SPARSE_INVERTED_INDEX\",​\n    metric_type=\"IP\",​\n)​\nindex_params.add_index(​\n    field_name=\"publish_ts\",​\n    index_type=\"INVERTED\",​\n)​\n\n","client.create_collection(​\n    collection_name=collection_name,​\n    schema=schema,​\n    index_params=index_params,​\n)​\n\n","collection_desc = client.describe_collection(​\n    collection_name=collection_name​\n)​\nprint(collection_desc)​\n\n"],"headingContent":"Schema Design Hands-On​","anchorList":[{"label":"Schema 设计实践","href":"Schema-Design-Hands-On​","type":1,"isActive":false},{"label":"举例说明：新闻搜索","href":"An-Example-News-Search​","type":1,"isActive":false},{"label":"如何实施示例 Schema","href":"How-to-Implement-the-Example-Schema​","type":1,"isActive":false},{"label":"创建 Schema","href":"Create-Schema​","type":2,"isActive":false},{"label":"定义索引","href":"Define-Index​","type":2,"isActive":false},{"label":"创建 Collections","href":"Create-Collection​","type":2,"isActive":false},{"label":"其他注意事项","href":"Other-Considerations​","type":1,"isActive":false},{"label":"加载索引","href":"Loading-Index​","type":2,"isActive":false},{"label":"如何为多租户定义数据模型","href":"How-to-Define-Data-Model-For-Multi-tenancy​","type":2,"isActive":false}]}