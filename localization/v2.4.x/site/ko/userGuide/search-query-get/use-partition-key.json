{"codeList":["from pymilvus import (​\n    MilvusClient, DataType​\n)​\n​\nclient = MilvusClient(​\n    uri=\"http://localhost:19530\",​\n    token=\"root:Milvus\"​\n)​\n​\nschema = client.create_schema()​\n​\n# Add the partition key​\nschema.add_field(​\n    field_name=\"my_varchar\", ​\n    datatype=DataType.VARCHAR, ​\n    max_length=512,​\n    # highlight-next-line​\n    is_partition_key=True,​\n)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\nimport io.milvus.v2.common.DataType;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .token(\"root:Milvus\")​\n        .build());​\n​\n// Create schema​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\n​\n// Add the partition key​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"my_varchar\")​\n        .dataType(DataType.VarChar)​\n        .maxLength(512)​\n        // highlight-next-line​\n        .isPartitionKey(true)​\n        .build());​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst address = \"http://localhost:19530\";​\nconst token = \"root:Milvus\";​\nconst client = new MilvusClient({address, token});​\n​\n// 3. Create a collection in customized setup mode​\n// 3.1 Define fields​\nconst fields = [​\n    {​\n        name: \"my_varchar\",​\n        data_type: DataType.VarChar,​\n        max_length: 512,​\n        // highlight-next-line​\n        is_partition_key: true​\n    }​\n]​\n\n","export schema='{​\n        \"autoId\": true,​\n        \"enabledDynamicField\": false,​\n        \"fields\": [​\n            {​\n                \"fieldName\": \"my_id\",​\n                \"dataType\": \"Int64\",​\n                \"isPrimary\": true​\n            },​\n            {​\n                \"fieldName\": \"my_vector\",​\n                \"dataType\": \"FloatVector\",​\n                \"elementTypeParams\": {​\n                    \"dim\": \"5\"​\n                }​\n            },​\n            {​\n                \"fieldName\": \"my_varchar\",​\n                \"dataType\": \"VarChar\",​\n                \"isPartitionKey\": true,​\n                \"elementTypeParams\": {​\n                    \"max_length\": 512​\n                }​\n            }​\n        ]​\n    }'​\n\n","client.create_collection(​\n    collection_name=\"my_collection\",​\n    schema=schema,​\n    # highlight-next-line​\n    num_partitions=1024​\n)​\n\n","import io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nCreateCollectionReq createCollectionReq = CreateCollectionReq.builder()​\n                .collectionName(\"my_collection\")​\n                .collectionSchema(schema)​\n                .numPartitions(1024)​\n                .build();​\n        client.createCollection(createCollectionReq);​\n\n","await client.create_collection({​\n    collection_name: \"my_collection\",​\n    schema: schema,​\n    num_partitions: 1024​\n})​\n\n","export params='{​\n    \"partitionsNum\": 1024​\n}'​\n​\nexport CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"myCollection\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"params\\\": $params​\n}\"​\n\n","# Filter based on a single partition key value, or​\nfilter='partition_key == \"x\" && <other conditions>'​\n​\n# Filter based on multiple partition key values​\nfilter='partition_key in [\"x\", \"y\", \"z\"] && <other conditions>'​\n\n","// Filter based on a single partition key value, or​\nString filter = \"partition_key == 'x' && <other conditions>\";​\n​\n// Filter based on multiple partition key values​\nString filter = \"partition_key in ['x', 'y', 'z'] && <other conditions>\";​\n\n","// Filter based on a single partition key value, or​\nconst filter = 'partition_key == \"x\" && <other conditions>'​\n​\n// Filter based on multiple partition key values​\nconst filter = 'partition_key in [\"x\", \"y\", \"z\"] && <other conditions>'​\n\n","# Filter based on a single partition key value, or​\nexport filter='partition_key == \"x\" && <other conditions>'​\n​\n# Filter based on multiple partition key values​\nexport filter='partition_key in [\"x\", \"y\", \"z\"] && <other conditions>'​\n\n"],"headingContent":"Use Partition Key​","anchorList":[{"label":"파티션 키 사용","href":"Use-Partition-Key​","type":1,"isActive":false},{"label":"개요","href":"Overview​","type":2,"isActive":false},{"label":"파티션 키 사용","href":"Use-Partition-Key​","type":2,"isActive":false}]}