{"codeList":["! pip install --upgrade --quiet pymilvus milvus-haystack markdown-it-py mdit_plain\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","import os\nimport urllib.request\n\nurl = \"https://www.gutenberg.org/cache/epub/7785/pg7785.txt\"\nfile_path = \"./davinci.txt\"\n\nif not os.path.exists(file_path):\n    urllib.request.urlretrieve(url, file_path)\n","from haystack import Pipeline\nfrom haystack.components.converters import MarkdownToDocument\nfrom haystack.components.embedders import OpenAIDocumentEmbedder, OpenAITextEmbedder\nfrom haystack.components.preprocessors import DocumentSplitter\nfrom haystack.components.writers import DocumentWriter\nfrom haystack.utils import Secret\n\nfrom milvus_haystack import MilvusDocumentStore\nfrom milvus_haystack.milvus_embedding_retriever import MilvusEmbeddingRetriever\n\n\ndocument_store = MilvusDocumentStore(\n    connection_args={\"uri\": \"./milvus.db\"},\n    # connection_args={\"uri\": \"http://localhost:19530\"},\n    # connection_args={\"uri\": YOUR_ZILLIZ_CLOUD_URI, \"token\": Secret.from_env_var(\"ZILLIZ_CLOUD_API_KEY\")},\n    drop_old=True,\n)\n","indexing_pipeline = Pipeline()\nindexing_pipeline.add_component(\"converter\", MarkdownToDocument())\nindexing_pipeline.add_component(\n    \"splitter\", DocumentSplitter(split_by=\"sentence\", split_length=2)\n)\nindexing_pipeline.add_component(\"embedder\", OpenAIDocumentEmbedder())\nindexing_pipeline.add_component(\"writer\", DocumentWriter(document_store))\nindexing_pipeline.connect(\"converter\", \"splitter\")\nindexing_pipeline.connect(\"splitter\", \"embedder\")\nindexing_pipeline.connect(\"embedder\", \"writer\")\nindexing_pipeline.run({\"converter\": {\"sources\": [file_path]}})\n\nprint(\"Number of documents:\", document_store.count_documents())\n","question = 'Where is the painting \"Warrior\" currently stored?'\n\nretrieval_pipeline = Pipeline()\nretrieval_pipeline.add_component(\"embedder\", OpenAITextEmbedder())\nretrieval_pipeline.add_component(\n    \"retriever\", MilvusEmbeddingRetriever(document_store=document_store, top_k=3)\n)\nretrieval_pipeline.connect(\"embedder\", \"retriever\")\n\nretrieval_results = retrieval_pipeline.run({\"embedder\": {\"text\": question}})\n\nfor doc in retrieval_results[\"retriever\"][\"documents\"]:\n    print(doc.content)\n    print(\"-\" * 10)\n","from haystack.utils import Secret\nfrom haystack.components.builders import PromptBuilder\nfrom haystack.components.generators import OpenAIGenerator\n\nprompt_template = \"\"\"Answer the following query based on the provided context. If the context does\n                     not include an answer, reply with 'I don't know'.\\n\n                     Query: {{query}}\n                     Documents:\n                     {% for doc in documents %}\n                        {{ doc.content }}\n                     {% endfor %}\n                     Answer:\n                  \"\"\"\n\nrag_pipeline = Pipeline()\nrag_pipeline.add_component(\"text_embedder\", OpenAITextEmbedder())\nrag_pipeline.add_component(\n    \"retriever\", MilvusEmbeddingRetriever(document_store=document_store, top_k=3)\n)\nrag_pipeline.add_component(\"prompt_builder\", PromptBuilder(template=prompt_template))\nrag_pipeline.add_component(\n    \"generator\",\n    OpenAIGenerator(\n        api_key=Secret.from_token(os.getenv(\"OPENAI_API_KEY\")),\n        generation_kwargs={\"temperature\": 0},\n    ),\n)\nrag_pipeline.connect(\"text_embedder.embedding\", \"retriever.query_embedding\")\nrag_pipeline.connect(\"retriever.documents\", \"prompt_builder.documents\")\nrag_pipeline.connect(\"prompt_builder\", \"generator\")\n\nresults = rag_pipeline.run(\n    {\n        \"text_embedder\": {\"text\": question},\n        \"prompt_builder\": {\"query\": question},\n    }\n)\nprint(\"RAG answer:\", results[\"generator\"][\"replies\"][0])\n"],"headingContent":"Retrieval-Augmented Generation (RAG) with Milvus and Haystack","anchorList":[{"label":"Retrieval-Augmented Generation (RAG) with Milvus and Haystack","href":"Retrieval-Augmented-Generation-RAG-with-Milvus-and-Haystack","type":1,"isActive":false},{"label":"Prerequisites","href":"Prerequisites","type":2,"isActive":false},{"label":"Prepare the data","href":"Prepare-the-data","type":2,"isActive":false},{"label":"Create the indexing Pipeline","href":"Create-the-indexing-Pipeline","type":2,"isActive":false},{"label":"Create the retrieval pipeline","href":"Create-the-retrieval-pipeline","type":2,"isActive":false},{"label":"Create the RAG pipeline","href":"Create-the-RAG-pipeline","type":2,"isActive":false}]}