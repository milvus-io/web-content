{"codeList":["%pip install -qU  langchain_milvus\n","import EmbeddingTabs from \"@theme/EmbeddingTabs\";\n\n<EmbeddingTabs/>\n","# | output: false\n# | echo: false\nfrom langchain_openai import OpenAIEmbeddings\n\nembeddings = OpenAIEmbeddings(model=\"text-embedding-3-large\")\n","from langchain_milvus import Milvus\n\n# The easiest way is to use Milvus Lite where everything is stored in a local file.\n# If you have a Milvus server you can use the server URI such as \"http://localhost:19530\".\nURI = \"./milvus_example.db\"\n\nvector_store = Milvus(\n    embedding_function=embeddings,\n    connection_args={\"uri\": URI},\n)\n","from langchain_core.documents import Document\n\nvector_store_saved = Milvus.from_documents(\n    [Document(page_content=\"foo!\")],\n    embeddings,\n    collection_name=\"langchain_example\",\n    connection_args={\"uri\": URI},\n)\n","vector_store_loaded = Milvus(\n    embeddings,\n    connection_args={\"uri\": URI},\n    collection_name=\"langchain_example\",\n)\n","from uuid import uuid4\n\nfrom langchain_core.documents import Document\n\ndocument_1 = Document(\n    page_content=\"I had chocalate chip pancakes and scrambled eggs for breakfast this morning.\",\n    metadata={\"source\": \"tweet\"},\n)\n\ndocument_2 = Document(\n    page_content=\"The weather forecast for tomorrow is cloudy and overcast, with a high of 62 degrees.\",\n    metadata={\"source\": \"news\"},\n)\n\ndocument_3 = Document(\n    page_content=\"Building an exciting new project with LangChain - come check it out!\",\n    metadata={\"source\": \"tweet\"},\n)\n\ndocument_4 = Document(\n    page_content=\"Robbers broke into the city bank and stole $1 million in cash.\",\n    metadata={\"source\": \"news\"},\n)\n\ndocument_5 = Document(\n    page_content=\"Wow! That was an amazing movie. I can't wait to see it again.\",\n    metadata={\"source\": \"tweet\"},\n)\n\ndocument_6 = Document(\n    page_content=\"Is the new iPhone worth the price? Read this review to find out.\",\n    metadata={\"source\": \"website\"},\n)\n\ndocument_7 = Document(\n    page_content=\"The top 10 soccer players in the world right now.\",\n    metadata={\"source\": \"website\"},\n)\n\ndocument_8 = Document(\n    page_content=\"LangGraph is the best framework for building stateful, agentic applications!\",\n    metadata={\"source\": \"tweet\"},\n)\n\ndocument_9 = Document(\n    page_content=\"The stock market is down 500 points today due to fears of a recession.\",\n    metadata={\"source\": \"news\"},\n)\n\ndocument_10 = Document(\n    page_content=\"I have a bad feeling I am going to get deleted :(\",\n    metadata={\"source\": \"tweet\"},\n)\n\ndocuments = [\n    document_1,\n    document_2,\n    document_3,\n    document_4,\n    document_5,\n    document_6,\n    document_7,\n    document_8,\n    document_9,\n    document_10,\n]\nuuids = [str(uuid4()) for _ in range(len(documents))]\n\nvector_store.add_documents(documents=documents, ids=uuids)\n","vector_store.delete(ids=[uuids[-1]])\n","results = vector_store.similarity_search(\n    \"LangChain provides abstractions to make working with LLMs easy\",\n    k=2,\n    filter={\"source\": \"tweet\"},\n)\nfor res in results:\n    print(f\"* {res.page_content} [{res.metadata}]\")\n","results = vector_store.similarity_search_with_score(\n    \"Will it be hot tomorrow?\", k=1, filter={\"source\": \"news\"}\n)\nfor res, score in results:\n    print(f\"* [SIM={score:3f}] {res.page_content} [{res.metadata}]\")\n","retriever = vector_store.as_retriever(search_type=\"mmr\", search_kwargs={\"k\": 1})\nretriever.invoke(\"Stealing from the bank is a crime\", filter={\"source\": \"news\"})\n","from langchain_core.documents import Document\n\ndocs = [\n    Document(page_content=\"i worked at kensho\", metadata={\"namespace\": \"harrison\"}),\n    Document(page_content=\"i worked at facebook\", metadata={\"namespace\": \"ankush\"}),\n]\nvectorstore = Milvus.from_documents(\n    docs,\n    embeddings,\n    connection_args={\"uri\": URI},\n    drop_old=True,\n    partition_key_field=\"namespace\",  # Use the \"namespace\" field as the partition key\n)\n","# This will only get documents for Ankush\nvectorstore.as_retriever(search_kwargs={\"expr\": 'namespace == \"ankush\"'}).invoke(\n    \"where did i work?\"\n)\n","# This will only get documents for Harrison\nvectorstore.as_retriever(search_kwargs={\"expr\": 'namespace == \"harrison\"'}).invoke(\n    \"where did i work?\"\n)\n"],"headingContent":"Use Milvus as a Vector Store","anchorList":[{"label":"Use Milvus as a Vector Store","href":"Use-Milvus-as-a-Vector-Store","type":1,"isActive":false},{"label":"Setup","href":"Setup","type":2,"isActive":false},{"label":"Initialization","href":"Initialization","type":2,"isActive":false},{"label":"Manage vector store","href":"Manage-vector-store","type":2,"isActive":false},{"label":"Query vector store","href":"Query-vector-store","type":2,"isActive":false},{"label":"Usage for retrieval-augmented generation","href":"Usage-for-retrieval-augmented-generation","type":2,"isActive":false},{"label":"API reference","href":"API-reference","type":2,"isActive":false}]}