{"codeList":["from pymilvus import MilvusClient, DataType​\n​\nclient = MilvusClient(uri=\"http://localhost:19530\")​\n​\n# define schema​\nschema = client.create_schema(​\n    auto_id=False,​\n    enable_dynamic_fields=True,​\n)​\n​\nschema.add_field(field_name=\"varchar_field1\", datatype=DataType.VARCHAR, max_length=100)​\nschema.add_field(field_name=\"varchar_field2\", datatype=DataType.VARCHAR, max_length=200)​\nschema.add_field(field_name=\"pk\", datatype=DataType.INT64, is_primary=True)​\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=3)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\n​\nimport io.milvus.v2.common.DataType;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .build());​\n        ​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\nschema.setEnableDynamicField(true);​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"varchar_field1\")​\n        .dataType(DataType.VarChar)​\n        .maxLength(100)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"varchar_field2\")​\n        .dataType(DataType.VarChar)​\n        .maxLength(200)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"pk\")​\n        .dataType(DataType.Int64)​\n        .isPrimaryKey(true)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"embedding\")​\n        .dataType(DataType.FloatVector)​\n        .dimension(3)​\n        .build());​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst schema = [​\n  {​\n    name: \"metadata\",​\n    data_type: DataType.JSON,​\n  },​\n  {​\n    name: \"pk\",​\n    data_type: DataType.Int64,​\n    is_primary_key: true,​\n  },​\n  {​\n    name: \"varchar_field2\",​\n    data_type: DataType.VarChar,​\n    max_length: 200,​\n  },​\n  {​\n    name: \"varchar_field1\",​\n    data_type: DataType.VarChar,​\n    max_length: 100,​\n  },​\n];​\n\n","export varcharField1='{​\n    \"fieldName\": \"varchar_field1\",​\n    \"dataType\": \"VarChar\",​\n    \"elementTypeParams\": {​\n        \"max_length\": 100​\n    }​\n}'​\n​\nexport varcharField2='{​\n    \"fieldName\": \"varchar_field2\",​\n    \"dataType\": \"VarChar\",​\n    \"elementTypeParams\": {​\n        \"max_length\": 200​\n    }​\n}'​\n​\nexport primaryField='{​\n    \"fieldName\": \"pk\",​\n    \"dataType\": \"Int64\",​\n    \"isPrimary\": true​\n}'​\n​\nexport vectorField='{​\n    \"fieldName\": \"embedding\",​\n    \"dataType\": \"FloatVector\",​\n    \"elementTypeParams\": {​\n        \"dim\": 3​\n    }​\n}'​\n​\nexport schema=\"{​\n    \\\"autoID\\\": false,​\n    \\\"fields\\\": [​\n        $varcharField1,​\n        $varcharField2,​\n        $primaryField,​\n        $vectorField​\n    ]​\n}\"​\n\n","index_params = client.prepare_index_params()​\n​\nindex_params.add_index(​\n    field_name=\"varchar_field1\",​\n    index_type=\"AUTOINDEX\",​\n    index_name=\"varchar_index\"​\n)​\n\n","​\nimport io.milvus.v2.common.IndexParam;​\nimport java.util.*;​\n​\nList<IndexParam> indexes = new ArrayList<>();​\nindexes.add(IndexParam.builder()​\n        .fieldName(\"varchar_field1\")​\n        .indexName(\"varchar_index\")​\n        .indexType(IndexParam.IndexType.AUTOINDEX)​\n        .build());​\n\n","const indexParams = [{​\n    index_name: 'varchar_index',​\n    field_name: 'varchar_field1',​\n    index_type: IndexType.AUTOINDEX,​\n)];​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"varchar_field1\",​\n            \"indexName\": \"varchar_index\",​\n            \"indexType\": \"AUTOINDEX\"​\n        }​\n    ]'​\n\n","# Add vector index​\nindex_params.add_index(​\n    field_name=\"embedding\",​\n    index_type=\"AUTOINDEX\",  # Use automatic indexing to simplify complex index settings​\n    metric_type=\"COSINE\"  # Specify similarity metric type, options include L2, COSINE, or IP​\n)​\n\n","indexes.add(IndexParam.builder()​\n        .fieldName(\"embedding\")​\n        .indexType(IndexParam.IndexType.AUTOINDEX)​\n        .metricType(IndexParam.MetricType.COSINE)​\n        .build());​\n\n","indexParams.push({​\n    index_name: 'embedding_index',​\n    field_name: 'embedding',​\n    metric_type: MetricType.COSINE,​\n    index_type: IndexType.AUTOINDEX,​\n});​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"varchar_field1\",​\n            \"indexName\": \"varchar_index\",​\n            \"indexType\": \"AUTOINDEX\"​\n        },​\n        {​\n            \"fieldName\": \"embedding\",​\n            \"metricType\": \"COSINE\",​\n            \"indexType\": \"AUTOINDEX\"​\n        }​\n    ]'​\n\n","# Create Collection​\nclient.create_collection(​\n    collection_name=\"your_collection_name\",​\n    schema=schema,​\n    index_params=index_params​\n)​\n\n","CreateCollectionReq requestCreate = CreateCollectionReq.builder()​\n        .collectionName(\"my_varchar_collection\")​\n        .collectionSchema(schema)​\n        .indexParams(indexes)​\n        .build();​\nclient.createCollection(requestCreate);​\n\n","client.create_collection({​\n    collection_name: \"my_varchar_collection\",​\n    schema: schema,​\n    index_params: index_params​\n})​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"my_varchar_collection\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n## {\"code\":0,\"data\":{}}​\n\n","data = [​\n    {\"varchar_field1\": \"Product A\", \"varchar_field2\": \"High quality product\", \"pk\": 1, \"embedding\": [0.1, 0.2, 0.3]},​\n    {\"varchar_field1\": \"Product B\", \"varchar_field2\": \"Affordable price\", \"pk\": 2, \"embedding\": [0.4, 0.5, 0.6]},​\n    {\"varchar_field1\": \"Product C\", \"varchar_field2\": \"Best seller\", \"pk\": 3, \"embedding\": [0.7, 0.8, 0.9]},​\n]​\n​\nclient.insert(​\n    collection_name=\"my_varchar_collection\",​\n    data=data​\n)​\n\n","import com.google.gson.Gson;​\nimport com.google.gson.JsonObject;​\nimport io.milvus.v2.service.vector.request.InsertReq;​\nimport io.milvus.v2.service.vector.response.InsertResp;​\n​\nList<JsonObject> rows = new ArrayList<>();​\nGson gson = new Gson();​\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": \\\"Product A\\\", \\\"varchar_field2\\\": \\\"High quality product\\\", \\\"pk\\\": 1, \\\"embedding\\\": [0.1, 0.2, 0.3]}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": \\\"Product B\\\", \\\"varchar_field2\\\": \\\"Affordable price\\\", \\\"pk\\\": 2, \\\"embedding\\\": [0.4, 0.5, 0.6]}\", JsonObject.class));​\nrows.add(gson.fromJson(\"{\\\"varchar_field1\\\": \\\"Product C\\\", \\\"varchar_field2\\\": \\\"Best seller\\\", \\\"pk\\\": 3, \\\"embedding\\\": [0.7, 0.8, 0.9]}\", JsonObject.class));​\n​\nInsertResp insertR = client.insert(InsertReq.builder()​\n        .collectionName(\"my_varchar_collection\")​\n        .data(rows)​\n        .build());​\n\n","const data = [​\n  {​\n    varchar_field1: \"Product A\",​\n    varchar_field2: \"High quality product\",​\n    pk: 1,​\n    embedding: [0.1, 0.2, 0.3],​\n  },​\n  {​\n    varchar_field1: \"Product B\",​\n    varchar_field2: \"Affordable price\",​\n    pk: 2,​\n    embedding: [0.4, 0.5, 0.6],​\n  },​\n  {​\n    varchar_field1: \"Product C\",​\n    varchar_field2: \"Best seller\",​\n    pk: 3,​\n    embedding: [0.7, 0.8, 0.9],​\n  },​\n];​\nclient.insert({​\n  collection_name: \"my_sparse_collection\",​\n  data: data,​\n});​\n​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"data\": [​\n        {\"varchar_field1\": \"Product A\", \"varchar_field2\": \"High quality product\", \"pk\": 1, \"embedding\": [0.1, 0.2, 0.3]},​\n    {\"varchar_field1\": \"Product B\", \"varchar_field2\": \"Affordable price\", \"pk\": 2, \"embedding\": [0.4, 0.5, 0.6]},​\n    {\"varchar_field1\": \"Product C\", \"varchar_field2\": \"Best seller\", \"pk\": 3, \"embedding\": [0.7, 0.8, 0.9]}       ​\n    ],​\n    \"collectionName\": \"my_varchar_collection\"​\n}'​\n​\n## {\"code\":0,\"cost\":0,\"data\":{\"insertCount\":3,\"insertIds\":[1,2,3]}}​\n\n","filter = 'varchar_field1 == \"Product A\"'​\n​\nres = client.query(​\n    collection_name=\"my_varchar_collection\",​\n    filter=filter,​\n    output_fields=[\"varchar_field1\", \"varchar_field2\"]​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"{'varchar_field1': 'Product A', 'varchar_field2': 'High quality product', 'pk': 1}\"] ​\n\n","import io.milvus.v2.service.vector.request.QueryReq;​\nimport io.milvus.v2.service.vector.response.QueryResp;​\n​\nString filter = \"varchar_field1 == \\\"Product A\\\"\";​\nQueryResp resp = client.query(QueryReq.builder()​\n        .collectionName(\"my_varchar_collection\")​\n        .filter(filter)​\n        .outputFields(Arrays.asList(\"varchar_field1\", \"varchar_field2\"))​\n        .build());​\n​\nSystem.out.println(resp.getQueryResults());​\n​\n// Output​\n//​\n// [QueryResp.QueryResult(entity={varchar_field1=Product A, varchar_field2=High quality product, pk=1})]​\n\n","client.query({​\n    collection_name: 'my_varchar_collection',​\n    filter: 'varchar_field1 == \"Product A\"',​\n    output_fields: ['varchar_field1', 'varchar_field2']​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_varchar_collection\",​\n    \"filter\": \"varchar_field1 == \\\"Product A\\\"\",​\n    \"outputFields\": [\"varchar_field1\", \"varchar_field2\"]​\n}'​\n## {\"code\":0,\"cost\":0,\"data\":[{\"pk\":1,\"varchar_field1\":\"Product A\",\"varchar_field2\":\"High quality product\"}]}​\n\n","filter = 'varchar_field1 == \"Product A\"'​\n​\nres = client.search(​\n    collection_name=\"my_varchar_collection\",​\n    data=[[0.3, -0.6, 0.1]],​\n    limit=5,​\n    search_params={\"params\": {\"nprobe\": 10}},​\n    output_fields=[\"varchar_field1\", \"varchar_field2\"],​\n    filter=filter​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"[{'id': 1, 'distance': -0.06000000238418579, 'entity': {'varchar_field1': 'Product A', 'varchar_field2': 'High quality product'}}]\"] ​\n\n","import io.milvus.v2.service.vector.request.SearchReq;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nString filter = \"varchar_field1 == \\\"Product A\\\"\";​\nSearchResp resp = client.search(SearchReq.builder()​\n        .collectionName(\"my_varchar_collection\")​\n        .annsField(\"embedding\")​\n        .data(Collections.singletonList(new FloatVec(new float[]{0.3f, -0.6f, 0.1f})))​\n        .topK(5)​\n        .outputFields(Arrays.asList(\"varchar_field1\", \"varchar_field2\"))​\n        .filter(filter)​\n        .build());​\n​\nSystem.out.println(resp.getSearchResults());​\n​\n// Output​\n//​\n// [[SearchResp.SearchResult(entity={varchar_field1=Product A, varchar_field2=High quality product}, score=-0.2364331, id=1)]]​\n\n","client.search({​\n    collection_name: 'my_varchar_collection',​\n    data: [0.3, -0.6, 0.1],​\n    limit: 5,​\n    output_fields: ['varchar_field1', 'varchar_field2'],​\n    filter: 'varchar_field1 == \"Product A\"'​\n    params: {​\n       nprobe:10​\n    }​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_varchar_collection\",​\n    \"data\": [​\n        [0.3, -0.6, 0.1]​\n    ],​\n    \"limit\": 5,​\n    \"searchParams\":{​\n        \"params\":{\"nprobe\":10}​\n    },​\n    \"outputFields\": [\"varchar_field1\", \"varchar_field2\"],​\n    \"filter\": \"varchar_field1 == \\\"Product A\\\"\"​\n}'​\n​\n## {\"code\":0,\"cost\":0,\"data\":[{\"distance\":-0.2364331,\"id\":1,\"varchar_field1\":\"Product A\",\"varchar_field2\":\"High quality product\"}]}​\n\n"],"headingContent":"String Field​","anchorList":[{"label":"String Field​","href":"String-Field​","type":1,"isActive":false},{"label":"Add VARCHAR field​","href":"Add-VARCHAR-field​","type":2,"isActive":false},{"label":"Set index params​","href":"Set-index-params​","type":2,"isActive":false},{"label":"Create collection​","href":"Create-collection​","type":2,"isActive":false},{"label":"Insert data​","href":"Insert-data​","type":2,"isActive":false},{"label":"Search and query​","href":"Search-and-query​","type":2,"isActive":false}]}