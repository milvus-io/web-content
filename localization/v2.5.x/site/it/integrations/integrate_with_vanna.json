{"codeList":["$ pip install \"vanna[milvus,openai]\"\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","from pymilvus import MilvusClient, model\nfrom vanna.milvus import Milvus_VectorStore\nfrom vanna.openai import OpenAI_Chat\n\n\nclass VannaMilvus(Milvus_VectorStore, OpenAI_Chat):\n    def __init__(self, config=None):\n        Milvus_VectorStore.__init__(self, config=config)\n        OpenAI_Chat.__init__(self, config=config)\n","milvus_uri = \"./milvus_vanna.db\"\n\nmilvus_client = MilvusClient(uri=milvus_uri)\n\nvn_milvus = VannaMilvus(\n    config={\n        \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        \"model\": \"gpt-3.5-turbo\",\n        \"milvus_client\": milvus_client,\n        \"embedding_function\": model.DefaultEmbeddingFunction(),\n        \"n_results\": 2,  # The number of results to return from Milvus semantic search.\n    }\n)\n","import sqlite3\n\nsqlite_path = \"./my-database.sqlite\"\nsql_connect = sqlite3.connect(sqlite_path)\nc = sql_connect.cursor()\n\ninit_sqls = \"\"\"\nCREATE TABLE IF NOT EXISTS Customer (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT NOT NULL,\n    Company TEXT NOT NULL,\n    City TEXT NOT NULL,\n    Phone TEXT NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS Company (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Name TEXT NOT NULL,\n    Industry TEXT NOT NULL,\n    Location TEXT NOT NULL,\n    EmployeeCount INTEGER NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS User (\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    Username TEXT NOT NULL UNIQUE,\n    Email TEXT NOT NULL UNIQUE\n);\n\nINSERT INTO Customer (Name, Company, City, Phone) \nVALUES ('John Doe', 'ABC Corp', 'New York', '123-456-7890');\n\nINSERT INTO Customer (Name, Company, City, Phone) \nVALUES ('Jane Smith', 'XYZ Inc', 'Los Angeles', '098-765-4321');\n\nINSERT INTO Company (Name, Industry, Location, EmployeeCount)\nVALUES ('ABC Corp', 'cutting-edge technology', 'New York', 100);\n\nINSERT INTO User (Username, Email)\nVALUES ('johndoe123', 'johndoe123@example.com');\n\"\"\"\n\nfor sql in init_sqls.split(\";\"):\n    c.execute(sql)\n\nsql_connect.commit()\n\n# Connect to the SQLite database\nvn_milvus.connect_to_sqlite(sqlite_path)\n","# If there exists training data, we should remove it before training.\nexisting_training_data = vn_milvus.get_training_data()\nif len(existing_training_data) > 0:\n    for _, training_data in existing_training_data.iterrows():\n        vn_milvus.remove_training_data(training_data[\"id\"])\n\n# Get the DDL of the SQLite database\ndf_ddl = vn_milvus.run_sql(\"SELECT type, sql FROM sqlite_master WHERE sql is not null\")\n\n# Train the model on the DDL data\nfor ddl in df_ddl[\"sql\"].to_list():\n    vn_milvus.train(ddl=ddl)\n","# Add documentation about your business terminology or definitions.\nvn_milvus.train(\n    documentation=\"ABC Corp specializes in cutting-edge technology solutions and innovation.\"\n)\nvn_milvus.train(\n    documentation=\"XYZ Inc is a global leader in manufacturing and supply chain management.\"\n)\n\n# You can also add SQL queries to your training data.\nvn_milvus.train(sql=\"SELECT * FROM Customer WHERE Name = 'John Doe'\")\n","training_data = vn_milvus.get_training_data()\ntraining_data\n","sql = vn_milvus.generate_sql(\"what is the phone number of John Doe?\")\nvn_milvus.run_sql(sql)\n","sql = vn_milvus.generate_sql(\"which customer works for a manufacturing corporation?\")\nvn_milvus.run_sql(sql)\n","sql_connect.close()\nmilvus_client.close()\n\nos.remove(sqlite_path)\nif os.path.exists(milvus_uri):\n    os.remove(milvus_uri)\n"],"headingContent":"Write SQL with Vanna and Milvus","anchorList":[{"label":"Write SQL with Vanna and Milvus","href":"Write-SQL-with-Vanna-and-Milvus","type":1,"isActive":false},{"label":"Prerequisites","href":"Prerequisites","type":2,"isActive":false},{"label":"Data preparation","href":"Data-preparation","type":2,"isActive":false},{"label":"Train with data","href":"Train-with-data","type":2,"isActive":false},{"label":"Generate SQLs and execute them","href":"Generate-SQLs-and-execute-them","type":2,"isActive":false}]}