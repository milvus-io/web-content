{"codeList":["!wget https://github.com/milvus-io/pymilvus-assets/releases/download/imagedata/reverse_image_search.zip\n!unzip -q -o reverse_image_search.zip\n","$ pip install pymilvus --upgrade\n$ pip install timm\n","import torch\nfrom PIL import Image\nimport timm\nfrom sklearn.preprocessing import normalize\nfrom timm.data import resolve_data_config\nfrom timm.data.transforms_factory import create_transform\n\n\nclass FeatureExtractor:\n    def __init__(self, modelname):\n        # Load the pre-trained model\n        self.model = timm.create_model(\n            modelname, pretrained=True, num_classes=0, global_pool=\"avg\"\n        )\n        self.model.eval()\n\n        # Get the input size required by the model\n        self.input_size = self.model.default_cfg[\"input_size\"]\n\n        config = resolve_data_config({}, model=modelname)\n        # Get the preprocessing function provided by TIMM for the model\n        self.preprocess = create_transform(**config)\n\n    def __call__(self, imagepath):\n        # Preprocess the input image\n        input_image = Image.open(imagepath).convert(\"RGB\")  # Convert to RGB if needed\n        input_image = self.preprocess(input_image)\n\n        # Convert the image to a PyTorch tensor and add a batch dimension\n        input_tensor = input_image.unsqueeze(0)\n\n        # Perform inference\n        with torch.no_grad():\n            output = self.model(input_tensor)\n\n        # Extract the feature vector\n        feature_vector = output.squeeze().numpy()\n\n        return normalize(feature_vector.reshape(1, -1), norm=\"l2\").flatten()\n","from pymilvus import MilvusClient\n\n# Set up a Milvus client\nclient = MilvusClient(uri=\"example.db\")\n# Create a collection in quick setup mode\nif client.has_collection(collection_name=\"image_embeddings\"):\n    client.drop_collection(collection_name=\"image_embeddings\")\nclient.create_collection(\n    collection_name=\"image_embeddings\",\n    vector_field_name=\"vector\",\n    dimension=512,\n    auto_id=True,\n    enable_dynamic_field=True,\n    metric_type=\"COSINE\",\n)\n","import os\n\nextractor = FeatureExtractor(\"resnet34\")\n\nroot = \"./train\"\ninsert = True\nif insert is True:\n    for dirpath, foldername, filenames in os.walk(root):\n        for filename in filenames:\n            if filename.endswith(\".JPEG\"):\n                filepath = dirpath + \"/\" + filename\n                image_embedding = extractor(filepath)\n                client.insert(\n                    \"image_embeddings\",\n                    {\"vector\": image_embedding, \"filename\": filepath},\n                )\n","from IPython.display import display\n\nquery_image = \"./test/Afghan_hound/n02088094_4261.JPEG\"\n\nresults = client.search(\n    \"image_embeddings\",\n    data=[extractor(query_image)],\n    output_fields=[\"filename\"],\n    search_params={\"metric_type\": \"COSINE\"},\n)\nimages = []\nfor result in results:\n    for hit in result[:10]:\n        filename = hit[\"entity\"][\"filename\"]\n        img = Image.open(filename)\n        img = img.resize((150, 150))\n        images.append(img)\n\nwidth = 150 * 5\nheight = 150 * 2\nconcatenated_image = Image.new(\"RGB\", (width, height))\n\nfor idx, img in enumerate(images):\n    x = idx % 5\n    y = idx // 5\n    concatenated_image.paste(img, (x * 150, y * 150))\ndisplay(\"query\")\ndisplay(Image.open(query_image).resize((150, 150)))\ndisplay(\"results\")\ndisplay(concatenated_image)\n"],"headingContent":"Image Search with Milvus","anchorList":[{"label":"Image Search with Milvus","href":"Image-Search-with-Milvus","type":1,"isActive":false},{"label":"Dataset Preparation","href":"Dataset-Preparation","type":2,"isActive":false},{"label":"Prequisites","href":"Prequisites","type":2,"isActive":false},{"label":"Define the Feature Extractor","href":"Define-the-Feature-Extractor","type":2,"isActive":false},{"label":"Create a Milvus Collection","href":"Create-a-Milvus-Collection","type":2,"isActive":false},{"label":"Insert the Embeddings to Milvus","href":"Insert-the-Embeddings-to-Milvus","type":2,"isActive":false},{"label":"Quick Deploy","href":"Quick-Deploy","type":2,"isActive":false}]}