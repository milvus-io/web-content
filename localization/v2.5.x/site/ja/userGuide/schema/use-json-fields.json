{"codeList":["{\n  \"metadata\": {\n    \"product_info\": {\n      \"category\": \"electronics\",\n      \"brand\": \"BrandA\"\n    },\n    \"price\": 99.99,\n    \"in_stock\": true,\n    \"tags\": [\"summer_sale\", \"clearance\"]\n  }\n}\n","# Import necessary libraries\nfrom pymilvus import MilvusClient, DataType\n\n# Define server address\nSERVER_ADDR = \"http://localhost:19530\"\n\n# Create a MilvusClient instance\nclient = MilvusClient(uri=SERVER_ADDR)\n\n# Define the collection schema\nschema = client.create_schema(\n    auto_id=False,\n    enable_dynamic_fields=True,\n)\n\n# Add a JSON field that supports null values\nschema.add_field(field_name=\"metadata\", datatype=DataType.JSON, nullable=True)\nschema.add_field(field_name=\"pk\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"embedding\", datatype=DataType.FLOAT_VECTOR, dim=3)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\n\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .build());\n        \nCreateCollectionReq.CollectionSchema schema = client.createSchema();\nschema.setEnableDynamicField(true);\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"metadata\")\n        .dataType(DataType.JSON)\n        .isNullable(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"pk\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"embedding\")\n        .dataType(DataType.FloatVector)\n        .dimension(3)\n        .build());\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\n\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nschema := entity.NewSchema()\nschema.WithField(entity.NewField().\n    WithName(\"pk\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsAutoID(true),\n).WithField(entity.NewField().\n    WithName(\"embedding\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(3),\n).WithField(entity.NewField().\n    WithName(\"metadata\").\n    WithDataType(entity.FieldTypeJSON),\n)\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\nconst schema = [\n  {\n    name: \"metadata\",\n    data_type: DataType.JSON,\n  },\n  {\n    name: \"pk\",\n    data_type: DataType.Int64,\n    is_primary_key: true,\n  },\n  {\n    name: \"embedding\",\n    data_type: DataType.FloatVector,\n    dim: 3,\n  },\n];\n","export jsonField='{\n    \"fieldName\": \"metadata\",\n    \"dataType\": \"JSON\"\n}'\n\nexport pkField='{\n    \"fieldName\": \"pk\",\n    \"dataType\": \"Int64\",\n    \"isPrimary\": true\n}'\n\nexport vectorField='{\n    \"fieldName\": \"embedding\",\n    \"dataType\": \"FloatVector\",\n    \"elementTypeParams\": {\n        \"dim\": 3\n    }\n}'\n\nexport schema=\"{\n    \\\"autoID\\\": false,\n    \\\"enableDynamicField\\\": true,\n    \\\"fields\\\": [\n        $jsonField,\n        $pkField,\n        $vectorField\n    ]\n}\"\n","index_params = client.prepare_index_params()\n\n# Example 1: Index the 'category' key inside 'product_info' as a string\nindex_params.add_index(\n    field_name=\"metadata\", # JSON field name to index\n    index_type=\"INVERTED\", # Index type. Set to INVERTED\n    index_name=\"json_index_1\", # Index name\n    params={\n        \"json_path\": \"metadata[\\\"product_info\\\"][\\\"category\\\"]\", # Path in JSON field to index\n        \"json_cast_type\": \"varchar\" # Data type that the extracted JSON values will be cast to\n    }\n)\n\n# Example 2: Index 'price' as a numeric type (double)\nindex_params.add_index(\n    field_name=\"metadata\",\n    index_type=\"INVERTED\",\n    index_name=\"json_index_2\",\n    params={\n        \"json_path\": \"metadata[\\\"price\\\"]\",\n        \"json_cast_type\": \"double\"\n    }\n)\n","import io.milvus.v2.common.IndexParam;\n\nList<IndexParam> indexes = new ArrayList<>();\n\nMap<String,Object> extraParams_1 = new HashMap<>();\nextraParams_1.put(\"json_path\", \"metadata[\\\"product_info\\\"][\\\"category\\\"]\");\nextraParams_1.put(\"json_cast_type\", \"varchar\");\nindexes.add(IndexParam.builder()\n        .fieldName(\"metadata\")\n        .indexName(\"json_index_1\")\n        .indexType(IndexParam.IndexType.INVERTED)\n        .extraParams(extraParams_1)\n        .build());\n\nMap<String,Object> extraParams_2 = new HashMap<>();\nextraParams_2.put(\"json_path\", \"metadata[\\\"price\\\"]\");\nextraParams_2.put(\"json_cast_type\", \"double\");\nindexes.add(IndexParam.builder()\n        .fieldName(\"metadata\")\n        .indexName(\"json_index_2\")\n        .indexType(IndexParam.IndexType.INVERTED)\n        .extraParams(extraParams_2)\n        .build());\n","jsonIndex1 := index.NewJSONPathIndex(index.Inverted, \"varchar\", `metadata[\"product_info\"][\"category\"]`)\njsonIndex2 := index.NewJSONPathIndex(index.Inverted, \"double\", `metadata[\"price\"]`)\nindexOpt1 := milvusclient.NewCreateIndexOption(\"my_collection\", \"metadata\", jsonIndex1)\nindexOpt2 := milvusclient.NewCreateIndexOption(\"my_collection\", \"metadata\", jsonIndex2)\n","const indexParams = [\n    {\n        field_name: \"metadata\",\n        index_type: \"INVERTED\",\n        index_name: \"json_index_1\",\n        params: {\n            json_path: \"metadata[\\\"product_info\\\"][\\\"category\\\"]\",\n            json_cast_type: \"varchar\"\n        }\n    },\n    {\n        field_name: \"metadata\",\n        index_type: \"INVERTED\",\n        index_name: \"json_index_2\",\n        params: {\n            json_path: \"metadata[\\\"price\\\"]\",\n            json_cast_type: \"double\"\n        }\n    }\n]\n\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/indexes/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"indexParams\": [\n        {\n            \"fieldName\": \"metadata\",\n            \"indexName\": \"json_index_1\",\n            \"indexType\": \"INVERTED\",\n            \"params\": {\n                \"json_path\": \"metadata[\\\"product_info\\\"][\\\"category\\\"]\",\n                \"json_cast_type\": \"varchar\"\n            }\n        }\n    ]\n}'\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/indexes/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"indexParams\": [\n        {\n            \"fieldName\": \"metadata\",\n            \"indexName\": \"json_index_2\",\n            \"indexType\": \"INVERTED\",\n            \"params\": {\n                \"json_path\": \"metadata[\\\"price\\\"]\",\n                \"json_cast_type\": \"double\"\n            }\n        }\n    ]\n}'\n","# Set index params\n\nindex_params = client.prepare_index_params()\n\n# Index `embedding` with AUTOINDEX and specify similarity metric type\nindex_params.add_index(\n    field_name=\"embedding\",\n    index_name=\"vector_index\",\n    index_type=\"AUTOINDEX\",  # Use automatic indexing to simplify complex index settings\n    metric_type=\"COSINE\"  # Specify similarity metric type, options include L2, COSINE, or IP\n)\n","import io.milvus.v2.common.IndexParam;\nimport java.util.*;\n\nList<IndexParam> indexes = new ArrayList<>();\nindexes.add(IndexParam.builder()\n        .fieldName(\"embedding\")\n        .indexName(\"vector_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.COSINE)\n        .build());\n","vectorIndex := index.NewAutoIndex(entity.COSINE)\nindexOpt := milvusclient.NewCreateIndexOption(\"my_collection\", \"embedding\", vectorIndex)\n","indexParams.push({\n    index_name: 'embedding_index',\n    field_name: 'embedding',\n    index_name: 'vector_index',\n    metricType: MetricType.CONSINE,\n    index_type: IndexType.AUTOINDEX,\n));\n","export indexParams='[\n        {\n            \"fieldName\": \"embedding\",\n            \"indexName\": \"vector_index\",\n            \"metricType\": \"COSINE\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n","client.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema,\n    index_params=index_params\n)\n","CreateCollectionReq requestCreate = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexes)\n        .build();\nclient.createCollection(requestCreate);\n","err = client.CreateCollection(ctx, milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n    WithIndexOptions(indexOpt1, indexOpt2, indexOpt))\nif err != nil {\n    fmt.Println(err.Error())\n    // handler err\n}\n","await client.create_collection({\n    collection_name: \"my_collection\",\n    schema: schema,\n    index_params: indexParams\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n","# Sample data\ndata = [\n    {\n        \"metadata\": {\n            \"product_info\": {\"category\": \"electronics\", \"brand\": \"BrandA\"},\n            \"price\": 99.99,\n            \"in_stock\": True,\n            \"tags\": [\"summer_sale\"]\n        },\n        \"pk\": 1,\n        \"embedding\": [0.12, 0.34, 0.56]\n    },\n    {\n        \"metadata\": None,  # Entire JSON object is null\n        \"pk\": 2,\n        \"embedding\": [0.56, 0.78, 0.90]\n    },\n    {\n        # JSON field is completely missing\n        \"pk\": 3,\n        \"embedding\": [0.91, 0.18, 0.23]\n    },\n    {\n        # Some sub-keys are null\n        \"metadata\": {\n            \"product_info\": {\"category\": None, \"brand\": \"BrandB\"},\n            \"price\": 59.99,\n            \"in_stock\": None\n        },\n        \"pk\": 4,\n        \"embedding\": [0.56, 0.38, 0.21]\n    }\n]\n\nclient.insert(\n    collection_name=\"my_collection\",\n    data=data\n)\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport io.milvus.v2.service.vector.request.InsertReq;\nimport io.milvus.v2.service.vector.response.InsertResp;\n\nList<JsonObject> rows = new ArrayList<>();\nGson gson = new Gson();\nrows.add(gson.fromJson(\"{\\\"metadata\\\":{\\\"product_info\\\":{\\\"category\\\":\\\"electronics\\\",\\\"brand\\\":\\\"BrandA\\\"},\\\"price\\\":99.99,\\\"in_stock\\\":True,\\\"tags\\\":[\\\"summer_sale\\\"]},\\\"pk\\\":1,\\\"embedding\\\":[0.12,0.34,0.56]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"metadata\\\":null,\\\"pk\\\":2,\\\"embedding\\\":[0.56,0.78,0.90]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"pk\\\":3,\\\"embedding\\\":[0.91,0.18,0.23]}\", JsonObject.class));\nrows.add(gson.fromJson(\"{\\\"metadata\\\":{\\\"product_info\\\":{\\\"category\\\":null,\\\"brand\\\":\\\"BrandB\\\"},\\\"price\\\":59.99,\\\"in_stock\\\":null},\\\"pk\\\":4,\\\"embedding\\\":[0.56,0.38,0.21]}\", JsonObject.class));\n\nInsertResp insertR = client.insert(InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(rows)\n        .build());\n","_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"pk\", []int64{1, 2, 3, 4}).\n    WithFloatVectorColumn(\"embedding\", 3, [][]float32{\n        {0.12, 0.34, 0.56},\n        {0.56, 0.78, 0.90},\n        {0.91, 0.18, 0.23},\n        {0.56, 0.38, 0.21},\n    }).WithColumns(\n    column.NewColumnJSONBytes(\"metadata\", [][]byte{\n        []byte(`{\n    \"product_info\": {\"category\": \"electronics\", \"brand\": \"BrandA\"},\n    \"price\": 99.99,\n    \"in_stock\": True,\n    \"tags\": [\"summer_sale\"]\n}`),\n        []byte(`null`),\n        []byte(`null`),\n        []byte(`\"metadata\": {\n    \"product_info\": {\"category\": None, \"brand\": \"BrandB\"},\n    \"price\": 59.99,\n    \"in_stock\": None\n}`),\n    }),\n))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","const data = [\n    {\n        \"metadata\": {\n            \"product_info\": {\"category\": \"electronics\", \"brand\": \"BrandA\"},\n            \"price\": 99.99,\n            \"in_stock\": True,\n            \"tags\": [\"summer_sale\"]\n        },\n        \"pk\": 1,\n        \"embedding\": [0.12, 0.34, 0.56]\n    },\n    {\n        \"metadata\": None,  # Entire JSON object is null\n        \"pk\": 2,\n        \"embedding\": [0.56, 0.78, 0.90]\n    },\n    {\n        # JSON field is completely missing\n        \"pk\": 3,\n        \"embedding\": [0.91, 0.18, 0.23]\n    },\n    {\n        # Some sub-keys are null\n        \"metadata\": {\n            \"product_info\": {\"category\": None, \"brand\": \"BrandB\"},\n            \"price\": 59.99,\n            \"in_stock\": None\n        },\n        \"pk\": 4,\n        \"embedding\": [0.56, 0.38, 0.21]\n    }\n];\n\nawait client.insert({\n    collection_name: \"my_collection\",\n    data: data\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n--data '{\n    \"data\": [\n        {\n             \"metadata\":  {\n                   \"product_info\": {\"category\": \"electronics\", \"brand\": \"BrandA\"},\n                  \"price\":  99.99,\n                   \"in_stock\":  true,\n                  \"tags\": [\"summer_sale\"]\n              }, \n             \"varchar_field2\": \"High quality product\", \n             \"pk\": 1, \n             \"embedding\": [0.1, 0.2, 0.3]\n          },\n          {\n              \"metadata\": null,\n              \"pk\": 2,\n              \"embedding\": [0.56, 0.78, 0.90]\n          },\n         {\n               \"pk\": 3,\n               \"embedding\": [0.91, 0.18, 0.23]\n         },\n        {\n              \"metadata\": {\n                     \"product_info\": {\"category\": null, \"brand\": \"BrandB\"},\n                     \"price\": 59.99,\n                     \"in_stock\": null\n               },\n              \"pk\": 4,\n              \"embedding\": [0.56, 0.38, 0.21]\n         }\n    ],\n    \"collectionName\": \"my_collection\"\n}'\n","# Query to filter out records with null metadata\n\nfilter = 'metadata is not null'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"metadata\", \"pk\"]\n)\n\n# Expected result:\n# Rows with pk=1 and pk=4 have valid, non-null metadata.\n# Rows with pk=2 (metadata=None) and pk=3 (no metadata key) are excluded.\n\nprint(res)\n\n# Output:\n# data: [\n#     \"{'metadata': {'product_info': {'category': 'electronics', 'brand': 'BrandA'}, 'price': 99.99, 'in_stock': True, 'tags': ['summer_sale']}, 'pk': 1}\",\n#     \"{'metadata': {'product_info': {'category': None, 'brand': 'BrandB'}, 'price': 59.99, 'in_stock': None}, 'pk': 4}\"\n# ]\n","import io.milvus.v2.service.vector.request.QueryReq;\nimport io.milvus.v2.service.vector.response.QueryResp;\n\nString filter = \"metadata is not null\";\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"metadata\", \"pk\"))\n        .build());\n\nSystem.out.println(resp.getQueryResults());\n\n// Output\n//\n// [\n//    QueryResp.QueryResult(entity={metadata={\"product_info\":{\"category\":\"electronics\",\"brand\":\"BrandA\"},\"price\":99.99,\"in_stock\":true,\"tags\":[\"summer_sale\"]}, pk=1}),\n//    QueryResp.QueryResult(entity={metadata={\"product_info\":{\"category\":null,\"brand\":\"BrandB\"},\"price\":59.99,\"in_stock\":null}, pk=4})\n// ]\n","filter := \"metadata is not null\"\nrs, err := client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"metadata\", \"pk\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(\"pk\", rs.GetColumn(\"pk\").FieldData().GetScalars())\nfmt.Println(\"metadata\", rs.GetColumn(\"metadata\").FieldData().GetScalars())\n","await client.query({\n    collection_name: 'my_scalar_collection',\n    filter: 'metadata[\"category\"] == \"electronics\" and metadata[\"price\"] < 150',\n    output_fields: ['metadata']\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"collectionName\": \"my_collection\",\n    \"filter\": \"metadata is not null\",\n    \"outputFields\": [\"metadata\", \"pk\"]\n}'\n\n#{\"code\":0,\"cost\":0,\"data\":[{\"metadata\":\"{\\\"product_info\\\": {\\\"category\\\": \\\"electronics\\\", \\\"brand\\\": \\\"BrandA\\\"}, \\\"price\\\": 99.99, \\\"in_stock\\\": true, \\\"tags\\\": [\\\"summer_sale\\\"]}\",\"pk\":1},{\"metadata\":\"\",\"pk\":2},{\"metadata\":\"\",\"pk\":3},{\"metadata\":\"{\\\"product_info\\\": {\\\"category\\\": null, \\\"brand\\\": \\\"BrandB\\\"}, \\\"price\\\": 59.99, \\\"in_stock\\\": null}\",\"pk\":4}]}\n","filter = 'metadata[\"product_info\"][\"category\"] == \"electronics\"'\n\nres = client.query(\n    collection_name=\"my_collection\",\n    filter=filter,\n    output_fields=[\"metadata\", \"pk\"]\n)\n\n# Expected result:\n# - Only pk=1 has \"category\": \"electronics\".\n# - pk=4 has \"category\": None, so it doesn't match.\n# - pk=2 and pk=3 have no valid metadata.\n\nprint(res)\n\n# Output:\n# data: [\n#     \"{'pk': 1, 'metadata': {'product_info': {'category': 'electronics', 'brand': 'BrandA'}, 'price': 99.99, 'in_stock': True, 'tags': ['summer_sale']}}\"\n# ]\n","String filter = \"metadata[\\\"product_info\\\"][\\\"category\\\"] == \\\"electronics\\\"\";\n\nQueryResp resp = client.query(QueryReq.builder()\n        .collectionName(\"my_collection\")\n        .filter(filter)\n        .outputFields(Arrays.asList(\"metadata\", \"pk\"))\n        .build());\n\nSystem.out.println(resp.getQueryResults());\n\n// Output\n// [QueryResp.QueryResult(entity={metadata={\"product_info\":{\"category\":\"electronics\",\"brand\":\"BrandA\"},\"price\":99.99,\"in_stock\":true,\"tags\":[\"summer_sale\"]}, pk=1})]\n","filter = `metadata[\"product_info\"][\"category\"] == \"electronics\"`\nrs, err := client.Query(ctx, milvusclient.NewQueryOption(\"my_collection\").\n    WithFilter(filter).\n    WithOutputFields(\"metadata\", \"pk\"))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfmt.Println(\"pk\", rs.GetColumn(\"pk\").FieldData().GetScalars())\nfmt.Println(\"metadata\", rs.GetColumn(\"metadata\").FieldData().GetScalars())\n","const filter = 'metadata[\"category\"] == \"electronics\"';\nconst res = await client.query({\n    collection_name: \"my_collection\",\n    filter: filter,\n    output_fields: [\"metadata\", \"pk\"]\n});\n\n// Example output:\n// {\n//.  data: [\n//      {'pk': 1, 'metadata': {'category': 'electronics', 'price': 99.99, 'brand': 'BrandA'}}\n// ]\n// }\n","# restful\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n  \"collectionName\": \"my_collection\",\n  \"filter\": \"metadata[\\\"product_info\\\"][\\\"category\\\"] == \\\"electronics\\\"\",\n  \"outputFields\": [\"metadata\", \"pk\"]\n}'\n\n#{\"code\":0,\"cost\":0,\"data\":[{\"metadata\":\"{\\\"product_info\\\": {\\\"category\\\": \\\"electronics\\\", \\\"brand\\\": \\\"BrandA\\\"}, \\\"price\\\": 99.99, \\\"in_stock\\\": true, \\\"tags\\\": [\\\"summer_sale\\\"]}\",\"pk\":1}]}\n","filter = 'metadata[\"product_info\"][\"brand\"] == \"BrandA\"'\n\nres = client.search(\n    collection_name=\"my_collection\",\n    data=[[0.3, -0.6, 0.1]],\n    limit=5,\n    search_params={\"params\": {\"nprobe\": 10}},\n    output_fields=[\"metadata\"],\n    filter=filter\n)\n\n# Expected result:\n# - Only pk=1 has \"brand\": \"BrandA\" in metadata[\"product_info\"].\n# - pk=4 has \"brand\": \"BrandB\".\n# - pk=2 and pk=3 have no valid metadata.\n# Hence, only pk=1 matches the filter.\n\nprint(res)\n\n# Output:\n# data: [\n#     \"[{'id': 1, 'distance': -0.2479381263256073, 'entity': {'metadata': {'product_info': {'category': 'electronics', 'brand': 'BrandA'}, 'price': 99.99, 'in_stock': True, 'tags': ['summer_sale']}}}]\"\n# ]\n","import io.milvus.v2.service.vector.request.SearchReq;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nString filter = \"metadata[\\\"product_info\\\"][\\\"brand\\\"] == \\\"BrandA\\\"\";\n\nSearchResp resp = client.search(SearchReq.builder()\n        .collectionName(\"my_collection\")\n        .annsField(\"embedding\")\n        .data(Collections.singletonList(new FloatVec(new float[]{0.3f, -0.6f, 0.1f})))\n        .topK(5)\n        .outputFields(Collections.singletonList(\"metadata\"))\n        .filter(filter)\n        .build());\n\nSystem.out.println(resp.getSearchResults());\n\n// Output\n//\n// [\n//   [\n//     SearchResp.SearchResult(entity={metadata={\"product_info\":{\"category\":\"electronics\",\"brand\":\"BrandA\"},\"price\":99.99,\"in_stock\":true,\"tags\":[\"summer_sale\"]}}, score=-0.24793813, id=1)\n//   ]\n// ]\n\n","queryVector := []float32{0.3, -0.6, -0.1}\nfilter = \"metadata[\\\"product_info\\\"][\\\"brand\\\"] == \\\"BrandA\\\"\"\n\nannParam := index.NewCustomAnnParam()\nannParam.WithExtraParam(\"nprobe\", 10)\nresultSets, err := client.Search(ctx, milvusclient.NewSearchOption(\n    \"my_collection\", // collectionName\n    5,               // limit\n    []entity.Vector{entity.FloatVector(queryVector)},\n).WithANNSField(\"embedding\").\n    WithFilter(filter).\n    WithOutputFields(\"metadata\").\n    WithAnnParam(annParam))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n    fmt.Println(\"metadata\", resultSet.GetColumn(\"metadata\").FieldData().GetScalars())\n}\n","await client.search({\n    collection_name: 'my_collection',\n    data: [0.3, -0.6, 0.1],\n    limit: 5,\n    output_fields: ['metadata'],\n    filter: 'metadata[\"category\"] == \"electronics\" and metadata[\"price\"] < 150',\n});\n","\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n  \"collectionName\": \"my_collection\",\n  \"data\": [\n    [0.3, -0.6, 0.1]\n  ],\n  \"annsField\": \"embedding\",\n  \"limit\": 5,\n  \"searchParams\": {\n    \"params\": {\n      \"nprobe\": 10\n    }\n  },\n  \"outputFields\": [\"metadata\"],\n  \"filter\": \"metadata[\\\"product_info\\\"][\\\"brand\\\"] == \\\"BrandA\\\"\"\n}'\n\n##{\"code\":0,\"cost\":0,\"data\":[{\"metadata\":\"{\\\"product_info\\\": {\\\"category\\\": \\\"electronics\\\", \\\"brand\\\": \\\"BrandA\\\"}, \\\"price\\\": 99.99, \\\"in_stock\\\": true, \\\"tags\\\": [\\\"summer_sale\\\"]}\",\"pk\":1}]}\n"],"headingContent":"JSON Field","anchorList":[{"label":"JSONフィールド","href":"JSON-Field","type":1,"isActive":false},{"label":"リミット","href":"Limits","type":2,"isActive":false},{"label":"JSONフィールドの追加","href":"Add-JSON-field","type":2,"isActive":false},{"label":"インデックスパラメータを設定する","href":"Set-index-params","type":2,"isActive":false},{"label":"コレクションの作成","href":"Create-collection","type":2,"isActive":false},{"label":"データの挿入","href":"Insert-data","type":2,"isActive":false},{"label":"フィルター式を使用したクエリ","href":"Query-with-filter-expressions","type":2,"isActive":false},{"label":"フィルター式によるベクトル検索","href":"Vector-search-with-filter-expressions","type":2,"isActive":false}]}