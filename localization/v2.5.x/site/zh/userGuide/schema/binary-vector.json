{"codeList":["from pymilvus import MilvusClient, DataType​\n​\nclient = MilvusClient(uri=\"http://localhost:19530\")​\n​\nschema = client.create_schema(​\n    auto_id=True,​\n    enable_dynamic_fields=True,​\n)​\n​\nschema.add_field(field_name=\"pk\", datatype=DataType.VARCHAR, is_primary=True, max_length=100)​\nschema.add_field(field_name=\"binary_vector\", datatype=DataType.BINARY_VECTOR, dim=128)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\n​\nimport io.milvus.v2.common.DataType;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .build());​\n        ​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\nschema.setEnableDynamicField(true);​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"pk\")​\n        .dataType(DataType.VarChar)​\n        .isPrimaryKey(true)​\n        .autoID(true)​\n        .maxLength(100)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"binary_vector\")​\n        .dataType(DataType.BinaryVector)​\n        .dimension(128)​\n        .build());​\n\n","import { DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nschema.push({​\n  name: \"binary vector\",​\n  data_type: DataType.BinaryVector,​\n  dim: 128,​\n});​\n\n","export primaryField='{​\n    \"fieldName\": \"pk\",​\n    \"dataType\": \"VarChar\",​\n    \"isPrimary\": true,​\n    \"elementTypeParams\": {​\n        \"max_length\": 100​\n    }​\n}'​\n​\nexport vectorField='{​\n    \"fieldName\": \"binary_vector\",​\n    \"dataType\": \"BinaryVector\",​\n    \"elementTypeParams\": {​\n        \"dim\": 128​\n    }​\n}'​\n​\nexport schema=\"{​\n    \\\"autoID\\\": true,​\n    \\\"fields\\\": [​\n        $primaryField,​\n        $vectorField​\n    ],​\n    \\\"enableDynamicField\\\": true​\n}\"​\n​\n\n","index_params = client.prepare_index_params()​\n​\nindex_params.add_index(​\n    field_name=\"binary_vector\",​\n    index_name=\"binary_vector_index\",​\n    index_type=\"BIN_IVF_FLAT\",​\n    metric_type=\"HAMMING\",​\n    params={\"nlist\": 128}​\n)​\n\n","import io.milvus.v2.common.IndexParam;​\nimport java.util.*;​\n​\nList<IndexParam> indexParams = new ArrayList<>();​\nMap<String,Object> extraParams = new HashMap<>();​\nextraParams.put(\"nlist\",128);​\nindexParams.add(IndexParam.builder()​\n        .fieldName(\"binary_vector\")​\n        .indexType(IndexParam.IndexType.BIN_IVF_FLAT)​\n        .metricType(IndexParam.MetricType.HAMMING)​\n        .extraParams(extraParams)​\n        .build());​\n\n","import { MetricType, IndexType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst indexParams = {​\n  indexName: \"binary_vector_index\",​\n  field_name: \"binary_vector\",​\n  metric_type: MetricType.HAMMING,​\n  index_type: IndexType.BIN_IVF_FLAT,​\n  params: {​\n    nlist: 128,​\n  },​\n};​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"binary_vector\",​\n            \"metricType\": \"HAMMING\",​\n            \"indexName\": \"binary_vector_index\",​\n            \"indexType\": \"BIN_IVF_FLAT\",​\n            \"params\":{\"nlist\": 128}​\n        }​\n    ]'​\n\n","client.create_collection(​\n    collection_name=\"my_binary_collection\",​\n    schema=schema,​\n    index_params=index_params​\n)​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .build());​\n​\nCreateCollectionReq requestCreate = CreateCollectionReq.builder()​\n        .collectionName(\"my_binary_collection\")​\n        .collectionSchema(schema)​\n        .indexParams(indexParams)​\n        .build();​\nclient.createCollection(requestCreate);​\n\n","import { MilvusClient } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst client = new MilvusClient({​\n    address: 'http://localhost:19530'​\n});​\n​\nawait client.createCollection({​\n    collection_name: 'my_dense_collection',​\n    schema: schema,​\n    index_params: indexParams​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"my_binary_collection\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n\n","def convert_bool_list_to_bytes(bool_list):​\n    if len(bool_list) % 8 != 0:​\n        raise ValueError(\"The length of a boolean list must be a multiple of 8\")​\n​\n    byte_array = bytearray(len(bool_list) // 8)​\n    for i, bit in enumerate(bool_list):​\n        if bit == 1:​\n            index = i // 8​\n            shift = i % 8​\n            byte_array[index] |= (1 << shift)​\n    return bytes(byte_array)​\n​\n​\nbool_vectors = [​\n    [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0] + [0] * 112,​\n    [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1] + [0] * 112,​\n]​\n​\ndata = [{\"binary_vector\": convert_bool_list_to_bytes(bool_vector) for bool_vector in bool_vectors}]​\n​\nclient.insert(​\n    collection_name=\"my_binary_collection\",​\n    data=data​\n)​\n\n","import com.google.gson.Gson;​\nimport com.google.gson.JsonObject;​\nimport io.milvus.v2.service.vector.request.InsertReq;​\nimport io.milvus.v2.service.vector.response.InsertResp;​\n​\nprivate static byte[] convertBoolArrayToBytes(boolean[] booleanArray) {​\n    byte[] byteArray = new byte[booleanArray.length / Byte.SIZE];​\n    for (int i = 0; i < booleanArray.length; i++) {​\n        if (booleanArray[i]) {​\n            int index = i / Byte.SIZE;​\n            int shift = i % Byte.SIZE;​\n            byteArray[index] |= (byte) (1 << shift);​\n        }​\n    }​\n​\n    return byteArray;​\n}​\n​\nList<JsonObject> rows = new ArrayList<>();​\nGson gson = new Gson();​\n{​\n    boolean[] boolArray = {true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true};​\n    JsonObject row = new JsonObject();​\n    row.add(\"binary_vector\", gson.toJsonTree(convertBoolArrayToBytes(boolArray)));​\n    rows.add(row);​\n}​\n{​\n    boolean[] boolArray = {false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true};​\n    JsonObject row = new JsonObject();​\n    row.add(\"binary_vector\", gson.toJsonTree(convertBoolArrayToBytes(boolArray)));​\n    rows.add(row);​\n}​\n​\nInsertResp insertR = client.insert(InsertReq.builder()​\n        .collectionName(\"my_binary_collection\")​\n        .data(rows)​\n        .build());​\n\n","const data = [​\n  { binary_vector: [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1] },​\n  { binary_vector: [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1] },​\n];​\n​\nclient.insert({​\n  collection_name: \"my_binary_collection\",​\n  data: data,​\n});​\n\n","curl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"data\\\": $data,​\n    \\\"collectionName\\\": \\\"my_binary_collection\\\"​\n}\"​\n\n","search_params = {​\n    \"params\": {\"nprobe\": 10}​\n}​\n​\nquery_bool_list = [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0] + [0] * 112​\nquery_vector = convert_bool_list_to_bytes(query_bool_list)​\n​\nres = client.search(​\n    collection_name=\"my_binary_collection\",​\n    data=[query_vector],​\n    anns_field=\"binary_vector\",​\n    search_params=search_params,​\n    limit=5,​\n    output_fields=[\"pk\"]​\n)​\n​\nprint(res)​\n​\n# Output​\n# data: [\"[{'id': '453718927992172268', 'distance': 10.0, 'entity': {'pk': '453718927992172268'}}]\"] ​\n\n","import io.milvus.v2.service.vector.request.SearchReq;​\nimport io.milvus.v2.service.vector.request.data.BinaryVec;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nMap<String,Object> searchParams = new HashMap<>();​\nsearchParams.put(\"nprobe\",10);​\n​\nboolean[] boolArray = {true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true};​\nBinaryVec queryVector = new BinaryVec(convertBoolArrayToBytes(boolArray));​\n​\nSearchResp searchR = client.search(SearchReq.builder()​\n        .collectionName(\"my_binary_collection\")​\n        .data(Collections.singletonList(queryVector))​\n        .annsField(\"binary_vector\")​\n        .searchParams(searchParams)​\n        .topK(5)​\n        .outputFields(Collections.singletonList(\"pk\"))​\n        .build());​\n        ​\n System.out.println(searchR.getSearchResults());​\n ​\n // Output​\n //​\n // [[SearchResp.SearchResult(entity={pk=453444327741536775}, score=0.0, id=453444327741536775), SearchResp.SearchResult(entity={pk=453444327741536776}, score=7.0, id=453444327741536776)]]​\n\n","query_vector = [1,0,1,0,1,1,1,1,1,1,1,1];​\n​\nclient.search({​\n    collection_name: 'my_binary_collection',​\n    data: query_vector,​\n    limit: 5,​\n    output_fields: ['pk'],​\n    params: {​\n        nprobe: 10​\n    }​\n});​\n\n","export searchParams='{​\n        \"params\":{\"nprobe\":10}​\n    }'​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"my_binary_collection\\\",​\n    \\\"data\\\": $data,​\n    \\\"annsField\\\": \\\"binary_vector\\\",​\n    \\\"limit\\\": 5,​\n    \\\"searchParams\\\":$searchParams,​\n    \\\"outputFields\\\": [\\\"pk\\\"]​\n}\"​\n\n"],"headingContent":"Binary Vector​","anchorList":[{"label":"Binary Vector​","href":"Binary-Vector​","type":1,"isActive":false},{"label":"Overview​","href":"Overview​","type":2,"isActive":false},{"label":"Use binary vectors in Milvus​","href":"Use-binary-vectors-in-Milvus​","type":2,"isActive":false}]}