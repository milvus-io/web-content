{"codeList":["$ pip install --upgrade --quiet pymilvus numpy scipy langchain langchain-core langchain-openai tqdm\n","import os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-***********\"\n","import numpy as np\n\nfrom collections import defaultdict\nfrom scipy.sparse import csr_matrix\nfrom pymilvus import MilvusClient\nfrom langchain_core.messages import AIMessage, HumanMessage\nfrom langchain_core.prompts import ChatPromptTemplate, HumanMessagePromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser, JsonOutputParser\nfrom langchain_openai import ChatOpenAI, OpenAIEmbeddings\nfrom tqdm import tqdm\n","milvus_client = MilvusClient(uri=\"./milvus.db\")\n\nllm = ChatOpenAI(\n    model=\"gpt-4o\",\n    temperature=0,\n)\nembedding_model = OpenAIEmbeddings(model=\"text-embedding-3-small\")\n","nano_dataset = [\n    {\n        \"passage\": \"Jakob Bernoulli (1654–1705): Jakob was one of the earliest members of the Bernoulli family to gain prominence in mathematics. He made significant contributions to calculus, particularly in the development of the theory of probability. He is known for the Bernoulli numbers and the Bernoulli theorem, a precursor to the law of large numbers. He was the older brother of Johann Bernoulli, another influential mathematician, and the two had a complex relationship that involved both collaboration and rivalry.\",\n        \"triplets\": [\n            [\"Jakob Bernoulli\", \"made significant contributions to\", \"calculus\"],\n            [\n                \"Jakob Bernoulli\",\n                \"made significant contributions to\",\n                \"the theory of probability\",\n            ],\n            [\"Jakob Bernoulli\", \"is known for\", \"the Bernoulli numbers\"],\n            [\"Jakob Bernoulli\", \"is known for\", \"the Bernoulli theorem\"],\n            [\"The Bernoulli theorem\", \"is a precursor to\", \"the law of large numbers\"],\n            [\"Jakob Bernoulli\", \"was the older brother of\", \"Johann Bernoulli\"],\n        ],\n    },\n    {\n        \"passage\": \"Johann Bernoulli (1667–1748): Johann, Jakob’s younger brother, was also a major figure in the development of calculus. He worked on infinitesimal calculus and was instrumental in spreading the ideas of Leibniz across Europe. Johann also contributed to the calculus of variations and was known for his work on the brachistochrone problem, which is the curve of fastest descent between two points.\",\n        \"triplets\": [\n            [\n                \"Johann Bernoulli\",\n                \"was a major figure of\",\n                \"the development of calculus\",\n            ],\n            [\"Johann Bernoulli\", \"was\", \"Jakob's younger brother\"],\n            [\"Johann Bernoulli\", \"worked on\", \"infinitesimal calculus\"],\n            [\"Johann Bernoulli\", \"was instrumental in spreading\", \"Leibniz's ideas\"],\n            [\"Johann Bernoulli\", \"contributed to\", \"the calculus of variations\"],\n            [\"Johann Bernoulli\", \"was known for\", \"the brachistochrone problem\"],\n        ],\n    },\n    {\n        \"passage\": \"Daniel Bernoulli (1700–1782): The son of Johann Bernoulli, Daniel made major contributions to fluid dynamics, probability, and statistics. He is most famous for Bernoulli’s principle, which describes the behavior of fluid flow and is fundamental to the understanding of aerodynamics.\",\n        \"triplets\": [\n            [\"Daniel Bernoulli\", \"was the son of\", \"Johann Bernoulli\"],\n            [\"Daniel Bernoulli\", \"made major contributions to\", \"fluid dynamics\"],\n            [\"Daniel Bernoulli\", \"made major contributions to\", \"probability\"],\n            [\"Daniel Bernoulli\", \"made major contributions to\", \"statistics\"],\n            [\"Daniel Bernoulli\", \"is most famous for\", \"Bernoulli’s principle\"],\n            [\n                \"Bernoulli’s principle\",\n                \"is fundamental to\",\n                \"the understanding of aerodynamics\",\n            ],\n        ],\n    },\n    {\n        \"passage\": \"Leonhard Euler (1707–1783) was one of the greatest mathematicians of all time, and his relationship with the Bernoulli family was significant. Euler was born in Basel and was a student of Johann Bernoulli, who recognized his exceptional talent and mentored him in mathematics. Johann Bernoulli’s influence on Euler was profound, and Euler later expanded upon many of the ideas and methods he learned from the Bernoullis.\",\n        \"triplets\": [\n            [\n                \"Leonhard Euler\",\n                \"had a significant relationship with\",\n                \"the Bernoulli family\",\n            ],\n            [\"leonhard Euler\", \"was born in\", \"Basel\"],\n            [\"Leonhard Euler\", \"was a student of\", \"Johann Bernoulli\"],\n            [\"Johann Bernoulli's influence\", \"was profound on\", \"Euler\"],\n        ],\n    },\n]\n","entityid_2_relationids = defaultdict(list)\nrelationid_2_passageids = defaultdict(list)\n\nentities = []\nrelations = []\npassages = []\nfor passage_id, dataset_info in enumerate(nano_dataset):\n    passage, triplets = dataset_info[\"passage\"], dataset_info[\"triplets\"]\n    passages.append(passage)\n    for triplet in triplets:\n        if triplet[0] not in entities:\n            entities.append(triplet[0])\n        if triplet[2] not in entities:\n            entities.append(triplet[2])\n        relation = \" \".join(triplet)\n        if relation not in relations:\n            relations.append(relation)\n            entityid_2_relationids[entities.index(triplet[0])].append(\n                len(relations) - 1\n            )\n            entityid_2_relationids[entities.index(triplet[2])].append(\n                len(relations) - 1\n            )\n        relationid_2_passageids[relations.index(relation)].append(passage_id)\n","embedding_dim = len(embedding_model.embed_query(\"foo\"))\n\n\ndef create_milvus_collection(collection_name: str):\n    if milvus_client.has_collection(collection_name=collection_name):\n        milvus_client.drop_collection(collection_name=collection_name)\n    milvus_client.create_collection(\n        collection_name=collection_name,\n        dimension=embedding_dim,\n        consistency_level=\"Strong\",\n    )\n\n\nentity_col_name = \"entity_collection\"\nrelation_col_name = \"relation_collection\"\npassage_col_name = \"passage_collection\"\ncreate_milvus_collection(entity_col_name)\ncreate_milvus_collection(relation_col_name)\ncreate_milvus_collection(passage_col_name)\n","def milvus_insert(\n    collection_name: str,\n    text_list: list[str],\n):\n    batch_size = 512\n    for row_id in tqdm(range(0, len(text_list), batch_size), desc=\"Inserting\"):\n        batch_texts = text_list[row_id : row_id + batch_size]\n        batch_embeddings = embedding_model.embed_documents(batch_texts)\n\n        batch_ids = [row_id + j for j in range(len(batch_texts))]\n        batch_data = [\n            {\n                \"id\": id_,\n                \"text\": text,\n                \"vector\": vector,\n            }\n            for id_, text, vector in zip(batch_ids, batch_texts, batch_embeddings)\n        ]\n        milvus_client.insert(\n            collection_name=collection_name,\n            data=batch_data,\n        )\n\n\nmilvus_insert(\n    collection_name=relation_col_name,\n    text_list=relations,\n)\n\nmilvus_insert(\n    collection_name=entity_col_name,\n    text_list=entities,\n)\n\nmilvus_insert(\n    collection_name=passage_col_name,\n    text_list=passages,\n)\n","query = \"What contribution did the son of Euler's teacher make?\"\n\nquery_ner_list = [\"Euler\"]\n# query_ner_list = ner(query) # In practice, replace it with your custom NER approach\n\nquery_ner_embeddings = [\n    embedding_model.embed_query(query_ner) for query_ner in query_ner_list\n]\n\ntop_k = 3\n\nentity_search_res = milvus_client.search(\n    collection_name=entity_col_name,\n    data=query_ner_embeddings,\n    limit=top_k,\n    output_fields=[\"id\"],\n)\n\nquery_embedding = embedding_model.embed_query(query)\n\nrelation_search_res = milvus_client.search(\n    collection_name=relation_col_name,\n    data=[query_embedding],\n    limit=top_k,\n    output_fields=[\"id\"],\n)[0]\n","# Construct the adjacency matrix of entities and relations where the value of the adjacency matrix is 1 if an entity is related to a relation, otherwise 0.\nentity_relation_adj = np.zeros((len(entities), len(relations)))\nfor entity_id, entity in enumerate(entities):\n    entity_relation_adj[entity_id, entityid_2_relationids[entity_id]] = 1\n\n# Convert the adjacency matrix to a sparse matrix for efficient computation.\nentity_relation_adj = csr_matrix(entity_relation_adj)\n\n# Use the entity-relation adjacency matrix to construct 1 degree entity-entity and relation-relation adjacency matrices.\nentity_adj_1_degree = entity_relation_adj @ entity_relation_adj.T\nrelation_adj_1_degree = entity_relation_adj.T @ entity_relation_adj\n\n# Specify the target degree of the subgraph to be expanded.\n# 1 or 2 is enough for most cases.\ntarget_degree = 1\n\n# Compute the target degree adjacency matrices using matrix multiplication.\nentity_adj_target_degree = entity_adj_1_degree\nfor _ in range(target_degree - 1):\n    entity_adj_target_degree = entity_adj_target_degree * entity_adj_1_degree\nrelation_adj_target_degree = relation_adj_1_degree\nfor _ in range(target_degree - 1):\n    relation_adj_target_degree = relation_adj_target_degree * relation_adj_1_degree\n\nentity_relation_adj_target_degree = entity_adj_target_degree @ entity_relation_adj\n","expanded_relations_from_relation = set()\nexpanded_relations_from_entity = set()\n# You can set the similarity threshold here to guarantee the quality of the retrieved ones.\n# entity_sim_filter_thresh = ...\n# relation_sim_filter_thresh = ...\n\nfiltered_hit_relation_ids = [\n    relation_res[\"entity\"][\"id\"]\n    for relation_res in relation_search_res\n    # if relation_res['distance'] > relation_sim_filter_thresh\n]\nfor hit_relation_id in filtered_hit_relation_ids:\n    expanded_relations_from_relation.update(\n        relation_adj_target_degree[hit_relation_id].nonzero()[1].tolist()\n    )\n\nfiltered_hit_entity_ids = [\n    one_entity_res[\"entity\"][\"id\"]\n    for one_entity_search_res in entity_search_res\n    for one_entity_res in one_entity_search_res\n    # if one_entity_res['distance'] > entity_sim_filter_thresh\n]\n\nfor filtered_hit_entity_id in filtered_hit_entity_ids:\n    expanded_relations_from_entity.update(\n        entity_relation_adj_target_degree[filtered_hit_entity_id].nonzero()[1].tolist()\n    )\n\n# Merge the expanded relations from the relation and entity retrieval ways.\nrelation_candidate_ids = list(\n    expanded_relations_from_relation | expanded_relations_from_entity\n)\n\nrelation_candidate_texts = [\n    relations[relation_id] for relation_id in relation_candidate_ids\n]\n","query_prompt_one_shot_input = \"\"\"I will provide you with a list of relationship descriptions. Your task is to select 3 relationships that may be useful to answer the given question. Please return a JSON object containing your thought process and a list of the selected relationships in order of their relevance.\n\nQuestion:\nWhen was the mother of the leader of the Third Crusade born?\n\nRelationship descriptions:\n[1] Eleanor was born in 1122.\n[2] Eleanor married King Louis VII of France.\n[3] Eleanor was the Duchess of Aquitaine.\n[4] Eleanor participated in the Second Crusade.\n[5] Eleanor had eight children.\n[6] Eleanor was married to Henry II of England.\n[7] Eleanor was the mother of Richard the Lionheart.\n[8] Richard the Lionheart was the King of England.\n[9] Henry II was the father of Richard the Lionheart.\n[10] Henry II was the King of England.\n[11] Richard the Lionheart led the Third Crusade.\n\n\"\"\"\nquery_prompt_one_shot_output = \"\"\"{\"thought_process\": \"To answer the question about the birth of the mother of the leader of the Third Crusade, I first need to identify who led the Third Crusade and then determine who his mother was. After identifying his mother, I can look for the relationship that mentions her birth.\", \"useful_relationships\": [\"[11] Richard the Lionheart led the Third Crusade\", \"[7] Eleanor was the mother of Richard the Lionheart\", \"[1] Eleanor was born in 1122\"]}\"\"\"\n\nquery_prompt_template = \"\"\"Question:\n{question}\n\nRelationship descriptions:\n{relation_des_str}\n\n\"\"\"\n\n\ndef rerank_relations(\n    query: str, relation_candidate_texts: list[str], relation_candidate_ids: list[str]\n) -> list[int]:\n    relation_des_str = \"\\n\".join(\n        map(\n            lambda item: f\"[{item[0]}] {item[1]}\",\n            zip(relation_candidate_ids, relation_candidate_texts),\n        )\n    ).strip()\n    rerank_prompts = ChatPromptTemplate.from_messages(\n        [\n            HumanMessage(query_prompt_one_shot_input),\n            AIMessage(query_prompt_one_shot_output),\n            HumanMessagePromptTemplate.from_template(query_prompt_template),\n        ]\n    )\n    rerank_chain = (\n        rerank_prompts\n        | llm.bind(response_format={\"type\": \"json_object\"})\n        | JsonOutputParser()\n    )\n    rerank_res = rerank_chain.invoke(\n        {\"question\": query, \"relation_des_str\": relation_des_str}\n    )\n    rerank_relation_ids = []\n    rerank_relation_lines = rerank_res[\"useful_relationships\"]\n    id_2_lines = {}\n    for line in rerank_relation_lines:\n        id_ = int(line[line.find(\"[\") + 1 : line.find(\"]\")])\n        id_2_lines[id_] = line.strip()\n        rerank_relation_ids.append(id_)\n    return rerank_relation_ids\n\n\nrerank_relation_ids = rerank_relations(\n    query,\n    relation_candidate_texts=relation_candidate_texts,\n    relation_candidate_ids=relation_candidate_ids,\n)\n","final_top_k = 2\n\nfinal_passages = []\nfinal_passage_ids = []\nfor relation_id in rerank_relation_ids:\n    for passage_id in relationid_2_passageids[relation_id]:\n        if passage_id not in final_passage_ids:\n            final_passage_ids.append(passage_id)\n            final_passages.append(passages[passage_id])\npassages_from_our_method = final_passages[:final_top_k]\n","naive_passage_res = milvus_client.search(\n    collection_name=passage_col_name,\n    data=[query_embedding],\n    limit=final_top_k,\n    output_fields=[\"text\"],\n)[0]\npassages_from_naive_rag = [res[\"entity\"][\"text\"] for res in naive_passage_res]\n\nprint(\n    f\"Passages retrieved from naive RAG: \\n{passages_from_naive_rag}\\n\\n\"\n    f\"Passages retrieved from our method: \\n{passages_from_our_method}\\n\\n\"\n)\n\n\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\n            \"human\",\n            \"\"\"Use the following pieces of retrieved context to answer the question. If there is not enough information in the retrieved context to answer the question, just say that you don't know.\nQuestion: {question}\nContext: {context}\nAnswer:\"\"\",\n        )\n    ]\n)\n\nrag_chain = prompt | llm | StrOutputParser()\n\nanswer_from_naive_rag = rag_chain.invoke(\n    {\"question\": query, \"context\": \"\\n\".join(passages_from_naive_rag)}\n)\nanswer_from_our_method = rag_chain.invoke(\n    {\"question\": query, \"context\": \"\\n\".join(passages_from_our_method)}\n)\n\nprint(\n    f\"Answer from naive RAG: {answer_from_naive_rag}\\n\\nAnswer from our method: {answer_from_our_method}\"\n)\n"],"headingContent":"Graph RAG with Milvus","anchorList":[{"label":"Graph RAG with Milvus","href":"Graph-RAG-with-Milvus","type":1,"isActive":false},{"label":"Prerequisites","href":"Prerequisites","type":2,"isActive":false},{"label":"Offline Data Loading","href":"Offline-Data-Loading","type":2,"isActive":false},{"label":"Online Querying","href":"Online-Querying","type":2,"isActive":false}]}