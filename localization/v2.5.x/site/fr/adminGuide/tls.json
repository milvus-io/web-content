{"codeList":["openssl version\n","sudo apt install openssl\n","mkdir cert && cd cert\ntouch openssl.cnf gen.sh\n","#\n# OpenSSL example configuration file.\n# This is mostly being used for generation of certificate requests.\n#\n\n# This definition stops the following lines choking if HOME isn't\n# defined.\nHOME            = .\nRANDFILE        = $ENV::HOME/.rnd\n\n# Extra OBJECT IDENTIFIER info:\n#oid_file       = $ENV::HOME/.oid\noid_section     = new_oids\n\n# To use this configuration file with the \"-extfile\" option of the\n# \"openssl x509\" utility, name here the section containing the\n# X.509v3 extensions to use:\n# extensions        = \n# (Alternatively, use a configuration file that has only\n# X.509v3 extensions in its main [= default] section.)\n\n[ new_oids ]\n\n# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.\n# Add a simple OID like this:\n# testoid1=1.2.3.4\n# Or use config file substitution like this:\n# testoid2=${testoid1}.5.6\n\n# Policies used by the TSA examples.\ntsa_policy1 = 1.2.3.4.1\ntsa_policy2 = 1.2.3.4.5.6\ntsa_policy3 = 1.2.3.4.5.7\n\n####################################################################\n[ ca ]\ndefault_ca  = CA_default        # The default ca section\n\n####################################################################\n[ CA_default ]\n\ndir     = ./demoCA      # Where everything is kept\ncerts       = $dir/certs        # Where the issued certs are kept\ncrl_dir     = $dir/crl      # Where the issued crl are kept\ndatabase    = $dir/index.txt    # database index file.\n#unique_subject = no            # Set to 'no' to allow creation of\n                    # several ctificates with same subject.\nnew_certs_dir   = $dir/newcerts     # default place for new certs.\n\ncertificate = $dir/cacert.pem   # The CA certificate\nserial      = $dir/serial       # The current serial number\ncrlnumber   = $dir/crlnumber    # the current crl number\n                    # must be commented out to leave a V1 CRL\ncrl     = $dir/crl.pem      # The current CRL\nprivate_key = $dir/private/cakey.pem# The private key\nRANDFILE    = $dir/private/.rand    # private random number file\n\nx509_extensions = usr_cert      # The extentions to add to the cert\n\n# Comment out the following two lines for the \"traditional\"\n# (and highly broken) format.\nname_opt    = ca_default        # Subject Name options\ncert_opt    = ca_default        # Certificate field options\n\n# Extension copying option: use with caution.\ncopy_extensions = copy\n\n# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs\n# so this is commented out by default to leave a V1 CRL.\n# crlnumber must also be commented out to leave a V1 CRL.\n# crl_extensions    = crl_ext\n\ndefault_days    = 365           # how long to certify for\ndefault_crl_days= 30            # how long before next CRL\ndefault_md  = default       # use public key default MD\npreserve    = no            # keep passed DN ordering\n\n# A few difference way of specifying how similar the request should look\n# For type CA, the listed attributes must be the same, and the optional\n# and supplied fields are just that :-)\npolicy      = policy_match\n\n# For the CA policy\n[ policy_match ]\ncountryName     = match\nstateOrProvinceName = match\norganizationName    = match\norganizationalUnitName  = optional\ncommonName      = supplied\nemailAddress        = optional\n\n# For the 'anything' policy\n# At this point in time, you must list all acceptable 'object'\n# types.\n[ policy_anything ]\ncountryName     = optional\nstateOrProvinceName = optional\nlocalityName        = optional\norganizationName    = optional\norganizationalUnitName  = optional\ncommonName      = supplied\nemailAddress        = optional\n\n####################################################################\n[ req ]\ndefault_bits        = 2048\ndefault_keyfile     = privkey.pem\ndistinguished_name  = req_distinguished_name\nattributes      = req_attributes\nx509_extensions = v3_ca # The extentions to add to the self signed cert\n\n# Passwords for private keys if not present they will be prompted for\n# input_password = secret\n# output_password = secret\n\n# This sets a mask for permitted string types. There are several options. \n# default: PrintableString, T61String, BMPString.\n# pkix   : PrintableString, BMPString (PKIX recommendation before 2004)\n# utf8only: only UTF8Strings (PKIX recommendation after 2004).\n# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).\n# MASK:XXXX a literal mask value.\n# WARNING: ancient versions of Netscape crash on BMPStrings or UTF8Strings.\nstring_mask = utf8only\n\nreq_extensions = v3_req # The extensions to add to a certificate request\n\n[ req_distinguished_name ]\ncountryName         = Country Name (2 letter code)\ncountryName_default     = AU\ncountryName_min         = 2\ncountryName_max         = 2\n\nstateOrProvinceName     = State or Province Name (full name)\nstateOrProvinceName_default = Some-State\n\nlocalityName            = Locality Name (eg, city)\n\n0.organizationName      = Organization Name (eg, company)\n0.organizationName_default  = Internet Widgits Pty Ltd\n\n# we can do this but it is not needed normally :-)\n#1.organizationName     = Second Organization Name (eg, company)\n#1.organizationName_default = World Wide Web Pty Ltd\n\norganizationalUnitName      = Organizational Unit Name (eg, section)\n#organizationalUnitName_default =\n\ncommonName          = Common Name (e.g. server FQDN or YOUR name)\ncommonName_max          = 64\n\nemailAddress            = Email Address\nemailAddress_max        = 64\n\n# SET-ex3           = SET extension number 3\n\n[ req_attributes ]\nchallengePassword       = A challenge password\nchallengePassword_min       = 4\nchallengePassword_max       = 20\n\nunstructuredName        = An optional company name\n\n[ usr_cert ]\n\n# These extensions are added when 'ca' signs a request.\n\n# This goes against PKIX guidelines but some CAs do it and some software\n# requires this to avoid interpreting an end user certificate as a CA.\n\nbasicConstraints=CA:FALSE\n\n# Here are some examples of the usage of nsCertType. If it is omitted\n# the certificate can be used for anything *except* object signing.\n\n# This is OK for an SSL server.\n# nsCertType            = server\n\n# For an object signing certificate this would be used.\n# nsCertType = objsign\n\n# For normal client use this is typical\n# nsCertType = client, email\n\n# and for everything including object signing:\n# nsCertType = client, email, objsign\n\n# This is typical in keyUsage for a client certificate.\n# keyUsage = nonRepudiation, digitalSignature, keyEncipherment\n\n# This will be displayed in Netscape's comment listbox.\nnsComment           = \"OpenSSL Generated Certificate\"\n\n# PKIX recommendations harmless if included in all certificates.\nsubjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid,issuer\n\n# This stuff is for subjectAltName and issuerAltname.\n# Import the email address.\n# subjectAltName=email:copy\n# An alternative to produce certificates that aren't\n# deprecated according to PKIX.\n# subjectAltName=email:move\n\n# Copy subject details\n# issuerAltName=issuer:copy\n\n#nsCaRevocationUrl      = http://www.domain.dom/ca-crl.pem\n#nsBaseUrl\n#nsRevocationUrl\n#nsRenewalUrl\n#nsCaPolicyUrl\n#nsSslServerName\n\n# This is required for TSA certificates.\n# extendedKeyUsage = critical,timeStamping\n\n[ v3_req ]\n\n# Extensions to add to a certificate request\n\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\n\n\n[ v3_ca ]\n\n\n# Extensions for a typical CA\n\n\n# PKIX recommendation.\n\nsubjectKeyIdentifier=hash\n\nauthorityKeyIdentifier=keyid:always,issuer\n\n# This is what PKIX recommends but some broken software chokes on critical\n# extensions.\n#basicConstraints = critical,CA:true\n# So we do this instead.\nbasicConstraints = CA:true\n\n# Key usage: this is typical for a CA certificate. However since it will\n# prevent it being used as an test self-signed certificate it is best\n# left out by default.\n# keyUsage = cRLSign, keyCertSign\n\n# Some might want this also\n# nsCertType = sslCA, emailCA\n\n# Include email address in subject alt name: another PKIX recommendation\n# subjectAltName=email:copy\n# Copy issuer details\n# issuerAltName=issuer:copy\n\n# DER hex encoding of an extension: beware experts only!\n# obj=DER:02:03\n# Where 'obj' is a standard or added object\n# You can even override a supported extension:\n# basicConstraints= critical, DER:30:03:01:01:FF\n\n[ crl_ext ]\n\n# CRL extensions.\n# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.\n\n# issuerAltName=issuer:copy\nauthorityKeyIdentifier=keyid:always\n\n[ proxy_cert_ext ]\n# These extensions should be added when creating a proxy certificate\n\n# This goes against PKIX guidelines but some CAs do it and some software\n# requires this to avoid interpreting an end user certificate as a CA.\n\nbasicConstraints=CA:FALSE\n\n# Here are some examples of the usage of nsCertType. If it is omitted\n# the certificate can be used for anything *except* object signing.\n\n# This is OK for an SSL server.\n# nsCertType            = server\n\n# For an object signing certificate this would be used.\n# nsCertType = objsign\n\n# For normal client use this is typical\n# nsCertType = client, email\n\n# and for everything including object signing:\n# nsCertType = client, email, objsign\n\n# This is typical in keyUsage for a client certificate.\n# keyUsage = nonRepudiation, digitalSignature, keyEncipherment\n\n# This will be displayed in Netscape's comment listbox.\nnsComment           = \"OpenSSL Generated Certificate\"\n\n# PKIX recommendations harmless if included in all certificates.\nsubjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid,issuer\n\n# This stuff is for subjectAltName and issuerAltname.\n# Import the email address.\n# subjectAltName=email:copy\n# An alternative to produce certificates that aren't\n# deprecated according to PKIX.\n# subjectAltName=email:move\n\n# Copy subject details\n# issuerAltName=issuer:copy\n\n#nsCaRevocationUrl      = http://www.domain.dom/ca-crl.pem\n#nsBaseUrl\n#nsRevocationUrl\n#nsRenewalUrl\n#nsCaPolicyUrl\n#nsSslServerName\n\n# This really needs to be in place for it to be a proxy certificate.\nproxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo\n\n####################################################################\n[ tsa ]\n\ndefault_tsa = tsa_config1   # the default TSA section\n\n[ tsa_config1 ]\n\n# These are used by the TSA reply generation only.\ndir     = ./demoCA      # TSA root directory\nserial      = $dir/tsaserial    # The current serial number (mandatory)\ncrypto_device   = builtin       # OpenSSL engine to use for signing\nsigner_cert = $dir/tsacert.pem  # The TSA signing certificate\n                    # (optional)\ncerts       = $dir/cacert.pem   # Certificate chain to include in reply\n                    # (optional)\nsigner_key  = $dir/private/tsakey.pem # The TSA private key (optional)\n\ndefault_policy  = tsa_policy1       # Policy if request did not specify it\n                    # (optional)\nother_policies  = tsa_policy2, tsa_policy3  # acceptable policies (optional)\ndigests     = md5, sha1     # Acceptable message digests (mandatory)\naccuracy    = secs:1, millisecs:500, microsecs:100  # (optional)\nclock_precision_digits  = 0 # number of digits after dot. (optional)\nordering        = yes   # Is ordering defined for timestamps?\n                # (optional, default: no)\ntsa_name        = yes   # Must the TSA name be included in the reply?\n                # (optional, default: no)\ness_cert_id_chain   = no    # Must the ESS cert id chain be included?\n                # (optional, default: no)\n","#!/usr/bin/env sh\n# your variables\nCountry=\"CN\"\nState=\"Shanghai\"\nLocation=\"Shanghai\"\nOrganization=\"milvus\"\nOrganizational=\"milvus\"\nCommonName=\"localhost\"\n\necho \"generate ca.key\"\nopenssl genrsa -out ca.key 2048\n\necho \"generate ca.pem\"\nopenssl req -new -x509 -key ca.key -out ca.pem -days 3650 -subj \"/C=$Country/ST=$State/L=$Location/O=$Organization/OU=$Organizational/CN=$CommonName\"\n\necho \"generate server SAN certificate\"\nopenssl genpkey -algorithm RSA -out server.key\nopenssl req -new -nodes -key server.key -out server.csr -days 3650 -subj \"/C=$Country/O=$Organization/OU=$Organizational/CN=$CommonName\" -config ./openssl.cnf -extensions v3_req\nopenssl x509 -req -days 3650 -in server.csr -out server.pem -CA ca.pem -CAkey ca.key -CAcreateserial -extfile ./openssl.cnf -extensions v3_req\n\necho \"generate client SAN certificate\"\nopenssl genpkey -algorithm RSA -out client.key\nopenssl req -new -nodes -key client.key -out client.csr -days 3650 -subj \"/C=$Country/O=$Organization/OU=$Organizational/CN=$CommonName\" -config ./openssl.cnf -extensions v3_req\nopenssl x509 -req -days 3650 -in client.csr -out client.pem -CA ca.pem -CAkey ca.key -CAcreateserial -extfile ./openssl.cnf -extensions v3_req\n\n","chmod +x gen.sh\n./gen.sh\n","openssl genpkey -algorithm RSA -out ca.key\n","openssl req -new -x509 -key ca.key -out ca.pem -days 3650 -subj \"/C=$Country/ST=$State/L=$Location/O=$Organization/OU=$Organizational/CN=$CommonName\"\n","openssl genpkey -algorithm RSA -out server.key\n","openssl req -new -nodes -key server.key -out server.csr -days 3650 -subj \"/C=$Country/O=$Organization/OU=$Organizational/CN=$CommonName\" -config ./openssl.cnf -extensions v3_req\n","openssl x509 -req -days 3650 -in server.csr -out server.pem -CA ca.pem -CAkey ca.key -CAcreateserial -extfile ./openssl.cnf -extensions v3_req\n","tls:\n  serverPemPath: /milvus/tls/server.pem\n  serverKeyPath: /milvus/tls/server.key\n  caPemPath: /milvus/tls/ca.pem\n\ncommon:\n  security:\n    tlsMode: 1\n","├── docker-compose.yml\n├── milvus.yaml\n└── tls\n     ├── server.pem\n     ├── server.key\n     └── ca.pem\n","  standalone:\n    container_name: milvus-standalone\n    image: milvusdb/milvus:latest\n    command: [\"milvus\", \"run\", \"standalone\"]\n    security_opt:\n    - seccomp:unconfined\n    environment:\n      ETCD_ENDPOINTS: etcd:2379\n      MINIO_ADDRESS: minio:9000\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/tls:/milvus/tls\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus.yaml:/milvus/configs/milvus.yaml\n","sudo docker compose up -d\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"https://localhost:19530\",\n    secure=True,\n    server_pem_path=\"path_to/server.pem\",\n    server_name=\"localhost\"\n)\n","from pymilvus import MilvusClient\n\nclient = MilvusClient(\n    uri=\"https://localhost:19530\",\n    secure=True,\n    client_pem_path=\"path_to/client.pem\",\n    client_key_path=\"path_to/client.key\",\n    ca_pem_path=\"path_to/ca.pem\",\n    server_name=\"localhost\"\n)\n","curl --cacert path_to/ca.pem https://localhost:19530/v2/vectordb/collections/list\n","curl --cert path_to/client.pem --key path_to/client.key --cacert path_to/ca.pem https://localhost:19530/v2/vectordb/collections/list\n"],"headingContent":"Encryption in Transit","anchorList":[{"label":"Encryption in Transit","href":"Encryption-in-Transit","type":1,"isActive":false},{"label":"Create your own certificate","href":"Create-your-own-certificate","type":2,"isActive":false},{"label":"Set up a Milvus server with TLS","href":"Set-up-a-Milvus-server-with-TLS","type":2,"isActive":false},{"label":"Connect to the Milvus server with TLS","href":"Connect-to-the-Milvus-server-with-TLS","type":2,"isActive":false},{"label":"Connect to the Milvus RESTful server with TLS","href":"Connect-to-the-Milvus-RESTful-server-with-TLS","type":2,"isActive":false}]}