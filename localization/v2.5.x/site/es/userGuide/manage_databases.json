{"codeList":["from pymilvus import connections, db\n\nconn = connections.connect(host=\"127.0.0.1\", port=19530)\n\ndatabase = db.create_database(\"my_database\")\n","import io.milvus.client.MilvusServiceClient;\nimport io.milvus.param.ConnectParam;\nimport io.milvus.param.collection.CreateDatabaseParam;\n\n// 1. Connect to Milvus server\nConnectParam connectParam = ConnectParam.newBuilder()\n    .withUri(CLUSTER_ENDPOINT)\n    .withToken(TOKEN)\n    .build();\n\nMilvusServiceClient client = new MilvusServiceClient(connectParam);\n\n// 3. Create a new database\nCreateDatabaseParam createDatabaseParam = CreateDatabaseParam.newBuilder()\n    .withDatabaseName(\"\")\n    .build();\n\nR<RpcStatus> response = client.createDatabase(createDatabaseParam);\n","const address = \"http://localhost:19530\";\n\n// 1. Set up a Milvus Client\nclient = new MilvusClient({ address });\n\n// 3. Create a database\nres = await client.createDatabase({\n    db_name: \"my_database\",\n});\n\nconsole.log(res);\n\n// {\n//   error_code: 'Success',\n//   reason: '',\n//   code: 0,\n//   retriable: false,\n//   detail: ''\n// }\n","db.using_database(\"my_database\")\n","// No equivalent method is available.\n","// 4. Activate another database\nres = await client.useDatabase({\n    db_name: \"my_database\",\n});\n\nconsole.log(res);\n","conn = connections.connect(\n    host=\"127.0.0.1\",\n    port=\"19530\",\n    db_name=\"my_database\"\n)\n","ConnectParam connectParam = ConnectParam.newBuilder()\n    .withDatabaseName(\"my_database\")\n    .withUri(CLUSTER_ENDPOINT)\n    .withToken(TOKEN)\n    .build();\n\nMilvusServiceClient client = new MilvusServiceClient(connectParam);\n","const address = \"http://localhost:19530\";\nconst db_name = \"my_database\";\n\n// 1. Set up a Milvus Client\nclient = new MilvusClient({ address, db_name });\n","db.list_database()\n\n# Output\n['default', 'my_database']\n","import io.milvus.grpc.ListDatabasesResponse;\nimport io.milvus.param.R;\n\n// 2. List all databases\nR<ListDatabasesResponse> listDatabasesResponse = client.listDatabases();\nSystem.out.println(listDatabasesResponse.getData());\n\n// status {\n// }\n// db_names: \"default\"\n// db_names: \"my_database\"\n// created_timestamp: 1716794498117757990\n// created_timestamp: 1716797196479639477\n","res = await client.listDatabases();\n\nconsole.log(res.db_names);\n\n// [ 'default', 'my_database' ]\n","db.drop_database(\"my_database\")\n\ndb.list_database()\n\n# Output\n['default']\n","import io.milvus.param.collection.DropDatabaseParam;\n\nDropDatabaseParam dropDatabaseParam = DropDatabaseParam.newBuilder()\n    .withDatabaseName(\"my_database\")\n    .build();\n\nresponse = client.dropDatabase(dropDatabaseParam);\n","res = await client.dropDatabase({\n    db_name: \"my_database\",\n});\n","from pymilvus import connections, Role\n\n_URI = \"http://localhost:19530\"\n_TOKEN = \"root:Milvus\"\n_DB_NAME = \"default\"\n\n\ndef connect_to_milvus(db_name=\"default\"):\n    print(f\"connect to milvus\\n\")\n    connections.connect(\n        uri=_URI,\n        token=_TOKEN,\n        db_name=db_name\n    )\n","String URI = \"http://localhost:19530\";\nString TOKEN = \"root:Milvus\";\n\npublic class ConnectToMilvus {\n    private String _dbName = \"default\";\n\n    public newBuilder() {}\n\n    public MilvusServiceClient build() {\n        ConnectParam connectParam = ConnectParam.newBuilder()\n            .withUri(URI)\n            .withToken(TOKEN)\n            .withDatabaseName(_dbNAME)\n            .build();\n\n        return new MilvusServiceClient(connectParam);\n    }\n\n    public newBuilder withDbName(String dbName) {\n        this._dbName = dbName;\n        return this;\n    }\n}\n","const address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\n\nfunction connectToMilvus(dbName = \"default\") {\n    const client = new MilvusClient({\n        address,\n        token,\n        dbName,\n    });\n\n    return client;\n}\n","_ROLE_NAME = \"test_role\"\n_PRIVILEGE_INSERT = \"Insert\"\n\nconnect_to_milvus()\nrole = Role(_ROLE_NAME)\nrole.create()\n\nconnect_to_milvus()\nrole.grant(\"Collection\", \"*\", _PRIVILEGE_INSERT)\nprint(role.list_grants())\nprint(role.list_grant(\"Collection\", \"*\"))\nrole.revoke(\"Global\", \"*\", _PRIVILEGE_INSERT)\n","String ROLE_NAME = \"test_role\";\nString PRIVILEGE_INSERT = \"Insert\";\n\nMilvusServiceClient client = new ConnectToMilvus().build();\nR<RpcStatus> response = client.createRole(CreateRoleParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .build());\n\nif (response.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(response.getMessage());\n}\n\nresponse = client.grantRolePrivilege(GrantRolePriviledgeParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Collection\")\n    .withObjectName(\"*\")\n    .withPrivilege(PRIVILEGE_INSERT)\n    .build());\n\nif (response.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(response.getMessage());\n}\n\nR<SelectGrantResponse> grants = client.selectGrantForRole(SelectGrantForRoleParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .build());\n\nif (grants.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(grants.getMessage());\n}\n\nSystem.out.println(grants.getData());\n\ngrants = client.selectGrantForRoleAndObject(SelectGrantForRoleAndObjectParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Collection\")\n    .withObjectName(\"*\")\n    .build());\n\nif (grants.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(grants.getMessage());\n}\n\nSystem.out.println(grants.getData());\n\nresponse = client.revokeRolePrivilege(RevokeRolePrivilegeParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Global\")\n    .withObjectName(\"*\")\n    .withPrivilege(PRIVILEGE_INSERT)\n    .build());\n\nif (response.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(response.getMessage());\n}\n\nresponse = client.revokeRolePrivilege(RevokeRolePrivilegeParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Global\")\n    .withObjectName(\"*\")\n    .withPrivilege(PRIVILEGE_INSERT)\n    .build());\n\nif (response.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(response.getMessage());\n}\n","const ROLE_NAME = \"test_role\";\nconst PRIVILEGE_INSERT = \"Insert\";\n\nconst client = connectToMilvus();\n\nasync function demo() {}\nawait client.createRole({\n  roleName: ROLE_NAME,\n});\n\nconst grants = await client.listGrants({\n  roleName: ROLE_NAME,\n});\n\nconsole.log(grants.grants);\n\nawait client.revokePrivilege({\n  roleName: ROLE_NAME,\n  object: \"Global\",\n  objectName: \"*\",\n  privilege: PRIVILEGE_INSERT,\n});\n","# NOTE: please make sure the 'foo' db has been created\nconnect_to_milvus(db_name=\"foo\")\n\n# This role will have the insert permission of all collections under foo db,\n# excluding the insert permissions of collections under other dbs\nrole.grant(\"Collection\", \"*\", _PRIVILEGE_INSERT)\nprint(role.list_grants())\nprint(role.list_grant(\"Collection\", \"*\"))\nrole.revoke(\"Global\", \"*\", _PRIVILEGE_INSERT)\n","// NOTE: please make sure the 'foo' db has been created\nMilvusServiceClient client = new ConnectToMilvus().withDbName(\"foo\").build();\n\n// This role will have the insert permission of all collections under foo db,\n// excluding the insert permissions of collections under other dbs\nR<RpcStatus> response = client.grantRolePrivilege(GrantRolePriviledgeParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Collection\")\n    .withObjectName(\"*\")\n    .withPrivilege(PRIVILEGE_INSERT)\n    .build());\n\nif (response.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(response.getMessage());\n}\n\nR<SelectGrantResponse> grants = client.selectGrantForRole(SelectGrantForRoleParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .build());\n\nif (grants.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(grants.getMessage());\n}\n\nSystem.out.println(grants.getData());\n\ngrants = client.selectGrantForRoleAndObject(SelectGrantForRoleAndObjectParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Collection\")\n    .withObjectName(\"*\")\n    .build());\n\nif (grants.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(grants.getMessage());\n}\n\nSystem.out.println(grants.getData());\n\nresponse = client.revokeRolePrivilege(RevokeRolePrivilegeParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Global\")\n    .withObjectName(\"*\")\n    .withPrivilege(PRIVILEGE_INSERT)\n    .build());\n\nif (response.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(response.getMessage());\n}\n","const client = connectToMilvus(\"foo\");\n\nasync function demo() {}\nawait client.createRole({\n  roleName: ROLE_NAME,\n});\n\nconst grants = await client.listGrants({\n  roleName: ROLE_NAME,\n});\n\nconsole.log(grants.grants);\n\nawait client.revokePrivilege({\n  roleName: ROLE_NAME,\n  object: \"Global\",\n  objectName: \"*\",\n  privilege: PRIVILEGE_INSERT,\n});\n","# NOTE: please make sure the 'foo' db has been created\n\ndb_name = \"foo\"\nconnect_to_milvus()\nrole.grant(\"Collection\", \"*\", _PRIVILEGE_INSERT, db_name=db_name)\nprint(role.list_grants(db_name=db_name))\nprint(role.list_grant(\"Collection\", \"*\", db_name=db_name))\nrole.revoke(\"Global\", \"*\", _PRIVILEGE_INSERT, db_name=db_name)\n","// NOTE: please make sure the 'foo' db has been created\n\nString dbName = \"foo\";\nMilvusServiceClient client = new ConnectToMilvus().build();\n\nR<RpcStatus> response = client.grantRolePrivilege(GrantRolePriviledgeParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Collection\")\n    .withObjectName(\"*\")\n    .withPrivilege(PRIVILEGE_INSERT)\n    .withDatabaseName(dbName)\n    .build());\n\nif (response.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(response.getMessage());\n}\n\nR<SelectGrantResponse> grants = client.selectGrantForRole(SelectGrantForRoleParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withDatabaseName(dbName)\n    .build());\n\nif (grants.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(grants.getMessage());\n}\n\nSystem.out.println(grants.getData());\n\ngrants = client.selectGrantForRoleAndObject(SelectGrantForRoleAndObjectParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Collection\")\n    .withObjectName(\"*\")\n    .withDatabaseName(dbName)\n    .build());\n\nif (grants.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(grants.getMessage());\n}\n\nSystem.out.println(grants.getData());\n\nresponse = client.revokeRolePrivilege(RevokeRolePrivilegeParam.newBuilder()\n    .withRoleName(ROLE_NAME)\n    .withObject(\"Global\")\n    .withObjectName(\"*\")\n    .withPrivilege(PRIVILEGE_INSERT)\n    .withDatabaseName(dbName)\n    .build());\n\nif (response.getStatus() != R.Status.Success.getCode()) {\n    throw new RuntimeException(response.getMessage());\n}\n","// The Node.js SDK currently cannot support this case.\n"],"headingContent":"Manage Databases","anchorList":[{"label":"Manage Databases","href":"Manage-Databases","type":1,"isActive":false},{"label":"Create database","href":"Create-database","type":2,"isActive":false},{"label":"Use a database","href":"Use-a-database","type":2,"isActive":false},{"label":"List databases","href":"List-databases","type":2,"isActive":false},{"label":"Drop database","href":"Drop-database","type":2,"isActive":false},{"label":"Use RBAC with database","href":"Use-RBAC-with-database","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}