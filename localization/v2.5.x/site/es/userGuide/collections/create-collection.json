{"codeList":["# 3. Create a collection in customized setup mode​\nfrom pymilvus import MilvusClient, DataType​\n​\nclient = MilvusClient(​\n    uri=\"http://localhost:19530\",​\n    token=\"root:Milvus\"​\n)​\n​\n# 3.1. Create schema​\nschema = MilvusClient.create_schema(​\n    auto_id=False,​\n    enable_dynamic_field=True,​\n)​\n​\n# 3.2. Add fields to schema​\nschema.add_field(field_name=\"my_id\", datatype=DataType.INT64, is_primary=True)​\nschema.add_field(field_name=\"my_vector\", datatype=DataType.FLOAT_VECTOR, dim=5)​\nschema.add_field(field_name=\"my_varchar\", datatype=DataType.VARCHAR, max_length=512)​\n\n","import io.milvus.v2.common.DataType;​\nimport io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\nimport io.milvus.v2.service.collection.request.AddFieldReq;​\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;​\n​\nString CLUSTER_ENDPOINT = \"http://localhost:19530\";​\nString TOKEN = \"root:Milvus\";​\n​\n// 1. Connect to Milvus server​\nConnectConfig connectConfig = ConnectConfig.builder()​\n        .uri(CLUSTER_ENDPOINT)​\n        .token(TOKEN)​\n        .build();​\n​\nMilvusClientV2 client = new MilvusClientV2(connectConfig);​\n​\n// 3. Create a collection in customized setup mode​\n​\n// 3.1 Create schema​\nCreateCollectionReq.CollectionSchema schema = client.createSchema();​\n​\n// 3.2 Add fields to schema​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"my_id\")​\n        .dataType(DataType.Int64)​\n        .isPrimaryKey(true)​\n        .autoID(false)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"my_vector\")​\n        .dataType(DataType.FloatVector)​\n        .dimension(5)​\n        .build());​\n​\nschema.addField(AddFieldReq.builder()​\n        .fieldName(\"my_varchar\")​\n        .dataType(DataType.VarChar)​\n        .maxLength(512)​\n        .build());​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst address = \"http://localhost:19530\";​\nconst token = \"root:Milvus\";​\nconst client = new MilvusClient({address, token});​\n​\n// 3. Create a collection in customized setup mode​\n// 3.1 Define fields​\nconst fields = [​\n    {​\n        name: \"my_id\",​\n        data_type: DataType.Int64,​\n        is_primary_key: true,​\n        auto_id: false​\n    },​\n    {​\n        name: \"my_vector\",​\n        data_type: DataType.FloatVector,​\n        dim: 5​\n    },​\n    {​\n        name: \"my_varchar\",​\n        data_type: DataType.VarChar,​\n        max_length: 512​\n    }​\n]​\n\n","import \"github.com/milvus-io/milvus/client/v2/entity\"​\n​\nschema := entity.NewSchema().WithDynamicFieldEnabled(true).​\n        WithField(entity.NewField().WithName(\"my_id\").WithIsAutoID(true).WithDataType(entity.FieldTypeInt64).WithIsPrimaryKey(true)).​\n        WithField(entity.NewField().WithName(\"my_vector\").WithDataType(entity.FieldTypeFloatVector).WithDim(5)).​\n        WithField(entity.NewField().WithName(\"my_varchar\").WithDataType(entity.FieldTypeVarChar).WithMaxLength(512))thDim(5))​\n\n","export schema='{​\n        \"autoId\": false,​\n        \"enabledDynamicField\": false,​\n        \"fields\": [​\n            {​\n                \"fieldName\": \"my_id\",​\n                \"dataType\": \"Int64\",​\n                \"isPrimary\": true​\n            },​\n            {​\n                \"fieldName\": \"my_vector\",​\n                \"dataType\": \"FloatVector\",​\n                \"elementTypeParams\": {​\n                    \"dim\": \"5\"​\n                }​\n            },​\n            {​\n                \"fieldName\": \"my_varchar\",​\n                \"dataType\": \"VarChar\",​\n                \"elementTypeParams\": {​\n                    \"max_length\": 512​\n                }​\n            }​\n        ]​\n    }'​\n\n","# 3.3. Prepare index parameters​\nindex_params = client.prepare_index_params()​\n​\n# 3.4. Add indexes​\nindex_params.add_index(​\n    field_name=\"my_id\",​\n    index_type=\"STL_SORT\"​\n)​\n​\nindex_params.add_index(​\n    field_name=\"my_vector\", ​\n    index_type=\"AUTOINDEX\",​\n    metric_type=\"COSINE\"​\n)​\n\n","import io.milvus.v2.common.IndexParam;​\nimport java.util.*;​\n​\n// 3.3 Prepare index parameters​\nIndexParam indexParamForIdField = IndexParam.builder()​\n        .fieldName(\"my_id\")​\n        .indexType(IndexParam.IndexType.STL_SORT)​\n        .build();​\n​\nIndexParam indexParamForVectorField = IndexParam.builder()​\n        .fieldName(\"my_vector\")​\n        .indexType(IndexParam.IndexType.AUTOINDEX)​\n        .metricType(IndexParam.MetricType.COSINE)​\n        .build();​\n​\nList<IndexParam> indexParams = new ArrayList<>();​\nindexParams.add(indexParamForIdField);​\nindexParams.add(indexParamForVectorField);​\n\n","// 3.2 Prepare index parameters​\nconst index_params = [{​\n    field_name: \"my_id\",​\n    index_type: \"STL_SORT\"​\n},{​\n    field_name: \"my_vector\",​\n    index_type: \"AUTOINDEX\",​\n    metric_type: \"COSINE\"​\n}]​\n\n","import (​\n    \"github.com/milvus-io/milvus/client/v2\"​\n    \"github.com/milvus-io/milvus/client/v2/entity\"​\n    \"github.com/milvus-io/milvus/client/v2/index\"​\n)​\n​\nindexOptions := []client.CreateIndexOption{​\n    client.NewCreateIndexOption(collectionName, \"my_vector\", index.NewAutoIndex(entity.COSINE)).WithIndexName(\"my_vector\"),​\n    client.NewCreateIndexOption(collectionName, \"my_id\", index.NewSortedIndex()).WithIndexName(\"my_id\"),​\n}​\n\n","export indexParams='[​\n        {​\n            \"fieldName\": \"my_vector\",​\n            \"metricType\": \"COSINE\",​\n            \"indexName\": \"my_vector\",​\n            \"indexType\": \"AUTOINDEX\"​\n        },​\n        {​\n            \"fieldName\": \"my_id\",​\n            \"indexName\": \"my_id\",​\n            \"indexType\": \"STL_SORT\"​\n        }​\n    ]'​\n\n","# 3.5. Create a collection with the index loaded simultaneously​\nclient.create_collection(​\n    collection_name=\"customized_setup_1\",​\n    schema=schema,​\n    index_params=index_params​\n)​\n​\nres = client.get_load_state(​\n    collection_name=\"customized_setup_1\"​\n)​\n​\nprint(res)​\n​\n# Output​\n#​\n# {​\n#     \"state\": \"<LoadState: Loaded>\"​\n# }​\n\n","import io.milvus.v2.service.collection.request.CreateCollectionReq;​\nimport io.milvus.v2.service.collection.request.GetLoadStateReq;​\n​\n// 3.4 Create a collection with schema and index parameters​\nCreateCollectionReq customizedSetupReq1 = CreateCollectionReq.builder()​\n        .collectionName(\"customized_setup_1\")​\n        .collectionSchema(schema)​\n        .indexParams(indexParams)​\n        .build();​\n​\nclient.createCollection(customizedSetupReq1);​\n​\n// 3.5 Get load state of the collection​\nGetLoadStateReq customSetupLoadStateReq1 = GetLoadStateReq.builder()​\n        .collectionName(\"customized_setup_1\")​\n        .build();​\n​\nBoolean loaded = client.getLoadState(customSetupLoadStateReq1);​\nSystem.out.println(loaded);​\n​\n// Output:​\n// true​\n\n","// 3.3 Create a collection with fields and index parameters​\nres = await client.createCollection({​\n    collection_name: \"customized_setup_1\",​\n    fields: fields,​\n    index_params: index_params,​\n})​\n​\nconsole.log(res.error_code)  ​\n​\n// Output​\n// ​\n// Success​\n// ​\n​\nres = await client.getLoadState({​\n    collection_name: \"customized_setup_1\"​\n})​\n​\nconsole.log(res.state)​\n​\n// Output​\n// ​\n// LoadStateLoaded​\n// ​\n\n","import \"github.com/milvus-io/milvus/client/v2\"​\n​\nerr := cli.CreateCollection(ctx, client.NewCreateCollectionOption(\"customized_setup_1\", schema).​\n    WithIndexOptions(indexOptions...),​\n)​\nif err != nil {​\n    // handle error​\n}​\nfmt.Println(\"collection created\")​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"customized_setup_1\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"indexParams\\\": $indexParams​\n}\"​\n\n","# 3.6. Create a collection and index it separately​\nclient.create_collection(​\n    collection_name=\"customized_setup_2\",​\n    schema=schema,​\n)​\n​\nres = client.get_load_state(​\n    collection_name=\"customized_setup_2\"​\n)​\n​\nprint(res)​\n​\n# Output​\n#​\n# {​\n#     \"state\": \"<LoadState: NotLoad>\"​\n# }​\n\n","// 3.6 Create a collection and index it separately​\nCreateCollectionReq customizedSetupReq2 = CreateCollectionReq.builder()​\n    .collectionName(\"customized_setup_2\")​\n    .collectionSchema(schema)​\n    .build();​\n​\nclient.createCollection(customizedSetupReq2);​\n​\nGetLoadStateReq customSetupLoadStateReq2 = GetLoadStateReq.builder()​\n        .collectionName(\"customized_setup_2\")​\n        .build();​\n        ​\nBoolean loaded = client.getLoadState(customSetupLoadStateReq2);​\nSystem.out.println(loaded);​\n​\n// Output:​\n// false​\n\n","// 3.4 Create a collection and index it seperately​\nres = await client.createCollection({​\n    collection_name: \"customized_setup_2\",​\n    fields: fields,​\n})​\n​\nconsole.log(res.error_code)​\n​\n// Output​\n// ​\n// Success​\n// ​\n​\nres = await client.getLoadState({​\n    collection_name: \"customized_setup_2\"​\n})​\n​\nconsole.log(res.state)​\n​\n// Output​\n// ​\n// LoadStateNotLoad​\n// ​\n\n","import \"github.com/milvus-io/milvus/client/v2\"​\n​\nerr := cli.CreateCollection(ctx, client.NewCreateCollectionOption(\"customized_setup_2\", schema))​\nif err != nil {​\n    // handle error​\n}​\nfmt.Println(\"collection created\")​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"customized_setup_2\\\",​\n    \\\"schema\\\": $schema​\n}\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/get_load_state\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"customized_setup_2\\\"​\n}\"​\n\n","# With shard number​\nclient.create_collection(​\n    collection_name=\"customized_setup_3\",​\n    schema=schema,​\n    # highlight-next-line​\n    num_shards=1​\n)​\n\n","// With shard number​\nCreateCollectionReq customizedSetupReq3 = CreateCollectionReq.builder()​\n    .collectionName(\"customized_setup_3\")​\n    .collectionSchema(collectionSchema)​\n    // highlight-next-line​\n    .numShards(1)​\n    .build();​\nclient.createCollection(customizedSetupReq3);​\n\n","const createCollectionReq = {​\n    collection_name: \"customized_setup_3\",​\n    schema: schema,​\n    // highlight-next-line​\n    shards_num: 1​\n}​\n\n","import \"github.com/milvus-io/milvus/client/v2\"​\n​\nerr := cli.CreateCollection(ctx, client.NewCreateCollectionOption(\"customized_setup_3\", schema).WithShardNum(1))​\nif err != nil {​\n    // handle error​\n}​\nfmt.Println(\"collection created\")​\n\n","export params='{​\n    \"shardsNum\": 1​\n}'​\n​\nexport CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"customized_setup_3\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"params\\\": $params​\n}\"​\n\n","# With mmap​\nclient.create_collection(​\n    collection_name=\"customized_setup_4\",​\n    schema=schema,​\n    # highlight-next-line​\n    enable_mmap=False​\n)​\n\n","import io.milvus.param.Constant;​\n​\n// With MMap​\nCreateCollectionReq customizedSetupReq4 = CreateCollectionReq.builder()​\n        .collectionName(\"customized_setup_4\")​\n        .collectionSchema(schema)​\n        // highlight-next-line​\n        .property(Constant.MMAP_ENABLED, \"false\")​\n        .build();​\nclient.createCollection(customizedSetupReq4);​\n\n","client.create_collection({​\n    collection_name: \"customized_setup_4\",​\n    schema: schema,​\n     properties: {​\n        'mmap.enabled': true,​\n     },​\n})​\n\n","import (​\n    \"github.com/milvus-io/milvus/client/v2\"​\n    \"github.com/milvus-io/milvus/pkg/common\"​\n)​\n​\nerr := cli.CreateCollection(ctx, client.NewCreateCollectionOption(\"customized_setup_4\", schema).WithProperty(common.MmapEnabledKey, true))​\nif err != nil {​\n    // handle error​\n}​\nfmt.Println(\"collection created\")​\n\n","# Currently not available for REST\n\n","# With TTL​\nclient.create_collection(​\n    collection_name=\"customized_setup_5\",​\n    schema=schema,​\n    # highlight-start​\n    properties={​\n        \"collection.ttl.seconds\": 86400​\n    }​\n    # highlight-end​\n)​\n\n","import io.milvus.param.Constant;​\n​\n// With TTL​\nCreateCollectionReq customizedSetupReq5 = CreateCollectionReq.builder()​\n        .collectionName(\"customized_setup_5\")​\n        .collectionSchema(schema)​\n        // highlight-next-line​\n        .property(Constant.TTL_SECONDS, \"86400\")​\n        .build();​\nclient.createCollection(customizedSetupReq5);​\n\n","const createCollectionReq = {​\n    collection_name: \"customized_setup_5\",​\n    schema: schema,​\n    // highlight-start​\n    properties: {​\n        \"collection.ttl.seconds\": 86400​\n    }​\n    // highlight-end​\n}​\n\n","import (​\n    \"github.com/milvus-io/milvus/client/v2\"​\n    \"github.com/milvus-io/milvus/pkg/common\"​\n)​\n​\nerr = cli.CreateCollection(ctx, client.NewCreateCollectionOption(\"customized_setup_5\", schema).​\n        WithProperty(common.CollectionTTLConfigKey, 86400)) //  TTL in seconds​\nif err != nil {​\n        // handle error​\n}​\nfmt.Println(\"collection created\")​\n\n","export params='{​\n    \"ttlSeconds\": 86400​\n}'​\n​\nexport CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"customized_setup_5\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"params\\\": $params​\n}\"​\n\n","# With consistency level​\nclient.create_collection(​\n    collection_name=\"customized_setup_6\",​\n    schema=schema,​\n    # highlight-next​\n    consistency_level=\"Bounded\",​\n)​\n\n","import io.milvus.v2.common.ConsistencyLevel;​\n​\n// With consistency level​\nCreateCollectionReq customizedSetupReq6 = CreateCollectionReq.builder()​\n        .collectionName(\"customized_setup_6\")​\n        .collectionSchema(schema)​\n        // highlight-next-line​\n        .consistencyLevel(ConsistencyLevel.BOUNDED)​\n        .build();​\nclient.createCollection(customizedSetupReq6);​\n\n","const createCollectionReq = {​\n    collection_name: \"customized_setup_6\",​\n    schema: schema,​\n    // highlight-next​\n    consistency_level: \"Bounded\",​\n    // highlight-end​\n}​\n​\nclient.createCollection(createCollectionReq);​\n\n","import (​\n    \"github.com/milvus-io/milvus/client/v2\"​\n    \"github.com/milvus-io/milvus/client/v2/entity\"​\n)​\n​\nerr := cli.CreateCollection(ctx, client.NewCreateCollectionOption(\"customized_setup_6\", schema).​\n    WithConsistencyLevel(entity.ClBounded))​\nif err != nil {​\n    // handle error​\n}​\nfmt.Println(\"collection created\")​\n\n","export params='{​\n    \"consistencyLevel\": \"Bounded\"​\n}'​\n​\nexport CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d \"{​\n    \\\"collectionName\\\": \\\"customized_setup_6\\\",​\n    \\\"schema\\\": $schema,​\n    \\\"params\\\": $params​\n}\"​\n\n"],"headingContent":"Create Collection​","anchorList":[{"label":"Create Collection​","href":"Create-Collection​","type":1,"isActive":false},{"label":"Overview​","href":"Overview​","type":2,"isActive":false},{"label":"Create Schema​","href":"Create-Schema​","type":2,"isActive":false},{"label":"(Optional) Set Index Parameters​","href":"Optional-Set-Index-Parameters​","type":2,"isActive":false},{"label":"Create Collection​","href":"Create-Collection​","type":2,"isActive":false},{"label":"Set Collection Properties​","href":"Set-Collection-Properties​","type":2,"isActive":false}]}