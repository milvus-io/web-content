{"codeList":["from pymilvus import MilvusClient​\n​\nclient = MilvusClient(​\n    uri=\"http://localhost:19530\",​\n    token=\"root:Milvus\"​\n)​\n​\nresults = client.query(​\n    collection_name=\"my_collection\",​\n    filter=\"500 < price < 900\",​\n    output_fields=[\"id\", \"color\", \"price\"]​\n)​\n​\n# Output​\n# {'id': 1, 'color': 'pink_8682', 'price': np.float32(593.0)}​\n# {'id': 3, 'color': 'orange_6781', 'price': np.float32(862.0)}​\n# {'id': 7, 'color': 'red_9392', 'price': np.float32(848.0)}​\n# {'id': 9, 'color': 'white_9381', 'price': np.float32(597.0)}​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\nimport io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .token(\"root:Milvus\")​\n        .build());​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"500 < price < 900\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=pink_8682, price=593.0, id=1}​\n// {color=orange_6781, price=862.0, id=3}​\n// {color=red_9392, price=848.0, id=7}​\n// {color=white_9381, price=597.0, id=9}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst address = \"http://localhost:19530\";​\nconst token = \"root:Milvus\";​\nconst client = new MilvusClient({address, token});​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter=\"500 < price < 900\",​\n    output_fields=[\"id\", \"color\", \"price\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"500 < price < 900\",​\n    \"outputFields\": [\"id\", \"color\", \"price\"]​\n}'​\n\n","[​\n    {\"id\": 1, \"color\": \"pink_8682\" \"price\":593},​\n    {\"id\": 3, \"color\": \"orange_6781\" \"price\":862},​\n    {\"id\": 7, \"color\": \"red_9392\" \"price\":848},​\n    {\"id\": 9, \"color\": \"white_9381\" \"price\":597}​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='inventory[\"quantity\"] >= 250',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n)​\n​\n# Output​\n# {'id': 1, 'color': 'pink_8682', 'price': np.float32(593.0), 'inventory': {'brand': 'Sony', 'quantity': 310}}​\n# {'id': 2, 'color': 'red_7025', 'price': np.float32(196.0), 'inventory': {'brand': 'Samsung', 'quantity': 274}}​\n# {'id': 6, 'color': 'yellow_4222', 'price': np.float32(996.0), 'inventory': {'brand': 'Microsoft', 'quantity': 376}}​\n# {'id': 9, 'color': 'white_9381', 'price': np.float32(597.0), 'inventory': {'brand': 'Apple', 'quantity': 351}}​\n# {'id': 10, 'color': 'purple_4976', 'price': np.float32(450.0), 'inventory': {'brand': 'Apple', 'quantity': 268}}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"inventory[\\\"quantity\\\"] >= 250\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"inventory\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=pink_8682, price=593.0, id=1, inventory={\"brand\":\"Sony\",\"quantity\":310}}​\n// {color=red_7025, price=196.0, id=2, inventory={\"brand\":\"Samsung\",\"quantity\":274}}​\n// {color=yellow_4222, price=996.0, id=6, inventory={\"brand\":\"Microsoft\",\"quantity\":376}}​\n// {color=white_9381, price=597.0, id=9, inventory={\"brand\":\"Apple\",\"quantity\":351}}​\n// {color=purple_4976, price=450.0, id=10, inventory={\"brand\":\"Apple\",\"quantity\":268}}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='inventory[\"quantity\"] >= 250',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"inventory[\\\"quantity\\\"] >=250\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"inventory\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 1,​\n    \"color\": \"pink_8682\",​\n    \"price\": 593,​\n    \"inventory\": {​\n      \"brand\": \"Sony\",​\n      \"quantity\": 310​\n    },​\n    \"sales_volume\": [​\n      161,​\n      81,​\n      51​\n    ]​\n  },​\n  {​\n    \"id\": 2,​\n    \"color\": \"red_7025\",​\n    \"price\": 196,​\n    \"inventory\": {​\n      \"brand\": \"Samsung\",​\n      \"quantity\": 274​\n    },​\n    \"sales_volume\": [​\n      126,​\n      126,​\n      125,​\n      96,​\n      155​\n    ]​\n  },​\n  {​\n    \"id\": 6,​\n    \"color\": \"yellow_4222\",​\n    \"price\": 996,​\n    \"inventory\": {​\n      \"brand\": \"Microsoft\",​\n      \"quantity\": 376​\n    },​\n    \"sales_volume\": [​\n      173,​\n      151,​\n      148​\n    ]​\n  },​\n  {​\n    \"id\": 9,​\n    \"color\": \"white_9381\",​\n    \"price\": 597,​\n    \"inventory\": {​\n      \"brand\": \"Apple\",​\n      \"quantity\": 351​\n    },​\n    \"sales_volume\": [​\n      150,​\n      150,​\n      73​\n    ]​\n  },​\n  {​\n    \"id\": 10,​\n    \"color\": \"purple_4976\",​\n    \"price\": 450,​\n    \"inventory\": {​\n      \"brand\": \"Apple\",​\n      \"quantity\": 268​\n    },​\n    \"sales_volume\": [​\n      190,​\n      149,​\n      85,​\n      79,​\n      80​\n    ]​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter=\"sales_volume[0] >= 150\",​\n    output_fields=[\"id\", \"color\", \"price\", \"sales_volume\"]​\n)​\n​\n# Output​\n# {'id': 1, 'color': 'pink_8682', 'price': np.float32(593.0), 'sales_volume': [161, 81, 51]}​\n# {'id': 5, 'color': 'red_4794', 'price': np.float32(327.0), 'sales_volume': [155, 161, 106, 86, 99]}​\n# {'id': 6, 'color': 'yellow_4222', 'price': np.float32(996.0), 'sales_volume': [173, 151, 148]}​\n# {'id': 9, 'color': 'white_9381', 'price': np.float32(597.0), 'sales_volume': [150, 150, 73]}​\n# {'id': 10, 'color': 'purple_4976', 'price': np.float32(450.0), 'sales_volume': [190, 149, 85, 79, 80]}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"sales_volume[0] >= 150\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"sales_volume\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=pink_8682, price=593.0, id=1, sales_volume=[161, 81, 51]}​\n// {color=red_4794, price=327.0, id=5, sales_volume=[155, 161, 106, 86, 99]}​\n// {color=yellow_4222, price=996.0, id=6, sales_volume=[173, 151, 148]}​\n// {color=white_9381, price=597.0, id=9, sales_volume=[150, 150, 73]}​\n// {color=purple_4976, price=450.0, id=10, sales_volume=[190, 149, 85, 79, 80]}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter=\"sales_volume[0] >= 150\",​\n    output_fields=[\"id\", \"color\",\"price\", \"sales_volume\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"sales_volume[0] >= 150\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"sales_volume\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 1,​\n    \"color\": \"pink_8682\",​\n    \"price\": 593,​\n    \"sales_volume\": [​\n      161,​\n      81,​\n      51​\n    ]​\n  },​\n  {​\n    \"id\": 5,​\n    \"color\": \"red_4794\",​\n    \"price\": 327,​\n    \"sales_volume\": [​\n      155,​\n      161,​\n      106,​\n      86,​\n      99​\n    ]​\n  },​\n  {​\n    \"id\": 6,​\n    \"color\": \"yellow_4222\",​\n    \"price\": 996,​\n    \"sales_volume\": [​\n      173,​\n      151,​\n      148​\n    ]​\n  },​\n  {​\n    \"id\": 9,​\n    \"color\": \"white_9381\",​\n    \"price\": 597,​\n    \"sales_volume\": [​\n      150,​\n      150,​\n      73​\n    ]​\n  },​\n  {​\n    \"id\": 10,​\n    \"color\": \"purple_4976\",​\n    \"price\": 450,​\n    \"sales_volume\": [​\n      190,​\n      149,​\n      85,​\n      79,​\n      80​\n    ]​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='color not in [\"red_7025\",\"red_4794\",\"red_9392\"]',​\n    output_fields=[\"id\", \"color\", \"price\"]​\n)​\n​\n# Output​\n# {'id': 1, 'color': 'pink_8682', 'price': np.float32(593.0)}​\n# {'id': 3, 'color': 'orange_6781', 'price': np.float32(862.0)}​\n# {'id': 4, 'color': 'pink_9298', 'price': np.float32(991.0)}​\n# {'id': 6, 'color': 'yellow_4222', 'price': np.float32(996.0)}​\n# {'id': 8, 'color': 'grey_8510', 'price': np.float32(241.0)}​\n# {'id': 9, 'color': 'white_9381', 'price': np.float32(597.0)}​\n# {'id': 10, 'color': 'purple_4976', 'price': np.float32(450.0)}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"color not in [\\\"red_7025\\\",\\\"red_4794\\\",\\\"red_9392\\\"]\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=pink_8682, price=593.0, id=1}​\n// {color=orange_6781, price=862.0, id=3}​\n// {color=pink_9298, price=991.0, id=4}​\n// {color=yellow_4222, price=996.0, id=6}​\n// {color=grey_8510, price=241.0, id=8}​\n// {color=white_9381, price=597.0, id=9}​\n// {color=purple_4976, price=450.0, id=10}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='color not in [\"red_7025\",\"red_4794\",\"red_9392\"]',​\n    output_fields=[\"id\", \"color\", \"price\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"color not in [\\\"red_7025\\\",\\\"red_4794\\\",\\\"red_9392\\\"]\",​\n    \"outputFields\": [\"id\", \"color\", \"price\"]​\n}'​\n\n","[​\n    {\"id\": 1, \"color\": \"pink_8682\", \"price\":593},​\n    {\"id\": 3, \"color\": \"orange_6781\", \"price\":863},​\n    {\"id\": 4, \"color\": \"pink_9298\" \"price\":991},​\n    {\"id\": 6, \"color\": \"yellow_4222\" \"price\":996},​\n    {\"id\": 8, \"color\": \"grey_8510\" \"price\":241},​\n    {\"id\": 9, \"color\": \"white_9381\" \"price\":597},​\n    {\"id\": 10, \"color\": \"purple_4976\" \"price\":450}​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='inventory[\"brand\"] in [\"Apple\"]',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n)​\n​\n# Output​\n# {'id': 5, 'color': 'red_4794', 'price': np.float32(327.0), 'inventory': {'brand': 'Apple', 'quantity': 193}}​\n# {'id': 7, 'color': 'red_9392', 'price': np.float32(848.0), 'inventory': {'brand': 'Apple', 'quantity': 61}}​\n# {'id': 9, 'color': 'white_9381', 'price': np.float32(597.0), 'inventory': {'brand': 'Apple', 'quantity': 351}}​\n# {'id': 10, 'color': 'purple_4976', 'price': np.float32(450.0), 'inventory': {'brand': 'Apple', 'quantity': 268}}} ​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"inventory[\\\"brand\\\"] in [\\\"Apple\\\"]\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"inventory\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {'id': 5, 'color': 'red_4794', 'price': np.float32(327.0), 'inventory': {'brand': 'Apple', 'quantity': 193}}​\n// {'id': 7, 'color': 'red_9392', 'price': np.float32(848.0), 'inventory': {'brand': 'Apple', 'quantity': 61}}​\n// {'id': 9, 'color': 'white_9381', 'price': np.float32(597.0), 'inventory': {'brand': 'Apple', 'quantity': 351}}​\n// {'id': 10, 'color': 'purple_4976', 'price': np.float32(450.0), 'inventory': {'brand': 'Apple', 'quantity': 268}}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='inventory[\"brand\"] in [\"Apple\"]',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"inventory[\\\"brand\\\"] in [\\\"Apple\\\"]\",​\n    \"outputFields\": [\"id\", \"color\",\"price\", \"inventory\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 5,​\n    \"color\": \"red_4794\",​\n    \"price\": 327,​\n    \"inventory\": {​\n      \"brand\": \"Apple\",​\n      \"quantity\": 193​\n    }​\n  },​\n  {​\n    \"id\": 7,​\n    \"color\": \"red_9392\",​\n    \"price\": 848,​\n    \"inventory\": {​\n      \"brand\": \"Apple\",​\n      \"quantity\": 61​\n    }​\n  },​\n  {​\n    \"id\": 9,​\n    \"color\": \"white_9381\",​\n    \"price\": 597,​\n    \"inventory\": {​\n      \"brand\": \"Apple\",​\n      \"quantity\": 351​\n    }​\n  },​\n  {​\n    \"id\": 10,​\n    \"color\": \"purple_4976\",​\n    \"price\": 450,​\n    \"inventory\": {​\n      \"brand\": \"Apple\",​\n      \"quantity\": 268​\n    }​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='color like \"red%\"',​\n    output_fields=[\"id\", \"color\", \"price\"]​\n)​\n​\n# Output​\n# {'id': 2, 'color': 'red_7025', 'price': np.float32(196.0)}​\n# {'id': 5, 'color': 'red_4794', 'price': np.float32(327.0)}​\n# {'id': 7, 'color': 'red_9392', 'price': np.float32(848.0)}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"color like \\\"red%\\\"\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=red_7025, price=196.0, id=2}​\n// {color=red_4794, price=327.0, id=5}​\n// {color=red_9392, price=848.0, id=7}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='color like \"red%\"',​\n    output_fields=[\"id\", \"color\", \"price\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"color like \\\"red%\\\"\",​\n    \"outputFields\": [\"id\", \"color\", \"price\"]​\n}'​\n\n","[​\n    {\"id\": 2, \"color\": \"red_7025\", \"price\":196},​\n    {\"id\": 5, \"color\": \"red_4794\" \"price\":327},​\n    {\"id\": 7, \"color\": \"red_9392\" \"price\":848}​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='inventory[\"brand\"] like \"S%\"',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n)​\n​\n# Output​\n# {'id': 1, 'color': 'pink_8682', 'price': np.float32(593.0), 'inventory': {'brand': 'Sony', 'quantity': 310}}​\n# {'id': 2, 'color': 'red_7025', 'price': np.float32(196.0), 'inventory': {'brand': 'Samsung', 'quantity': 274}}​\n# {'id': 3, 'color': 'orange_6781', 'price': np.float32(862.0), 'inventory': {'brand': 'Samsung', 'quantity': 103}}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"inventory[\\\"brand\\\"] like \\\"S%\\\"\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"inventory\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=pink_8682, price=593.0, id=1, inventory={\"brand\":\"Sony\",\"quantity\":310}}​\n// {color=red_7025, price=196.0, id=2, inventory={\"brand\":\"Samsung\",\"quantity\":274}}​\n// {color=orange_6781, price=862.0, id=3, inventory={\"brand\":\"Samsung\",\"quantity\":103}}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='inventory[\"brand\"] like \"S%\"',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"inventory[\\\"brand\\\"] like \\\"S%\\\"\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"inventory\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 1,​\n    \"color\": \"pink_8682\",​\n    \"price\": 593,​\n    \"inventory\": {​\n      \"brand\": \"Sony\",​\n      \"quantity\": 310​\n    }​\n  },​\n  {​\n    \"id\": 2,​\n    \"color\": \"red_7025\",​\n    \"price\": 196,​\n    \"inventory\": {​\n      \"brand\": \"Samsung\",​\n      \"quantity\": 274​\n    }​\n  },​\n  {​\n    \"id\": 3,​\n    \"color\": \"orange_6781\",​\n    \"price\": 862,​\n    \"inventory\": {​\n      \"brand\": \"Samsung\",​\n      \"quantity\": 103​\n    }​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='TEXT_MATCH(description, \"Apple iPhone\")',​\n    output_fields=[\"id\", \"description\"],​\n)​\n\n","QueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"TEXT_MATCH(description, \\\"Apple iPhone\\\")\")​\n        .outputFields(Arrays.asList(\"id\", \"description\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst results = client.query({​\n    collection_name: \"my_collection\",​\n    filter: \"TEXT_MATCH(description, 'Apple iPhone')\",​\n    output_fields: [\"id\", \"description\"]​\n});​\n\n","[​\n    {'id': 5, 'description': \"iPhone 15 Pro, A new chip designed for better gaming and other 'pro' features.\"}​\n    {'id': 7, 'description': \"The iPhone 14 is a smartphone from Apple Inc. that comes in various colors and sizes.\"}​\n    {'id': 9, 'description': \"The iPhone 16 features a 6.1-inch OLED display, is powered by Apple's A18 processor, and has dual cameras at the back.\"}​\n    {'id': 10, 'description': \"The iPad is a brand of iOS- and iPadOS-based tablet computers that are developed and marketed by Apple.\"}​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='TEXT_MATCH(description, \"chip\") and TEXT_MATCH(description, \"iPhone\")',​\n    output_fields=[\"id\", \"description\"],​\n)​\n\n","QueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"TEXT_MATCH(description, \\\"chip\\\") and TEXT_MATCH(description, \\\"iPhone\\\")\")​\n        .outputFields(Arrays.asList(\"id\", \"description\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst results = client.query({​\n    collection_name: \"my_collection\",​\n    filter: \"TEXT_MATCH(description, 'chip') and TEXT_MATCH(description, 'iPhone')\",​\n    output_fields: [\"id\", \"description\"]​\n});​\n\n","[​\n    {'id': 5, 'description': \"iPhone 15 Pro, A new chip designed for better gaming and other 'pro' features.\"}​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter=\"200 <= price*0.5 and price*0.5 <= 300\",​\n    output_fields=[\"id\", \"price\"]​\n)​\n​\n# Output​\n# {'id': 1, 'price': np.float32(593.0)}​\n# {'id': 9, 'price': np.float32(597.0)}​\n# {'id': 10, 'price': np.float32(450.0)}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"200 <= price*0.5 and price*0.5 <= 300\")​\n        .outputFields(Arrays.asList(\"id\", \"price\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {price=593.0, id=1}​\n// {price=597.0, id=9}​\n// {price=450.0, id=10}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter=\"200 <= price*0.5 <= 300\",​\n    output_fields=[\"id\", \"price\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"200 <= price*0.5 <= 300\",​\n    \"outputFields\": [\"id\", \"price\"]​\n}'​\n\n","[​\n    {\"id\": 1, \"color\": \"pink_8682\", \"price\":593},​\n    {\"id\": 9, \"color\": \"white_9381\", \"price\":597},​\n    {\"id\": 10, \"color\": \"purple_4976\" \"price\":450}​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='inventory[\"quantity\"] * 2 > 600',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n)​\n​\n# Output​\n# {'id': 1, 'color': 'pink_8682', 'price': np.float32(593.0), 'inventory': {'brand': 'Sony', 'quantity': 310}}​\n# {'id': 6, 'color': 'yellow_4222', 'price': np.float32(996.0), 'inventory': {'brand': 'Microsoft', 'quantity': 376}}​\n# {'id': 9, 'color': 'white_9381', 'price': np.float32(597.0), 'inventory': {'brand': 'Apple', 'quantity': 351}}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"inventory[\\\"quantity\\\"] * 2 > 600\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"inventory\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=pink_8682, price=593.0, id=1, inventory={\"brand\":\"Sony\",\"quantity\":310}}​\n// {color=yellow_4222, price=996.0, id=6, inventory={\"brand\":\"Microsoft\",\"quantity\":376}}​\n// {color=white_9381, price=597.0, id=9, inventory={\"brand\":\"Apple\",\"quantity\":351}}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='inventory[\"quantity\"] * 2 > 600',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"inventory[\\\"quantity\\\"] * 2 > 600\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"inventory\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 1,​\n    \"color\": \"pink_8682\",​\n    \"price\": 593,​\n    \"inventory\": {​\n      \"brand\": \"Sony\",​\n      \"quantity\": 310​\n    }​\n  },​\n  {​\n    \"id\": 6,​\n    \"color\": \"yellow_4222\",​\n    \"price\": 996,​\n    \"inventory\": {​\n      \"brand\": \"Microsoft\",​\n      \"quantity\": 376​\n    }​\n  },​\n  {​\n    \"id\": 9,​\n    \"color\": \"white_9381\",​\n    \"price\": 597,​\n    \"inventory\": {​\n      \"brand\": \"Apple\",​\n      \"quantity\": 351​\n    }​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter=\"sales_volume[0]*2 > 300\",​\n    output_fields=[\"id\", \"color\", \"price\", \"sales_volume\"]​\n)​\n​\n# Output​\n# {'color': 'pink_8682', 'price': np.float32(593.0), 'sales_volume': [161, 81, 51], 'id': 1}​\n# {'color': 'red_4794', 'price': np.float32(327.0), 'sales_volume': [155, 161, 106, 86, 99], 'id': 5}​\n# {'color': 'yellow_4222', 'price': np.float32(996.0), 'sales_volume': [173, 151, 148], 'id': 6}​\n# {'color': 'purple_4976', 'price': np.float32(450.0), 'sales_volume': [190, 149, 85, 79, 80], 'id': 10}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"sales_volume[0]*2 > 300\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"sales_volume\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=pink_8682, price=593.0, id=1, sales_volume=[161, 81, 51]}​\n// {color=red_4794, price=327.0, id=5, sales_volume=[155, 161, 106, 86, 99]}​\n// {color=yellow_4222, price=996.0, id=6, sales_volume=[173, 151, 148]}​\n// {color=purple_4976, price=450.0, id=10, sales_volume=[190, 149, 85, 79, 80]}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter=\"sales_volume[0]*2 > 300\",​\n    output_fields=[\"id\", \"color\",\"price\", \"sales_volume\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"sales_volume[0]*2 > 300\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"sales_volume\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 5,​\n    \"color\": \"red_4794\",​\n    \"price\": 327,​\n    \"sales_volume\": [​\n      155,​\n      161,​\n      106,​\n      86,​\n      99​\n    ]​\n  },​\n  {​\n    \"id\": 6,​\n    \"color\": \"yellow_4222\",​\n    \"price\": 996,​\n    \"sales_volume\": [​\n      173,​\n      151,​\n      148​\n    ]​\n  },​\n  {​\n    \"id\": 10,​\n    \"color\": \"purple_4976\",​\n    \"price\": 450,​\n    \"sales_volume\": [​\n      190,​\n      149,​\n      85,​\n      79,​\n      80​\n    ]​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='JSON_CONTAINS(inventory[\\\"previous_sales\\\"], 232)',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n)​\n​\n# Output​\n# {'inventory': {'brand': 'Samsung', 'quantity': 103, 'previous_sales': [232, 254, 275]}, 'id': 3, 'color': 'orange_6781', 'price': np.float32(862.0)}​\n# {'inventory': {'brand': 'Microsoft', 'quantity': 376, 'previous_sales': [254, 275, 232]}, 'id': 6, 'color': 'yellow_4222', 'price': np.float32(996.0)}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"JSON_CONTAINS(inventory[\\\"previous_sales\\\"], 232)\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"inventory\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=orange_6781, price=862.0, id=3, inventory={\"brand\":\"Samsung\",\"quantity\":103,\"previous_sales\":[232,254,275]}}​\n// {color=yellow_4222, price=996.0, id=6, inventory={\"brand\":\"Microsoft\",\"quantity\":376,\"previous_sales\":[254,275,232]}}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='JSON_CONTAINS(inventory[\\\"previous_sales\\\"], 232)',​\n    output_fields=[\"id\", \"color\",\"price\", \"inventory\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"JSON_CONTAINS(inventory[\\\"previous_sales\\\"], 232)\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"inventory\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 3,​\n    \"color\": \"orange_6781\",​\n    \"price\": 862,​\n    \"inventory\": {​\n      \"brand\": \"Samsung\",​\n      \"quantity\": 103,​\n      \"previous_sales\": [​\n        232,​\n        254,​\n        275​\n      ]​\n    }​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='JSON_CONTAINS_ALL(inventory[\"previous_sales\"], [232, 254, 275])',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n)​\n​\n# Output​\n# {'id': 3, 'color': 'orange_6781', 'price': np.float32(862.0), 'inventory': {'brand': 'Samsung', 'quantity': 103, 'previous_sales': [232, 254, 275]}}​\n# {'id': 6, 'color': 'yellow_4222', 'price': np.float32(996.0), 'inventory': {'brand': 'Microsoft', 'quantity': 376, 'previous_sales': [254, 275, 232]}}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"JSON_CONTAINS_ALL(inventory[\\\"previous_sales\\\"], [232, 254, 275])\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"inventory\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=orange_6781, price=862.0, id=3, inventory={\"brand\":\"Samsung\",\"quantity\":103,\"previous_sales\":[232,254,275]}}​\n// {color=yellow_4222, price=996.0, id=6, inventory={\"brand\":\"Microsoft\",\"quantity\":376,\"previous_sales\":[254,275,232]}}​\n\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='JSON_CONTAINS_ALL(inventory[\"previous_sales\"], [232, 254, 275])',​\n    output_fields=[\"id\", \"color\",\"price\", \"inventory\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"JSON_CONTAINS_ALL(inventory[\\\"previous_sales\\\"], [232, 254, 275])\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"inventory\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 3,​\n    \"color\": \"orange_6781\",​\n    \"price\": 862,​\n    \"inventory\": {​\n      \"brand\": \"Samsung\",​\n      \"quantity\": 103,​\n      \"previous_sales\": [​\n        232,​\n        254,​\n        275​\n      ]​\n    }​\n  },​\n  {​\n    \"id\": 6,​\n    \"color\": \"yellow_4222\",​\n    \"price\": 996,​\n    \"inventory\": {​\n      \"brand\": \"Microsoft\",​\n      \"quantity\": 376,​\n      \"previous_sales\": [​\n        254,​\n        275,​\n        232​\n      ]​\n    }​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='JSON_CONTAINS_ANY(inventory[\"previous_sales\"], [232, 254, 275])',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\"]​\n)​\n​\n# Output​\n# {'id': 3, 'color': 'orange_6781', 'price': np.float32(862.0), 'inventory': {'brand': 'Samsung', 'quantity': 103, 'previous_sales': [232, 254, 275]}}​\n# {'id': 6, 'color': 'yellow_4222', 'price': np.float32(996.0), 'inventory': {'brand': 'Microsoft', 'quantity': 376, 'previous_sales': [254, 275, 232]}}​\n# {'id': 7, 'color': 'red_9392', 'price': np.float32(848.0), 'inventory': {'brand': 'Apple', 'quantity': 61, 'previous_sales': [312, 254, 367]}}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"JSON_CONTAINS_ANY(inventory[\\\"previous_sales\\\"], [232, 254, 275])\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"inventory\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=orange_6781, price=862.0, id=3, inventory={\"brand\":\"Samsung\",\"quantity\":103,\"previous_sales\":[232,254,275]}}​\n// {color=yellow_4222, price=996.0, id=6, inventory={\"brand\":\"Microsoft\",\"quantity\":376,\"previous_sales\":[254,275,232]}}​\n// {color=red_9392, price=848.0, id=7, inventory={\"brand\":\"Apple\",\"quantity\":61,\"previous_sales\":[312,254,367]}}​\n\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='JSON_CONTAINS_ANY(inventory[\"previous_sales\"], [232, 254, 275])',​\n    output_fields=[\"id\", \"color\",\"price\", \"inventory\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"JSON_CONTAINS_ANY(inventory[\\\"previous_sales\\\"], [232, 254, 275])\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"inventory\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 3,​\n    \"color\": \"orange_6781\",​\n    \"price\": 862,​\n    \"inventory\": {​\n      \"brand\": \"Samsung\",​\n      \"quantity\": 103,​\n      \"previous_sales\": [​\n        232,​\n        254,​\n        275​\n      ]​\n    }​\n  },​\n  {​\n    \"id\": 6,​\n    \"color\": \"yellow_4222\",​\n    \"price\": 996,​\n    \"inventory\": {​\n      \"brand\": \"Microsoft\",​\n      \"quantity\": 376,​\n      \"previous_sales\": [​\n        254,​\n        275,​\n        232​\n      ]​\n    }​\n  },​\n  {​\n    \"id\": 7,​\n    \"color\": \"red_9392\",​\n    \"price\": 848,​\n    \"inventory\": {​\n      \"brand\": \"Apple\",​\n      \"quantity\": 61,​\n      \"previous_sales\": [​\n        312,​\n        254,​\n        367​\n      ]​\n    }​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='ARRAY_CONTAINS(sales_volume, 161)',​\n    output_fields=[\"id\", \"color\", \"price\", \"sales_volume\"]​\n)​\n​\n# Output​\n# {'id': 1, 'color': 'pink_8682', 'price': np.float32(593.0), 'sales_volume': [161, 81, 51]}​\n# {'id': 5, 'color': 'red_4794', 'price': np.float32(327.0), 'sales_volume': [155, 161, 106, 86, 99]}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"ARRAY_CONTAINS(sales_volume, 161)\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"sales_volume\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=pink_8682, price=593.0, id=1, sales_volume=[161, 81, 51]}​\n// {color=red_4794, price=327.0, id=5, sales_volume=[155, 161, 106, 86, 99]}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter=\"ARRAY_CONTAINS(sales_volume, 161)\",​\n    output_fields=[\"id\", \"color\",\"price\", \"sales_volume\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"ARRAY_CONTAINS(sales_volume, 161)\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"sales_volume\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 1,​\n    \"color\": \"pink_8682\",​\n    \"price\": 593,​\n    \"sales_volume\": [​\n      161,​\n      81,​\n      51​\n    ]​\n  },​\n  {​\n    \"id\": 5,​\n    \"color\": \"red_4794\",​\n    \"price\": 327,​\n    \"sales_volume\": [​\n      155,​\n      161,​\n      106,​\n      86,​\n      99​\n    ]​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='ARRAY_CONTAINS_ALL(sales_volume, [150, 150])',​\n    output_fields=[\"id\", \"color\", \"price\", \"sales_volume\"]​\n)​\n​\n# Output​\n# {'price': np.float32(597.0), 'sales_volume': [150, 150, 73], 'id': 9, 'color': 'white_9381'}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"ARRAY_CONTAINS_ALL(sales_volume, [150, 150])\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"sales_volume\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=white_9381, price=597.0, id=9, sales_volume=[150, 150, 73]}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter=\"ARRAY_CONTAINS_ALL(sales_volume, [150, 150])\",​\n    output_fields=[\"id\", \"color\",\"price\", \"sales_volume\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"ARRAY_CONTAINS_ALL(sales_volume, [150, 150])\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"sales_volume\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 9,​\n    \"color\": \"white_9381\",​\n    \"price\": 597,​\n    \"sales_volume\": [​\n      150,​\n      150,​\n      73​\n    ]​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='ARRAY_CONTAINS_ANY(sales_volume, [150, 190, 90])',​\n    output_fields=[\"id\", \"color\", \"price\", \"sales_volume\"]​\n)​\n​\n# Output​\n# {'id': 3, 'color': 'orange_6781', 'price': np.float32(862.0), 'sales_volume': [124, 117, 90, 188]}​\n# {'id': 9, 'color': 'white_9381', 'price': np.float32(597.0), 'sales_volume': [150, 150, 73]}​\n# {'id': 10, 'color': 'purple_4976', 'price': np.float32(450.0), 'sales_volume': [190, 149, 85, 79, 80]}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"ARRAY_CONTAINS_ANY(sales_volume, [150, 190, 90])\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"sales_volume\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=orange_6781, price=862.0, id=3, sales_volume=[124, 117, 90, 188]}​\n// {color=white_9381, price=597.0, id=9, sales_volume=[150, 150, 73]}​\n// {color=purple_4976, price=450.0, id=10, sales_volume=[190, 149, 85, 79, 80]}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter=\"ARRAY_CONTAINS_ANY(sales_volume, [150, 190, 90])\",​\n    output_fields=[\"id\", \"color\",\"price\", \"sales_volume\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"ARRAY_CONTAINS_ANY(sales_volume, [150, 190, 90])\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"sales_volume\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 3,​\n    \"color\": \"orange_6781\",​\n    \"price\": 862,​\n    \"sales_volume\": [​\n      124,​\n      117,​\n      90,​\n      188​\n    ]​\n  },​\n  {​\n    \"id\": 9,​\n    \"color\": \"white_9381\",​\n    \"price\": 597,​\n    \"sales_volume\": [​\n      150,​\n      150,​\n      73​\n    ]​\n  },​\n  {​\n    \"id\": 10,​\n    \"color\": \"purple_4976\",​\n    \"price\": 450,​\n    \"sales_volume\": [​\n      190,​\n      149,​\n      85,​\n      79,​\n      80​\n    ]​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='ARRAY_LENGTH(sales_volume) == 3',​\n    output_fields=[\"id\", \"color\", \"price\", \"sales_volume\"]​\n)​\n​\n# Output​\n# {'id': 1, 'color': 'pink_8682', 'price': np.float32(593.0), 'sales_volume': [161, 81, 51]}​\n# {'id': 6, 'color': 'yellow_4222', 'price': np.float32(996.0), 'sales_volume': [173, 151, 148]}​\n# {'id': 9, 'color': 'white_9381', 'price': np.float32(597.0), 'sales_volume': [150, 150, 73]}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"ARRAY_LENGTH(sales_volume) == 3\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"sales_volume\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=pink_8682, price=593.0, id=1, sales_volume=[161, 81, 51]}​\n// {color=yellow_4222, price=996.0, id=6, sales_volume=[173, 151, 148]}​\n// {color=white_9381, price=597.0, id=9, sales_volume=[150, 150, 73]}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter=\"ARRAY_LENGTH(sales_volume) == 3\",​\n    output_fields=[\"id\", \"color\",\"price\", \"sales_volume\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"ARRAY_LENGTH(sales_volume) == 3\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"sales_volume\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 1,​\n    \"color\": \"pink_8682\",​\n    \"price\": 593,​\n    \"sales_volume\": [​\n      161,​\n      81,​\n      51​\n    ]​\n  },​\n  {​\n    \"id\": 6,​\n    \"color\": \"yellow_4222\",​\n    \"price\": 996,​\n    \"sales_volume\": [​\n      173,​\n      151,​\n      148​\n    ]​\n  },​\n  {​\n    \"id\": 9,​\n    \"color\": \"white_9381\",​\n    \"price\": 597,​\n    \"sales_volume\": [​\n      150,​\n      150,​\n      73​\n    ]​\n  }​\n]​\n\n","results = client.query(​\n    collection_name=\"my_collection\",​\n    filter='color like \"red%\" and price < 500 and inventory[\"brand\"] in [\"Apple\"] and sales_volume[0] > 100',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\", \"sales_volume\"]​\n)​\n​\n# Output​\n# {'id': 5, 'color': 'red_4794', 'price': np.float32(327.0), 'inventory': {'brand': 'Apple', 'quantity': 193, 'previous_sales': [225, 286, 202]}, 'sales_volume': [155, 161, 106, 86, 99]}​\n\n","import io.milvus.v2.service.vector.request.QueryReq​\nimport io.milvus.v2.service.vector.request.QueryResp​\n​\nQueryReq queryReq = QueryReq.builder()​\n        .collectionName(\"my_collection\")​\n        .filter(\"color like \\\"red%\\\" and price < 500 and inventory[\\\"brand\\\"] in [\\\"Apple\\\"] and sales_volume[0] > 100\")​\n        .outputFields(Arrays.asList(\"id\", \"color\", \"price\", \"inventory\", \"sales_volume\"))​\n        .build();​\n​\nQueryResp getResp = client.query(queryReq);​\n​\n// Output​\n// {color=red_4794, price=327.0, id=5, inventory={\"brand\":\"Apple\",\"quantity\":193,\"previous_sales\":[225,286,202]}, sales_volume=[155, 161, 106, 86, 99]}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nvar res = client.query({​\n    collection_name=\"my_collection\",​\n    filter='color like \"red%\" and price < 500 and inventory[\"brand\"] in [\"Apple\"] and sales_volume[0] > 100',​\n    output_fields=[\"id\", \"color\", \"price\", \"inventory\", \"sales_volume\"]​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/query\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"my_collection\",​\n    \"filter\": \"color like \\\"red%\\\" and price < 500 and inventory[\\\"brand\\\"] in [\\\"Apple\\\"] and sales_volume[0] > 100\",​\n    \"outputFields\": [\"id\", \"color\", \"price\", \"inventory\", \"sales_volume\"]​\n}'​\n\n","[​\n  {​\n    \"id\": 5,​\n    \"color\": \"red_4794\",​\n    \"price\": 327,​\n    \"inventory\": {​\n      \"brand\": \"Apple\",​\n      \"quantity\": 193​\n    },​\n    \"sales_volume\": [​\n      155,​\n      161,​\n      106,​\n      86,​\n      99​\n    ]​\n  }​\n]​\n\n"],"headingContent":"Metadata Filtering​","anchorList":[{"label":"Metadata Filtering​","href":"Metadata-Filtering​","type":1,"isActive":false},{"label":"Example Dataset","href":"Example-Dataset","type":2,"isActive":false},{"label":"Single-condition filtering","href":"Single-condition-filtering","type":2,"isActive":false},{"label":"Multi-condition filtering​","href":"Multi-condition-filtering​","type":2,"isActive":false},{"label":"Operator precedence​","href":"Operator-precedence​","type":2,"isActive":false}]}