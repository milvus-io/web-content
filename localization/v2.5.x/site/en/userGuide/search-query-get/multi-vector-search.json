{"codeList":["# Create a collection in customized setup mode\nfrom pymilvus import (\n    MilvusClient, DataType\n)\n\nclient = MilvusClient(\n    uri=\"http://localhost:19530\",\n    token=\"root:Milvus\"\n)\n\n# Create schema\nschema = MilvusClient.create_schema(\n    auto_id=False,\n    enable_dynamic_field=True,\n)\n# Add fields to schema\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"text\", datatype=DataType.VARCHAR, max_length=1000)\nschema.add_field(field_name=\"sparse\", datatype=DataType.SPARSE_FLOAT_VECTOR)\nschema.add_field(field_name=\"dense\", datatype=DataType.FLOAT_VECTOR, dim=5)\n","import io.milvus.v2.client.ConnectConfig;\nimport io.milvus.v2.client.MilvusClientV2;\nimport io.milvus.v2.common.DataType;\nimport io.milvus.v2.service.collection.request.AddFieldReq;\nimport io.milvus.v2.service.collection.request.CreateCollectionReq;\n\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()\n        .uri(\"http://localhost:19530\")\n        .token(\"root:Milvus\")\n        .build());\n\nCreateCollectionReq.CollectionSchema schema = client.createSchema();\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"id\")\n        .dataType(DataType.Int64)\n        .isPrimaryKey(true)\n        .autoID(false)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"text\")\n        .dataType(DataType.VarChar)\n        .maxLength(1000)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"dense\")\n        .dataType(DataType.FloatVector)\n        .dimension(5)\n        .build());\n\nschema.addField(AddFieldReq.builder()\n        .fieldName(\"sparse\")\n        .dataType(DataType.SparseFloatVector)\n        .build());\n","import (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/milvus-io/milvus/client/v2/column\"\n    \"github.com/milvus-io/milvus/client/v2/entity\"\n    \"github.com/milvus-io/milvus/client/v2/index\"\n    \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n)\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"localhost:19530\"\nclient, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n    Address: milvusAddr,\n})\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\ndefer client.Close(ctx)\n\nschema := entity.NewSchema().WithDynamicFieldEnabled(true)\nschema.WithField(entity.NewField().\n    WithName(\"id\").\n    WithDataType(entity.FieldTypeInt64).\n    WithIsPrimaryKey(true),\n).WithField(entity.NewField().\n    WithName(\"text\").\n    WithDataType(entity.FieldTypeVarChar).\n    WithMaxLength(1000),\n).WithField(entity.NewField().\n    WithName(\"sparse\").\n    WithDataType(entity.FieldTypeSparseVector),\n).WithField(entity.NewField().\n    WithName(\"dense\").\n    WithDataType(entity.FieldTypeFloatVector).\n    WithDim(5),\n)\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst address = \"http://localhost:19530\";\nconst token = \"root:Milvus\";\nconst client = new MilvusClient({address, token});\n\n// Create a collection in customized setup mode\n// Define fields\nconst fields = [\n    {\n        name: \"id\",\n        data_type: DataType.Int64,\n        is_primary_key: true,\n        auto_id: false\n    },\n    {\n        name: \"text\",\n        data_type: DataType.VarChar,\n        max_length: 1000\n    },\n    {\n        name: \"sparse\",\n        data_type: DataType.SPARSE_FLOAT_VECTOR\n    },\n    {\n        name: \"dense\",\n        data_type: DataType.FloatVector,\n        dim: 5\n    }\n]\n","export schema='{\n        \"autoId\": false,\n        \"enabledDynamicField\": true,\n        \"fields\": [\n            {\n                \"fieldName\": \"id\",\n                \"dataType\": \"Int64\",\n                \"isPrimary\": true\n            },\n            {\n                \"fieldName\": \"text\",\n                \"dataType\": \"VarChar\",\n                \"elementTypeParams\": {\n                    \"max_length\": 1000\n                }\n            },\n            {\n                \"fieldName\": \"sparse\",\n                \"dataType\": \"SparseFloatVector\"\n            },\n            {\n                \"fieldName\": \"dense\",\n                \"dataType\": \"FloatVector\",\n                \"elementTypeParams\": {\n                    \"dim\": \"5\"\n                }\n            }\n        ]\n    }'\n","from pymilvus import MilvusClient\n\n# Prepare index parameters\nindex_params = client.prepare_index_params()\n\n# Add indexes\nindex_params.add_index(\n    field_name=\"dense\",\n    index_name=\"dense_index\",\n    index_type=\"AUTOINDEX\",\n    metric_type=\"IP\"\n)\n\nindex_params.add_index(\n    field_name=\"sparse\",\n    index_name=\"sparse_index\",\n    index_type=\"AUTOINDEX\",  # Index type for sparse vectors\n    metric_type=\"IP\",  # Currently, only IP (Inner Product) is supported for sparse vectors\n    params={\"drop_ratio_build\": 0.2},  # The ratio of small vector values to be dropped during indexing\n)\n","import io.milvus.v2.common.IndexParam;\nimport java.util.*;\n\nMap<String, Object> denseParams = new HashMap<>();\n\nIndexParam indexParamForDenseField = IndexParam.builder()\n        .fieldName(\"dense\")\n        .indexName(\"dense_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.IP)\n        .build();\n\nMap<String, Object> sparseParams = new HashMap<>();\nsparseParams.put(\"drop_ratio_build\", 0.2);\nIndexParam indexParamForSparseField = IndexParam.builder()\n        .fieldName(\"sparse\")\n        .indexName(\"sparse_index\")\n        .indexType(IndexParam.IndexType.AUTOINDEX)\n        .metricType(IndexParam.MetricType.IP)\n        .extraParams(sparseParams)\n        .build();\n\nList<IndexParam> indexParams = new ArrayList<>();\nindexParams.add(indexParamForDenseField);\nindexParams.add(indexParamForSparseField);\n","indexOption1 := milvusclient.NewCreateIndexOption(\"my_collection\", \"sparse\",\n    index.NewSparseInvertedIndex(entity.IP, 0.2))\nindexOption2 := milvusclient.NewCreateIndexOption(\"my_collection\", \"dense\",\n    index.NewAutoIndex(index.MetricType(entity.IP)))\n","const index_params = [{\n    field_name: \"dense\",\n    index_type: \"AUTOINDEX\",\n    metric_type: \"IP\"\n},{\n    field_name: \"sparse\",\n    index_type: \"AUTOINDEX\",\n    metric_type: \"IP\"\n}]\n","export indexParams='[\n        {\n            \"fieldName\": \"dense\",\n            \"metricType\": \"IP\",\n            \"indexName\": \"dense_index\",\n            \"indexType\":\"AUTOINDEX\"\n        },\n        {\n            \"fieldName\": \"sparse\",\n            \"metricType\": \"IP\",\n            \"indexName\": \"sparse_index\",\n            \"indexType\": \"AUTOINDEX\"\n        }\n    ]'\n","from pymilvus import MilvusClient\n\nclient.create_collection(\n    collection_name=\"my_collection\",\n    schema=schema,\n    index_params=index_params\n)\n","CreateCollectionReq createCollectionReq = CreateCollectionReq.builder()\n        .collectionName(\"my_collection\")\n        .collectionSchema(schema)\n        .indexParams(indexParams)\n        .build();\nclient.createCollection(createCollectionReq);\n","err = client.CreateCollection(ctx,\n    milvusclient.NewCreateCollectionOption(\"my_collection\", schema).\n        WithIndexOptions(indexOption1, indexOption2))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n","res = await client.createCollection({\n    collection_name: \"my_collection\",\n    fields: fields,\n    index_params: index_params,\n})\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"\nexport TOKEN=\"root:Milvus\"\n\ncurl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/collections/create\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"schema\\\": $schema,\n    \\\"indexParams\\\": $indexParams\n}\"\n","from pymilvus import MilvusClient\n\ndata=[\n    {\"id\": 0, \"text\": \"Artificial intelligence was founded as an academic discipline in 1956.\", \"sparse\":{9637: 0.30856525997853057, 4399: 0.19771651149001523, ...}, \"dense\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, ...]},\n    {\"id\": 1, \"text\": \"Alan Turing was the first person to conduct substantial research in AI.\", \"sparse\":{6959: 0.31025067641541815, 1729: 0.8265339135915016, ...}, \"dense\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, ...]},\n    {\"id\": 2, \"text\": \"Born in Maida Vale, London, Turing was raised in southern England.\", \"sparse\":{1220: 0.15303302147479103, 7335: 0.9436728846033107, ...}, \"dense\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, ...]}]\n\nres = client.insert(\n    collection_name=\"my_collection\",\n    data=data\n)\n\n","import com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport io.milvus.v2.service.vector.request.InsertReq;\n\nGson gson = new Gson();\nJsonObject row1 = new JsonObject();\nrow1.addProperty(\"id\", 1);\nrow1.addProperty(\"text\", \"Artificial intelligence was founded as an academic discipline in 1956.\");\nrow1.add(\"dense\", gson.toJsonTree(dense1));\nrow1.add(\"sparse\", gson.toJsonTree(sparse1));\n\nJsonObject row2 = new JsonObject();\nrow2.addProperty(\"id\", 2);\nrow2.addProperty(\"text\", \"Alan Turing was the first person to conduct substantial research in AI.\");\nrow2.add(\"dense\", gson.toJsonTree(dense2));\nrow2.add(\"sparse\", gson.toJsonTree(sparse2));\n\nJsonObject row3 = new JsonObject();\nrow3.addProperty(\"id\", 3);\nrow3.addProperty(\"text\", \"Born in Maida Vale, London, Turing was raised in southern England.\");\nrow3.add(\"dense\", gson.toJsonTree(dense3));\nrow3.add(\"sparse\", gson.toJsonTree(sparse3));\n\nList<JsonObject> data = Arrays.asList(row1, row2, row3);\nInsertReq insertReq = InsertReq.builder()\n        .collectionName(\"my_collection\")\n        .data(data)\n        .build();\n\nInsertResp insertResp = client.insert(insertReq);\n","v := make([]entity.SparseEmbedding, 0, 3)\nsparseVector1, _ := entity.NewSliceSparseEmbedding([]uint32{9637, 4399, 3573}, []float32{0.30856525997853057, 0.19771651149001523, 0.1576378135})\nv = append(v, sparseVector1)\nsparseVector2, _ := entity.NewSliceSparseEmbedding([]uint32{6959, 1729, 5263}, []float32{0.31025067641541815, 0.8265339135915016, 0.68647322132})\nv = append(v, sparseVector2)\nsparseVector3, _ := entity.NewSliceSparseEmbedding([]uint32{1220, 7335}, []float32{0.15303302147479103, 0.9436728846033107})\nv = append(v, sparseVector3)\nsparseColumn := column.NewColumnSparseVectors(\"sparse\", v)\n\n_, err = client.Insert(ctx, milvusclient.NewColumnBasedInsertOption(\"my_collection\").\n    WithInt64Column(\"id\", []int64{0, 1, 2}).\n    WithVarcharColumn(\"text\", []string{\n        \"Artificial intelligence was founded as an academic discipline in 1956.\",\n        \"Alan Turing was the first person to conduct substantial research in AI.\",\n        \"Born in Maida Vale, London, Turing was raised in southern England.\",\n    }).\n    WithFloatVectorColumn(\"dense\", 5, [][]float32{\n        {0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592},\n        {0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104},\n        {0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592},\n    }).\n    WithColumns(sparseColumn))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle err\n}\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nvar data = [\n    {id: 0, text: \"Artificial intelligence was founded as an academic discipline in 1956.\", sparse:[9637: 0.30856525997853057, 4399: 0.19771651149001523, ...] , dense: [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]},\n    {id: 1, text: \"Alan Turing was the first person to conduct substantial research in AI.\", sparse:[6959: 0.31025067641541815, 1729: 0.8265339135915016, ...] , dense: [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104]},\n    {id: 2, text: \"Born in Maida Vale, London, Turing was raised in southern England.\" , sparse:[1220: 0.15303302147479103, 7335: 0.9436728846033107, ...] , dense: [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, 0.7894058910881185, 0.20785793220625592]}       \n]\n\nvar res = await client.insert({\n    collection_name: \"my_collection\",\n    data: data,\n})\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/insert\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d '{\n    \"data\": [\n        {\"id\": 0, \"text\": \"Artificial intelligence was founded as an academic discipline in 1956.\", \"sparse\":{\"9637\": 0.30856525997853057, \"4399\": 0.19771651149001523}, \"dense\": [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, ...]},\n        {\"id\": 1, \"text\": \"Alan Turing was the first person to conduct substantial research in AI.\", \"sparse\":{\"6959\": 0.31025067641541815, \"1729\": 0.8265339135915016}, \"dense\": [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, ...]},\n        {\"id\": 2, \"text\": \"Born in Maida Vale, London, Turing was raised in southern England.\", \"sparse\":{\"1220\": 0.15303302147479103, \"7335\": 0.9436728846033107}, \"dense\": [0.43742130801983836, -0.5597502546264526, 0.6457887650909682, ...]}\n    ],\n    \"collectionName\": \"my_collection\"\n}'\n","from pymilvus import AnnSearchRequest\n\nquery_dense_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]\n\nsearch_param_1 = {\n    \"data\": [query_dense_vector],\n    \"anns_field\": \"dense\",\n    \"param\": {\n        \"metric_type\": \"IP\",\n        \"params\": {\"nprobe\": 10}\n    },\n    \"limit\": 2\n}\nrequest_1 = AnnSearchRequest(**search_param_1)\n\nquery_sparse_vector = {3573: 0.34701499565746674, 5263: 0.2639375518635271}\nsearch_param_2 = {\n    \"data\": [query_sparse_vector],\n    \"anns_field\": \"sparse\",\n    \"param\": {\n        \"metric_type\": \"IP\",\n        \"params\": {\"drop_ratio_build\": 0.2}\n    },\n    \"limit\": 2\n}\nrequest_2 = AnnSearchRequest(**search_param_2)\n\nreqs = [request_1, request_2]\n\n","import io.milvus.v2.service.vector.request.AnnSearchReq;\nimport io.milvus.v2.service.vector.request.data.BaseVector;\nimport io.milvus.v2.service.vector.request.data.FloatVec;\nimport io.milvus.v2.service.vector.request.data.SparseFloatVec;\n\nfloat[] dense = new float[]{-0.0475336798f,  0.0521207601f,  0.0904406682f, ...};\nSortedMap<Long, Float> sparse = new TreeMap<Long, Float>() {{\n    put(3573L, 0.34701499f);\n    put(5263L, 0.263937551f);\n    ...\n}};\n\nList<BaseVector> queryDenseVectors = Collections.singletonList(new FloatVec(dense));\nList<BaseVector> querySparseVectors = Collections.singletonList(new SparseFloatVec(sparse));\n\nList<AnnSearchReq> searchRequests = new ArrayList<>();\nsearchRequests.add(AnnSearchReq.builder()\n        .vectorFieldName(\"dense\")\n        .vectors(queryDenseVectors)\n        .metricType(IndexParam.MetricType.IP)\n        .params(\"{\\\"nprobe\\\": 10}\")\n        .topK(2)\n        .build());\nsearchRequests.add(AnnSearchReq.builder()\n        .vectorFieldName(\"sparse\")\n        .vectors(querySparseVectors)\n        .metricType(IndexParam.MetricType.IP)\n        .params(\"{\\\"drop_ratio_build\\\": 0.2}\")\n        .topK(2)\n        .build());\n","queryVector := []float32{0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592}\nsparseVector, _ := entity.NewSliceSparseEmbedding([]uint32{3573, 5263}, []float32{0.34701499, 0.263937551})\n\nrequest1 := milvusclient.NewAnnRequest(\"dense\", 2, entity.FloatVector(queryVector)).\n    WithAnnParam(index.NewIvfAnnParam(10)).\n    WithSearchParam(index.MetricTypeKey, \"IP\")\nannParam := index.NewSparseAnnParam()\nannParam.WithDropRatio(0.2)\nrequest2 := milvusclient.NewAnnRequest(\"sparse\", 2, sparseVector).\n    WithAnnParam(annParam).\n    WithSearchParam(index.MetricTypeKey, \"IP\")\n","const search_param_1 = {\n    \"data\": query_vector, \n    \"anns_field\": \"dense\", \n    \"param\": {\n        \"metric_type\": \"IP\",\n        \"params\": {\"nprobe\": 10}\n    },\n    \"limit\": 2\n}\n\nconst search_param_2 = {\n    \"data\": query_sparse_vector, \n    \"anns_field\": \"sparse\", \n    \"param\": {\n        \"metric_type\": \"IP\",\n        \"params\": {\"drop_ratio_build\": 0.2}\n    },\n    \"limit\": 2\n}\n","export req='[\n    {\n        \"data\": [[0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592,....]],\n        \"annsField\": \"dense\",\n        \"params\": {\n            \"params\": {\n                \"nprobe\": 10\n             }\n        },\n        \"limit\": 2\n    },\n    {\n        \"data\": [{\"3573\": 0.34701499565746674}, {\"5263\": 0.2639375518635271}],\n        \"annsField\": \"sparse\",\n        \"params\": {\n            \"params\": {\n                \"drop_ratio_build\": 0.2\n             }\n        },\n        \"limit\": 2\n    }\n ]'\n","from pymilvus import WeightedRanker\n\nranker = WeightedRanker(0.8, 0.3) \n","import io.milvus.v2.service.vector.request.ranker.BaseRanker;\nimport io.milvus.v2.service.vector.request.ranker.WeightedRanker;\n\nBaseRanker reranker = new WeightedRanker(Arrays.asList(0.8f, 0.3f));\n","reranker := milvusclient.NewWeightedReranker([]float64{0.8, 0.3})\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst rerank = WeightedRanker(0.8, 0.3);\n","export rerank='{\n        \"strategy\": \"ws\",\n        \"params\": {\"weights\": [0.8,0.3]}\n    }'\n","from pymilvus import RRFRanker\n\nranker = RRFRanker(100)\n","import io.milvus.v2.service.vector.request.ranker.BaseRanker;\nimport io.milvus.v2.service.vector.request.ranker.RRFRanker;\n\nBaseRanker reranker = new RRFRanker(100);\n","reranker := milvusclient.NewRRFReranker().WithK(100)\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";\n\nconst rerank = RRFRanker(\"100\");\n","export rerank='{\n        \"strategy\": \"rrf\",\n        \"params\": { \"k\": 100}\n    }'\n","from pymilvus import MilvusClient\n\nres = client.hybrid_search(\n    collection_name=\"my_collection\",\n    reqs=reqs,\n    ranker=ranker,\n    limit=2\n)\nfor hits in res:\n    print(\"TopK results:\")\n    for hit in hits:\n        print(hit)\n","import io.milvus.v2.common.ConsistencyLevel;\nimport io.milvus.v2.service.vector.request.HybridSearchReq;\nimport io.milvus.v2.service.vector.response.SearchResp;\n\nHybridSearchReq hybridSearchReq = HybridSearchReq.builder()\n        .collectionName(\"my_collection\")\n        .searchRequests(searchRequests)\n        .ranker(reranker)\n        .topK(2)\n        .build();\n\nSearchResp searchResp = client.hybridSearch(hybridSearchReq);\n","resultSets, err := client.HybridSearch(ctx, milvusclient.NewHybridSearchOption(\n    \"my_collection\",\n    2,\n    request1,\n    request2,\n).WithReranker(reranker))\nif err != nil {\n    fmt.Println(err.Error())\n    // handle error\n}\n\nfor _, resultSet := range resultSets {\n    fmt.Println(\"IDs: \", resultSet.IDs.FieldData().GetScalars())\n    fmt.Println(\"Scores: \", resultSet.Scores)\n}\n","const { MilvusClient, DataType } = require(\"@zilliz/milvus2-sdk-node\")\n\nres = await client.loadCollection({\n    collection_name: \"my_collection\"\n})\n\nimport { MilvusClient, RRFRanker, WeightedRanker } from '@zilliz/milvus2-sdk-node';\n\nconst search = await client.search({\n  collection_name: \"my_collection\",\n  data: [search_param_1, search_param_2],\n  limit: 2,\n  rerank: RRFRanker(100)\n});\n","curl --request POST \\\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/advanced_search\" \\\n--header \"Authorization: Bearer ${TOKEN}\" \\\n--header \"Content-Type: application/json\" \\\n-d \"{\n    \\\"collectionName\\\": \\\"my_collection\\\",\n    \\\"search\\\": ${req},\n    \\\"rerank\\\": {\n        \\\"strategy\\\":\\\"rrf\\\",\n        \\\"params\\\": {\n            \\\"k\\\": 10\n        }\n    },\n    \\\"limit\\\": 3,\n    \\\"outputFields\\\": [\n        \\\"user_id\\\",\n        \\\"word_count\\\",\n        \\\"book_describe\\\"\n    ]\n}\"\n","[\"['id: 844, distance: 0.006047376897186041, entity: {}', 'id: 876, distance: 0.006422005593776703, entity: {}']\"]\n"],"headingContent":"Hybrid Search","anchorList":[{"label":"Hybrid Search","href":"Hybrid-Search","type":1,"isActive":false},{"label":"Scenarios","href":"Scenarios","type":2,"isActive":false},{"label":"Workflow","href":"Workflow","type":2,"isActive":false},{"label":"Examples","href":"Examples","type":2,"isActive":false}]}