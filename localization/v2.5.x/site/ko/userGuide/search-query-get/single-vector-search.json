{"codeList":["from pymilvus import MilvusClient​\n​\nclient = MilvusClient(​\n    uri=\"http://localhost:19530\",​\n    token=\"root:Milvus\"​\n)​\n​\n# 4. Single vector search​\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]​\nres = client.search(​\n    collection_name=\"my_collection\",​\n    anns_field=\"vector\",​\n    data=[query_vector],​\n    limit=3,​\n    search_params={\"metric_type\": \"IP\"}​\n)​\n​\nfor hits in res:​\n    for hit in hits:​\n        print(hit)​\n​\n# [​\n#     [​\n#         {​\n#             \"id\": 551,​\n#             \"distance\": 0.08821295201778412,​\n#             \"entity\": {}​\n#         },​\n#         {​\n#             \"id\": 296,​\n#             \"distance\": 0.0800950899720192,​\n#             \"entity\": {}​\n#         },​\n#         {​\n#             \"id\": 43,​\n#             \"distance\": 0.07794742286205292,​\n#             \"entity\": {}​\n#         }​\n#     ]​\n# ]​\n\n","import io.milvus.v2.client.ConnectConfig;​\nimport io.milvus.v2.client.MilvusClientV2;​\nimport io.milvus.v2.service.vector.request.SearchReq;​\nimport io.milvus.v2.service.vector.request.data.FloatVec;​\nimport io.milvus.v2.service.vector.response.SearchResp;​\n​\nimport java.util.*;​\n​\nMilvusClientV2 client = new MilvusClientV2(ConnectConfig.builder()​\n        .uri(\"http://localhost:19530\")​\n        .token(\"root:Milvus\")​\n        .build());​\n    ​\nFloatVec queryVector = new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f});​\nSearchReq searchReq = SearchReq.builder()​\n        .collectionName(\"my_collection\")​\n        .data(Collections.singletonList(queryVector))​\n        .topK(3)​\n        .build();​\n​\nSearchResp searchResp = client.search(searchReq);​\n​\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();​\nfor (List<SearchResp.SearchResult> results : searchResults) {​\n    System.out.println(\"TopK results:\");​\n    for (SearchResp.SearchResult result : results) {​\n        System.out.println(result);​\n    }​\n}​\n​\n// Output​\n// TopK results:​\n// SearchResp.SearchResult(entity={}, score=0.95944905, id=5)​\n// SearchResp.SearchResult(entity={}, score=0.8689616, id=1)​\n// SearchResp.SearchResult(entity={}, score=0.866088, id=7)​\n\n","import (​\n    \"context\"​\n    \"fmt\"​\n    \"log\"​\n​\n    \"github.com/milvus-io/milvus/client/v2\"​\n    \"github.com/milvus-io/milvus/client/v2/entity\"​\n)​\n​\nfunc ExampleClient_Search_basic() {​\n    ctx, cancel := context.WithCancel(context.Background())​\n    defer cancel()​\n​\n    milvusAddr := \"127.0.0.1:19530\"​\n    token := \"root:Milvus\"​\n​\n    cli, err := client.New(ctx, &client.ClientConfig{​\n        Address: milvusAddr,​\n        APIKey:  token,​\n    })​\n    if err != nil {​\n        log.Fatal(\"failed to connect to milvus server: \", err.Error())​\n    }​\n​\n    defer cli.Close(ctx)​\n​\n    queryVector := []float32{0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592}​\n​\n    resultSets, err := cli.Search(ctx, client.NewSearchOption(​\n        \"my_collection\", // collectionName​\n        3,             // limit​\n        []entity.Vector{entity.FloatVector(queryVector)},​\n    ))​\n    if err != nil {​\n        log.Fatal(\"failed to perform basic ANN search collection: \", err.Error())​\n    }​\n​\n    for _, resultSet := range resultSets {​\n        log.Println(\"IDs: \", resultSet.IDs)​\n        log.Println(\"Scores: \", resultSet.Scores)​\n    }​\n    // Output:​\n    // IDs:​\n    // Scores:​\n}​\n\n","import { MilvusClient, DataType } from \"@zilliz/milvus2-sdk-node\";​\n​\nconst address = \"http://localhost:19530\";​\nconst token = \"root:Milvus\";​\nconst client = new MilvusClient({address, token});​\n​\n// 4. Single vector search​\nvar query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],​\n​\nres = await client.search({​\n    collection_name: \"my_collection\",​\n    data: query_vector,​\n    limit: 3, // The number of results to return​\n})​\n​\nconsole.log(res.results)​\n​\n// [​\n//   { score: 0.08821295201778412, id: '551' },​\n//   { score: 0.0800950899720192, id: '296' },​\n//   { score: 0.07794742286205292, id: '43' }​\n// ]​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"quick_setup\",​\n    \"data\": [​\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]​\n    ],​\n    \"annsField\": \"vector\",​\n    \"limit\": 3​\n}'​\n​\n# {​\n#     \"code\": 0,​\n#     \"data\": [​\n#         {​\n#             \"distance\": 0.08821295201778412,​\n#             \"id\": 551​\n#         },​\n#         {​\n#             \"distance\": 0.0800950899720192,​\n#             \"id\": 296​\n#         },​\n#         {​\n#             \"distance\": 0.07794742286205292,​\n#             \"id\": 43​\n#         }​\n#     ]​\n# }​\n\n","# 7. Search with multiple vectors​\n# 7.1. Prepare query vectors​\nquery_vectors = [​\n    [0.041732933, 0.013779674, -0.027564144, -0.013061441, 0.009748648],​\n    [0.0039737443, 0.003020432, -0.0006188639, 0.03913546, -0.00089768134]​\n]​\n​\n# 7.2. Start search​\nres = client.search(​\n    collection_name=\"my_collection\",​\n    data=query_vectors,​\n    limit=3,​\n)​\n​\nfor hits in res:​\n    print(\"TopK results:\")​\n    for hit in hits:​\n        print(hit)​\n​\n# Output​\n#​\n# [​\n#     [​\n#         {​\n#             \"id\": 551,​\n#             \"distance\": 0.08821295201778412,​\n#             \"entity\": {}​\n#         },​\n#         {​\n#             \"id\": 296,​\n#             \"distance\": 0.0800950899720192,​\n#             \"entity\": {}​\n#         },​\n#         {​\n#             \"id\": 43,​\n#             \"distance\": 0.07794742286205292,​\n#             \"entity\": {}​\n#         }​\n#     ],​\n#     [​\n#         {​\n#             \"id\": 730,​\n#             \"distance\": 0.04431751370429993,​\n#             \"entity\": {}​\n#         },​\n#         {​\n#             \"id\": 333,​\n#             \"distance\": 0.04231833666563034,​\n#             \"entity\": {}​\n#         },​\n#         {​\n#             \"id\": 232,​\n#             \"distance\": 0.04221535101532936,​\n#             \"entity\": {}​\n#         }​\n#     ]​\n# ]​\n​\n\n","import io.milvus.v2.service.vector.request.SearchReq​\nimport io.milvus.v2.service.vector.request.data.BaseVector;​\nimport io.milvus.v2.service.vector.request.data.FloatVec;​\nimport io.milvus.v2.service.vector.response.SearchResp​\n​\nList<BaseVector> queryVectors = Arrays.asList(​\n        new FloatVec(new float[]{0.041732933f, 0.013779674f, -0.027564144f, -0.013061441f, 0.009748648f}),​\n        new FloatVec(new float[]{0.0039737443f, 0.003020432f, -0.0006188639f, 0.03913546f, -0.00089768134f})​\n);​\nSearchReq searchReq = SearchReq.builder()​\n        .collectionName(\"quick_setup\")​\n        .data(queryVectors)​\n        .topK(3)​\n        .build();​\n​\nSearchResp searchResp = client.search(searchReq);​\n​\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();​\nfor (List<SearchResp.SearchResult> results : searchResults) {​\n    System.out.println(\"TopK results:\");​\n    for (SearchResp.SearchResult result : results) {​\n        System.out.println(result);​\n    }​\n}​\n​\n// Output​\n// TopK results:​\n// SearchResp.SearchResult(entity={}, score=0.49548206, id=1)​\n// SearchResp.SearchResult(entity={}, score=0.320147, id=3)​\n// SearchResp.SearchResult(entity={}, score=0.107413776, id=6)​\n// TopK results:​\n// SearchResp.SearchResult(entity={}, score=0.5678123, id=6)​\n// SearchResp.SearchResult(entity={}, score=0.32368967, id=2)​\n// SearchResp.SearchResult(entity={}, score=0.24108477, id=3)​\n\n","// 7. Search with multiple vectors​\nconst query_vectors = [​\n    [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592], ​\n    [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104]​\n]​\n​\nres = await client.search({​\n    collection_name: \"quick_setup\",​\n    vectors: query_vectors,​\n    limit: 5,​\n})​\n​\nconsole.log(res.results)​\n​\n// Output​\n// ​\n// [​\n//   [​\n//     { score: 0.08821295201778412, id: '551' },​\n//     { score: 0.0800950899720192, id: '296' },​\n//     { score: 0.07794742286205292, id: '43' }​\n//   ],​\n//   [​\n//     { score: 0.04431751370429993, id: '730' },​\n//     { score: 0.04231833666563034, id: '333' },​\n//     { score: 0.04221535101532936, id: '232' },​\n//   ]​\n// ]​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"quick_setup\",​\n    \"data\": [​\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],​\n        [0.19886812562848388, 0.06023560599112088, 0.6976963061752597, 0.2614474506242501, 0.838729485096104]​\n    ],​\n    \"annsField\": \"vector\",​\n    \"limit\": 3​\n}'​\n​\n# {​\n#     \"code\": 0,​\n#     \"data\": [​\n#         [​\n#           {​\n#               \"distance\": 0.08821295201778412,​\n#               \"id\": 551​\n#           },​\n#           {​\n#               \"distance\": 0.0800950899720192,​\n#               \"id\": 296​\n#           },​\n#           {​\n#               \"distance\": 0.07794742286205292,​\n#               \"id\": 43​\n#           }​\n#         ],​\n#         [​\n#           {​\n#               \"distance\": 0.04431751370429993,​\n#               \"id\": 730​\n#           },​\n#           {​\n#               \"distance\": 0.04231833666563034,​\n#               \"id\": 333​\n#           },​\n#           {​\n#               \"distance\": 0.04221535101532936,​\n#               \"id\": 232​\n#           }​\n#        ]​\n#     ]​\n# }​\n\n","# 4. Single vector search​\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]​\nres = client.search(​\n    collection_name=\"my_collection\",​\n    # highlight-next-line​\n    partition_names=[\"partitionA\"],​\n    data=[query_vector],​\n    limit=3,​\n)​\n​\nfor hits in res:​\n    print(\"TopK results:\")​\n    for hit in hits:​\n        print(hit)​\n​\n# [​\n#     [​\n#         {​\n#             \"id\": 551,​\n#             \"distance\": 0.08821295201778412,​\n#             \"entity\": {}​\n#         },​\n#         {​\n#             \"id\": 296,​\n#             \"distance\": 0.0800950899720192,​\n#             \"entity\": {}​\n#         },​\n#         {​\n#             \"id\": 43,​\n#             \"distance\": 0.07794742286205292,​\n#             \"entity\": {}​\n#         }​\n#     ]​\n# ]​\n\n","import io.milvus.v2.service.vector.request.SearchReq​\nimport io.milvus.v2.service.vector.request.data.FloatVec;​\nimport io.milvus.v2.service.vector.response.SearchResp​\n​\nFloatVec queryVector = new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f});​\nSearchReq searchReq = SearchReq.builder()​\n        .collectionName(\"quick_setup\")​\n        .partitionNames(Collections.singletonList(\"partitionA\"))​\n        .data(Collections.singletonList(queryVector))​\n        .topK(3)​\n        .build();​\n​\nSearchResp searchResp = client.search(searchReq);​\n​\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();​\nfor (List<SearchResp.SearchResult> results : searchResults) {​\n    System.out.println(\"TopK results:\");​\n    for (SearchResp.SearchResult result : results) {​\n        System.out.println(result);​\n    }​\n}​\n​\n// Output​\n// TopK results:​\n// SearchResp.SearchResult(entity={}, score=0.6395302, id=13)​\n// SearchResp.SearchResult(entity={}, score=0.5408028, id=12)​\n// SearchResp.SearchResult(entity={}, score=0.49696884, id=17)​\n\n","// 4. Single vector search​\nvar query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],​\n​\nres = await client.search({​\n    collection_name: \"quick_setup\",​\n    // highlight-next-line​\n    partition_names: [\"partitionA\"],​\n    data: query_vector,​\n    limit: 3, // The number of results to return​\n})​\n​\nconsole.log(res.results)​\n​\n// [​\n//   { score: 0.08821295201778412, id: '551' },​\n//   { score: 0.0800950899720192, id: '296' },​\n//   { score: 0.07794742286205292, id: '43' }​\n// ]​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"quick_setup\",​\n    \"partitionNames\": [\"partitionA\"],​\n    \"data\": [​\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]​\n    ],​\n    \"annsField\": \"vector\",​\n    \"limit\": 3​\n}'​\n​\n# {​\n#     \"code\": 0,​\n#     \"data\": [​\n#         {​\n#             \"distance\": 0.08821295201778412,​\n#             \"id\": 551​\n#         },​\n#         {​\n#             \"distance\": 0.0800950899720192,​\n#             \"id\": 296​\n#         },​\n#         {​\n#             \"distance\": 0.07794742286205292,​\n#             \"id\": 43​\n#         }​\n#     ]​\n# }​\n\n","# 4. Single vector search​\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],​\n​\nres = client.search(​\n    collection_name=\"quick_setup\",​\n    data=[query_vector],​\n    limit=3, # The number of results to return​\n    search_params={\"metric_type\": \"IP\"}，​\n    # highlight-next-line​\n    output_fields=[\"color\"]​\n)​\n​\nprint(res)​\n​\n# [​\n#     [​\n#         {​\n#             \"id\": 551,​\n#             \"distance\": 0.08821295201778412,​\n#             \"entity\": {​\n#                 \"color\": \"orange_6781\"​\n#             }​\n#         },​\n#         {​\n#             \"id\": 296,​\n#             \"distance\": 0.0800950899720192,​\n#             \"entity\": {​\n#                 \"color\": \"red_4794\"​\n#             }​\n#         },​\n#         {​\n#             \"id\": 43,​\n#             \"distance\": 0.07794742286205292,​\n#             \"entity\": {​\n#                 \"color\": \"grey_8510\"​\n#             }​\n#         }​\n#     ]​\n# ]​\n\n","import io.milvus.v2.service.vector.request.SearchReq​\nimport io.milvus.v2.service.vector.request.data.FloatVec;​\nimport io.milvus.v2.service.vector.response.SearchResp​\n​\nFloatVec queryVector = new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f});​\nSearchReq searchReq = SearchReq.builder()​\n        .collectionName(\"quick_setup\")​\n        .data(Collections.singletonList(queryVector))​\n        .topK(3)​\n        .outputFields(Collections.singletonList(\"color\"))​\n        .build();​\n​\nSearchResp searchResp = client.search(searchReq);​\n​\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();​\nfor (List<SearchResp.SearchResult> results : searchResults) {​\n    System.out.println(\"TopK results:\");​\n    for (SearchResp.SearchResult result : results) {​\n        System.out.println(result);​\n    }​\n}​\n​\n// Output​\n// TopK results:​\n// SearchResp.SearchResult(entity={color=black_9955}, score=0.95944905, id=5)​\n// SearchResp.SearchResult(entity={color=red_7319}, score=0.8689616, id=1)​\n// SearchResp.SearchResult(entity={color=white_5015}, score=0.866088, id=7)​\n\n","// 4. Single vector search​\nvar query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],​\n​\nres = await client.search({​\n    collection_name: \"quick_setup\",​\n    data: query_vector,​\n    limit: 3, // The number of results to return​\n    // highlight-next-line​\n    output_fields: [\"color\"]​\n})​\n​\nconsole.log(res.results)​\n​\n// [​\n//   { score: 0.08821295201778412, id: '551', entity: {\"color\": \"orange_6781\"}},​\n//   { score: 0.0800950899720192, id: '296' entity: {\"color\": \"red_4794\"}},​\n//   { score: 0.07794742286205292, id: '43' entity: {\"color\": \"grey_8510\"}}​\n// ]​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"quick_setup\",​\n    \"data\": [​\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]​\n    ],​\n    \"annsField\": \"vector\",​\n    \"limit\": 3,​\n    \"outputFields\": [\"color\"]​\n}'​\n​\n# {​\n#     \"code\": 0,​\n#     \"data\": [​\n#         {​\n#             \"distance\": 0.08821295201778412,​\n#             \"id\": 551,​\n#             \"color\": \"orange_6781\"​\n#         },​\n#         {​\n#             \"distance\": 0.0800950899720192,​\n#             \"id\": 296,​\n#             \"color\": \"red_4794\"​\n#         },​\n#         {​\n#             \"distance\": 0.07794742286205292,​\n#             \"id\": 43​\n#             \"color\": \"grey_8510\"​\n#         }​\n#     ]​\n# }​\n\n","# 4. Single vector search​\nquery_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],​\n​\nres = client.search(​\n    collection_name=\"quick_setup\",​\n    data=[query_vector],​\n    limit=3, # The number of results to return​\n    search_params={​\n        \"metric_type\": \"IP\", ​\n        # highlight-next-line​\n        \"offset\": 10 # The records to skip​\n    }​\n)​\n\n","import io.milvus.v2.service.vector.request.SearchReq​\nimport io.milvus.v2.service.vector.request.data.FloatVec;​\nimport io.milvus.v2.service.vector.response.SearchResp​\n​\nFloatVec queryVector = new FloatVec(new float[]{0.3580376395471989f, -0.6023495712049978f, 0.18414012509913835f, -0.26286205330961354f, 0.9029438446296592f});​\nSearchReq searchReq = SearchReq.builder()​\n        .collectionName(\"quick_setup\")​\n        .data(Collections.singletonList(queryVector))​\n        .topK(3)​\n        .offset(10)​\n        .build();​\n​\nSearchResp searchResp = client.search(searchReq);​\n​\nList<List<SearchResp.SearchResult>> searchResults = searchResp.getSearchResults();​\nfor (List<SearchResp.SearchResult> results : searchResults) {​\n    System.out.println(\"TopK results:\");​\n    for (SearchResp.SearchResult result : results) {​\n        System.out.println(result);​\n    }​\n}​\n​\n// Output​\n// TopK results:​\n// SearchResp.SearchResult(entity={}, score=0.24120237, id=16)​\n// SearchResp.SearchResult(entity={}, score=0.22559784, id=9)​\n// SearchResp.SearchResult(entity={}, score=-0.09906838, id=2)​\n\n","// 4. Single vector search​\nvar query_vector = [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592],​\n​\nres = await client.search({​\n    collection_name: \"quick_setup\",​\n    data: query_vector,​\n    limit: 3, // The number of results to return,​\n    // highlight-next-line​\n    offset: 10 // The record to skip.​\n})​\n\n","export CLUSTER_ENDPOINT=\"http://localhost:19530\"​\nexport TOKEN=\"root:Milvus\"​\n​\ncurl --request POST \\​\n--url \"${CLUSTER_ENDPOINT}/v2/vectordb/entities/search\" \\​\n--header \"Authorization: Bearer ${TOKEN}\" \\​\n--header \"Content-Type: application/json\" \\​\n-d '{​\n    \"collectionName\": \"quick_setup\",​\n    \"data\": [​\n        [0.3580376395471989, -0.6023495712049978, 0.18414012509913835, -0.26286205330961354, 0.9029438446296592]​\n    ],​\n    \"annsField\": \"vector\",​\n    \"limit\": 3,​\n    \"offset\": 10​\n}'​\n\n"],"headingContent":"Ba​sic ANN Search","anchorList":[{"label":"Ba​sic ANN Search","href":"Ba​sic-ANN-Search","type":1,"isActive":false},{"label":"Overview​","href":"Overview​","type":2,"isActive":false},{"label":"Single-Vector Search​","href":"Single-Vector-Search​","type":2,"isActive":false},{"label":"Bulk-Vector Search​","href":"Bulk-Vector-Search​","type":2,"isActive":false},{"label":"ANN Search in Partition​","href":"ANN-Search-in-Partition​","type":2,"isActive":false},{"label":"Use Output Fields​","href":"Use-Output-Fields​","type":2,"isActive":false},{"label":"Use Limit and Offset​","href":"Use-Limit-and-Offset​","type":2,"isActive":false},{"label":"Enhancing ANN Search​","href":"Enhancing-ANN-Search​","type":2,"isActive":false}]}